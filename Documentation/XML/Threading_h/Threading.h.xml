<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE header PUBLIC "-//Apple Computer//DTD HEADERDOC 1.6//EN" "/System/Library/DTDs/HeaderDoc-1.6.dtd">
<header id="//xsdoc_ref/doc/header/Threading.h" lang="c" filename="Threading.h" headerpath="/Users/macmade/Documents/Macmade/GitHub/XSFoundation/XSFoundation/include/XS/Functions/Threading.h"><name>Threading.h</name>
<abstract><p>Threading-related functions
</p></abstract>
<attributes><attribute><name>Author</name><value>Jean-David Gadina - www.xs-labs.com</value></attribute>
</attributes>
<includes>
<include><hd_link logicalPath="//xsdoc_ref/doc/header/Macros.h">&lt;XS/Macros.h&gt;</hd_link></include>
<include><hd_link logicalPath="//xsdoc_ref/doc/header/stdint.h">&lt;stdint.h&gt;</hd_link></include>
</includes>
<desc><p/></desc>
<functions><function id="//xsdoc_ref/c/func/XSGetCurrentThreadID" lang="c"><name>XSGetCurrentThreadID</name>
<abstract><p>Gets the ID of the current thread
</p></abstract>
<returntype> XS_EXPORT uint64_t</returntype>
<result><p>The ID of the current thread
</p></result>
<declaration><declaration_type>XS_EXPORT</declaration_type> <declaration_type>uint64_t</declaration_type> <declaration_function>XSGetCurrentThreadID</declaration_function>(
    <declaration_param>void</declaration_param> );  </declaration>
<desc><p/></desc>
</function><function id="//xsdoc_ref/c/func/XSTLSGetValue" lang="c"><name>XSTLSGetValue</name>
<abstract><p>Gets the value associated with a TLS key
</p></abstract>
<parameterlist>
<parameter><name>key</name><desc><p>The TLS key</p></desc></parameter>
</parameterlist>
<parsedparameterlist>
<parsedparameter><type>XSTLSKey *</type><name>key</name></parsedparameter>
</parsedparameterlist>
<returntype> void *</returntype>
<result><p>The associated value
</p></result>
<declaration><declaration_type>void</declaration_type> <declaration_type>*</declaration_type> <declaration_function>XSTLSGetValue</declaration_function>(
    <declaration_type>XSTLSKey</declaration_type> <declaration_type>*</declaration_type><declaration_param>key</declaration_param> );  </declaration>
<desc><p/></desc>
</function><function id="//xsdoc_ref/c/func/XSTLSKeyCreate" lang="c"><name>XSTLSKeyCreate</name>
<abstract><p>Creates a TLS key
</p></abstract>
<parameterlist>
<parameter><name>key</name><desc><p>A pointer to an uninitialized TLS key</p></desc></parameter>
</parameterlist>
<parsedparameterlist>
<parsedparameter><type>XSTLSKey *</type><name>key</name></parsedparameter>
</parsedparameterlist>
<returntype> bool</returntype>
<result><p>True if the key was successfully created, otherwise false
</p></result>
<declaration><declaration_type>bool</declaration_type> <declaration_function>XSTLSKeyCreate</declaration_function>(
    <declaration_type>XSTLSKey</declaration_type> <declaration_type>*</declaration_type><declaration_param>key</declaration_param> );  </declaration>
<desc><p/></desc>
</function><function id="//xsdoc_ref/c/func/XSTLSKeyDelete" lang="c"><name>XSTLSKeyDelete</name>
<abstract><p>Deletes a TLS key
</p></abstract>
<parameterlist>
<parameter><name>key</name><desc><p>A pointer to the TLS key to delete</p></desc></parameter>
</parameterlist>
<parsedparameterlist>
<parsedparameter><type>XSTLSKey *</type><name>key</name></parsedparameter>
</parsedparameterlist>
<returntype> void</returntype>
<declaration><declaration_type>void</declaration_type> <declaration_function>XSTLSKeyDelete</declaration_function>(
    <declaration_type>XSTLSKey</declaration_type> <declaration_type>*</declaration_type><declaration_param>key</declaration_param> );  </declaration>
<desc><p/></desc>
</function><function id="//xsdoc_ref/c/func/XSTLSSetValue" lang="c"><name>XSTLSSetValue</name>
<abstract><p>Sets the value associated with a TLS key
</p></abstract>
<parameterlist>
<parameter><name>key</name><desc><p>The TLS key</p></desc></parameter>
<parameter><name>value</name><desc><p>The value to set</p></desc></parameter>
<parameter><name>association</name><desc><p>The association type to use</p></desc></parameter>
</parameterlist>
<parsedparameterlist>
<parsedparameter><type>XSTLSKey *</type><name>key</name></parsedparameter>
<parsedparameter><type>void *</type><name>value</name></parsedparameter>
<parsedparameter><type>XSObjectAssociation</type><name>association</name></parsedparameter>
</parsedparameterlist>
<attributelists><listattribute><name>See</name><list>
<item><name>XSObjectAssociation</name><value><hd_link logicalPath="XSObjectAssociation" isseealso="yes">XSObjectAssociation</hd_link></value></item></list></listattribute>
</attributelists>
<returntype> void</returntype>
<declaration><declaration_type>void</declaration_type> <declaration_function>XSTLSSetValue</declaration_function>(
    <declaration_type>XSTLSKey</declaration_type> <declaration_type>*</declaration_type><declaration_param>key</declaration_param>,
    <declaration_type>void</declaration_type> <declaration_type>*</declaration_type><declaration_param>value</declaration_param>,
    <declaration_type>XSObjectAssociation</declaration_type> <declaration_param>association</declaration_param> );  </declaration>
<desc><p/></desc>
</function></functions>
<copyrightinfo>&#169; (c) 2020 - Jean-David Gadina - www.xs-labs.com
</copyrightinfo>
<timestamp>Sunday, September 27, 2020</timestamp>
</header>