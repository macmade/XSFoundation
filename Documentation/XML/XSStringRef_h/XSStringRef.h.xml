<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE header PUBLIC "-//Apple Computer//DTD HEADERDOC 1.6//EN" "/System/Library/DTDs/HeaderDoc-1.6.dtd">
<header id="//xsdoc_ref/doc/header/XSStringRef.h" lang="c" filename="XSStringRef.h" headerpath="/Users/macmade/Documents/Macmade/Development/GitHub/XSFoundation/XSFoundation/include/XS/Classes/XSStringRef.h"><name>XSStringRef.h</name>
<abstract><p>XSString class
</p></abstract>
<attributes><attribute><name>Author</name><value>Jean-David Gadina - www.xs-labs.com</value></attribute>
</attributes>
<includes>
<include><hd_link logicalPath="//xsdoc_ref/doc/header/XSTypes.h">&lt;XS/XSTypes.h&gt;</hd_link></include>
<include><hd_link logicalPath="//xsdoc_ref/doc/header/XSMacros.h">&lt;XS/XSMacros.h&gt;</hd_link></include>
</includes>
<desc><p>...
</p></desc>
<functions><function id="//xsdoc_ref/c/func/XSString_ContainsCString" lang="c"><name>XSString_ContainsCString</name>
<abstract><p>Checks whether a string contains a C string
</p></abstract>
<parameterlist>
<parameter><name>object</name><desc><p>The string object</p></desc></parameter>
<parameter><name>s</name><desc><p>The C string to check for</p></desc></parameter>
</parameterlist>
<parsedparameterlist>
<parsedparameter><type>XSStringRef</type><name>object</name></parsedparameter>
<parsedparameter><type>const char *</type><name>s</name></parsedparameter>
</parsedparameterlist>
<returntype> XS_EXPORT bool</returntype>
<result><p>True if the receiver string contains the C string, otherwise false
</p></result>
<declaration><declaration_type>XS_EXPORT</declaration_type> <declaration_type>bool</declaration_type> <declaration_function>XSString_ContainsCString</declaration_function>(
    <declaration_type>XSStringRef</declaration_type> <declaration_param>object</declaration_param>,
    <declaration_keyword>const</declaration_keyword> <declaration_type>char</declaration_type> <declaration_type>*</declaration_type><declaration_param>s</declaration_param> );  </declaration>
<desc><p/></desc>
</function><function id="//xsdoc_ref/c/func/XSString_ContainsString" lang="c"><name>XSString_ContainsString</name>
<abstract><p>Checks whether a string contains another string
</p></abstract>
<parameterlist>
<parameter><name>object</name><desc><p>The string object</p></desc></parameter>
<parameter><name>s</name><desc><p>The string to check for</p></desc></parameter>
</parameterlist>
<parsedparameterlist>
<parsedparameter><type>XSStringRef</type><name>object</name></parsedparameter>
<parsedparameter><type>XSStringRef</type><name>s</name></parsedparameter>
</parsedparameterlist>
<returntype> XS_EXPORT bool</returntype>
<result><p>True if the receiver string contains the 's' string, otherwise false
</p></result>
<declaration><declaration_type>XS_EXPORT</declaration_type> <declaration_type>bool</declaration_type> <declaration_function>XSString_ContainsString</declaration_function>(
    <declaration_type>XSStringRef</declaration_type> <declaration_param>object</declaration_param>,
    <declaration_type>XSStringRef</declaration_type> <declaration_param>s</declaration_param> );  </declaration>
<desc><p/></desc>
</function><function id="//xsdoc_ref/c/func/XSString_CreateWithCString" lang="c"><name>XSString_CreateWithCString</name>
<abstract><p>Creates an XSString object from a C string
</p></abstract>
<parameterlist>
<parameter><name>s</name><desc><p>The C string (const char *)</p></desc></parameter>
</parameterlist>
<parsedparameterlist>
<parsedparameter><type>const char *</type><name>s</name></parsedparameter>
</parsedparameterlist>
<returntype> XS_EXPORT XSStatic XSStringRef</returntype>
<result><p>An XSString object
</p></result>
<declaration><declaration_type>XS_EXPORT</declaration_type> <declaration_type>XSStatic</declaration_type> <declaration_type>XSStringRef</declaration_type> <declaration_function>XSString_CreateWithCString</declaration_function>(
    <declaration_keyword>const</declaration_keyword> <declaration_type>char</declaration_type> <declaration_type>*</declaration_type><declaration_param>s</declaration_param> );  </declaration>
<desc><p/></desc>
</function><function id="//xsdoc_ref/c/func/XSString_CreateWithFormat" lang="c"><name>XSString_CreateWithFormat</name>
<abstract><p>Creates an XSString object from a format string with arguments
</p></abstract>
<parameterlist>
<parameter><name>format</name><desc><p>The format string</p></desc></parameter>
<parameter><name>...</name><desc><p>The format arguments</p></desc></parameter>
</parameterlist>
<parsedparameterlist>
<parsedparameter><type>const char *</type><name>format</name></parsedparameter>
<parsedparameter><type> ...</type><name>...</name></parsedparameter>
</parsedparameterlist>
<returntype> XS_EXPORT XSStatic XSStringRef</returntype>
<result><p>An XSString object
</p></result>
<declaration><declaration_type>XS_EXPORT</declaration_type> <declaration_type>XSStatic</declaration_type> <declaration_type>XSStringRef</declaration_type> <declaration_function>XSString_CreateWithFormat</declaration_function>(
    <declaration_keyword>const</declaration_keyword> <declaration_type>char</declaration_type> <declaration_type>*</declaration_type><declaration_param>format</declaration_param>,
    ... );  </declaration>
<desc><p/></desc>
</function><function id="//xsdoc_ref/c/func/XSString_CreateWithFormatAndArgs" lang="c"><name>XSString_CreateWithFormatAndArgs</name>
<abstract><p>Creates an XSString object from a format string with arguments
</p></abstract>
<parameterlist>
<parameter><name>format</name><desc><p>The format string</p></desc></parameter>
<parameter><name>args</name><desc><p>The format arguments</p></desc></parameter>
</parameterlist>
<parsedparameterlist>
<parsedparameter><type>const char *</type><name>format</name></parsedparameter>
<parsedparameter><type>va_list</type><name>args</name></parsedparameter>
</parsedparameterlist>
<returntype> XS_EXPORT XSStatic XSStringRef</returntype>
<result><p>An XSString object
</p></result>
<declaration><declaration_type>XS_EXPORT</declaration_type> <declaration_type>XSStatic</declaration_type> <declaration_type>XSStringRef</declaration_type> <declaration_function>XSString_CreateWithFormatAndArgs</declaration_function>(
    <declaration_keyword>const</declaration_keyword> <declaration_type>char</declaration_type> <declaration_type>*</declaration_type><declaration_param>format</declaration_param>,
    <declaration_type>va_list</declaration_type> <declaration_param>args</declaration_param> );  </declaration>
<desc><p/></desc>
</function><function id="//xsdoc_ref/c/func/XSString_GetClassID" lang="c"><name>XSString_GetClassID</name>
<abstract><p>Gets the class ID for XSString
</p></abstract>
<returntype> XS_EXPORT XSStatic XSClassID</returntype>
<result><p>The class ID for XSString
</p></result>
<declaration><declaration_type>XS_EXPORT</declaration_type> <declaration_type>XSStatic</declaration_type> <declaration_type>XSClassID</declaration_type> <declaration_function>XSString_GetClassID</declaration_function>(
    <declaration_param>void</declaration_param> );  </declaration>
<desc><p/></desc>
</function><function id="//xsdoc_ref/c/func/XSString_GetCString" lang="c"><name>XSString_GetCString</name>
<abstract><p>Gets the internal C string pointer
</p></abstract>
<parameterlist>
<parameter><name>object</name><desc><p>The string object</p></desc></parameter>
</parameterlist>
<parsedparameterlist>
<parsedparameter><type>XSStringRef</type><name>object</name></parsedparameter>
</parsedparameterlist>
<returntype> XS_EXPORT const char *</returntype>
<result><p>A pointer to the C string
</p></result>
<declaration><declaration_type>XS_EXPORT</declaration_type> <declaration_keyword>const</declaration_keyword> <declaration_type>char</declaration_type> <declaration_type>*</declaration_type> <declaration_function>XSString_GetCString</declaration_function>(
    <declaration_type>XSStringRef</declaration_type> <declaration_param>object</declaration_param> );  </declaration>
<desc><p>Do not alter the content of the C string.
</p></desc>
</function><function id="//xsdoc_ref/c/func/XSString_GetLength" lang="c"><name>XSString_GetLength</name>
<abstract><p>Gets the length of a string
</p></abstract>
<parameterlist>
<parameter><name>object</name><desc><p>The string object</p></desc></parameter>
</parameterlist>
<parsedparameterlist>
<parsedparameter><type>XSStringRef</type><name>object</name></parsedparameter>
</parsedparameterlist>
<returntype> XS_EXPORT XSUInteger</returntype>
<result><p>The length of the string
</p></result>
<declaration><declaration_type>XS_EXPORT</declaration_type> <declaration_type>XSUInteger</declaration_type> <declaration_function>XSString_GetLength</declaration_function>(
    <declaration_type>XSStringRef</declaration_type> <declaration_param>object</declaration_param> );  </declaration>
<desc><p/></desc>
</function><function id="//xsdoc_ref/c/func/XSString_IsEqualToString" lang="c"><name>XSString_IsEqualToString</name>
<abstract><p>Compares two string for equality
</p></abstract>
<parameterlist>
<parameter><name>object</name><desc><p>The string object</p></desc></parameter>
<parameter><name>s</name><desc><p>The string to compare with</p></desc></parameter>
</parameterlist>
<parsedparameterlist>
<parsedparameter><type>XSStringRef</type><name>object</name></parsedparameter>
<parsedparameter><type>XSStringRef</type><name>s</name></parsedparameter>
</parsedparameterlist>
<returntype> XS_EXPORT bool</returntype>
<result><p>True if both strings are equal, otherwise false
</p></result>
<declaration><declaration_type>XS_EXPORT</declaration_type> <declaration_type>bool</declaration_type> <declaration_function>XSString_IsEqualToString</declaration_function>(
    <declaration_type>XSStringRef</declaration_type> <declaration_param>object</declaration_param>,
    <declaration_type>XSStringRef</declaration_type> <declaration_param>s</declaration_param> );  </declaration>
<desc><p/></desc>
</function><function id="//xsdoc_ref/c/func/XSString_LowercaseString" lang="c"><name>XSString_LowercaseString</name>
<abstract><p>Gets a lowercase version of a string
</p></abstract>
<parameterlist>
<parameter><name>object</name><desc><p>The string object</p></desc></parameter>
</parameterlist>
<parsedparameterlist>
<parsedparameter><type>XSStringRef</type><name>object</name></parsedparameter>
</parsedparameterlist>
<returntype> XS_EXPORT XSAutoreleased XSStringRef</returntype>
<result><p>The lowercase string (autoreleased)
</p></result>
<declaration><declaration_type>XS_EXPORT</declaration_type> <declaration_type>XSAutoreleased</declaration_type> <declaration_type>XSStringRef</declaration_type> <declaration_function>XSString_LowercaseString</declaration_function>(
    <declaration_type>XSStringRef</declaration_type> <declaration_param>object</declaration_param> );  </declaration>
<desc><p/></desc>
</function><function id="//xsdoc_ref/c/func/XSString_RangeOfCString" lang="c"><name>XSString_RangeOfCString</name>
<abstract><p>Gets the range of a C string in a string
</p></abstract>
<parameterlist>
<parameter><name>object</name><desc><p>The string object</p></desc></parameter>
<parameter><name>s</name><desc><p>The C string to search for</p></desc></parameter>
</parameterlist>
<parsedparameterlist>
<parsedparameter><type>XSStringRef</type><name>object</name></parsedparameter>
<parsedparameter><type>const char *</type><name>s</name></parsedparameter>
</parsedparameterlist>
<returntype> XS_EXPORT XSRange</returntype>
<result><p>The range of the C string in the receiver string
</p></result>
<declaration><declaration_type>XS_EXPORT</declaration_type> <declaration_type>XSRange</declaration_type> <declaration_function>XSString_RangeOfCString</declaration_function>(
    <declaration_type>XSStringRef</declaration_type> <declaration_param>object</declaration_param>,
    <declaration_keyword>const</declaration_keyword> <declaration_type>char</declaration_type> <declaration_type>*</declaration_type><declaration_param>s</declaration_param> );  </declaration>
<desc><p>If the C string is not found in the receiver string, the
range's location will be equal to XSNotFound.
</p></desc>
</function><function id="//xsdoc_ref/c/func/XSString_RangeOfString" lang="c"><name>XSString_RangeOfString</name>
<abstract><p>Gets the range of a string in a string
</p></abstract>
<parameterlist>
<parameter><name>object</name><desc><p>The string object</p></desc></parameter>
<parameter><name>s</name><desc><p>The string to search for</p></desc></parameter>
</parameterlist>
<parsedparameterlist>
<parsedparameter><type>XSStringRef</type><name>object</name></parsedparameter>
<parsedparameter><type>XSStringRef</type><name>s</name></parsedparameter>
</parsedparameterlist>
<returntype> XS_EXPORT XSRange</returntype>
<result><p>The range of the 's' string in the receiver string
</p></result>
<declaration><declaration_type>XS_EXPORT</declaration_type> <declaration_type>XSRange</declaration_type> <declaration_function>XSString_RangeOfString</declaration_function>(
    <declaration_type>XSStringRef</declaration_type> <declaration_param>object</declaration_param>,
    <declaration_type>XSStringRef</declaration_type> <declaration_param>s</declaration_param> );  </declaration>
<desc><p>If the 's' string is not found in the receiver string, the
range's location will be equal to XSNotFound.
</p></desc>
</function><function id="//xsdoc_ref/c/func/XSString_StringByAppendingCString" lang="c"><name>XSString_StringByAppendingCString</name>
<abstract><p>Gets a string by appending a C string to a string
</p></abstract>
<parameterlist>
<parameter><name>object</name><desc><p>The string object</p></desc></parameter>
<parameter><name>s</name><desc><p>The C string to append</p></desc></parameter>
</parameterlist>
<parsedparameterlist>
<parsedparameter><type>XSStringRef</type><name>object</name></parsedparameter>
<parsedparameter><type>const char *</type><name>s</name></parsedparameter>
</parsedparameterlist>
<returntype> XS_EXPORT XSAutoreleased XSStringRef</returntype>
<result><p>The resulting string (autoreleased)
</p></result>
<declaration><declaration_type>XS_EXPORT</declaration_type> <declaration_type>XSAutoreleased</declaration_type> <declaration_type>XSStringRef</declaration_type> <declaration_function>XSString_StringByAppendingCString</declaration_function>(
    <declaration_type>XSStringRef</declaration_type> <declaration_param>object</declaration_param>,
    <declaration_keyword>const</declaration_keyword> <declaration_type>char</declaration_type> <declaration_type>*</declaration_type><declaration_param>s</declaration_param> );  </declaration>
<desc><p/></desc>
</function><function id="//xsdoc_ref/c/func/XSString_StringByAppendingFormat" lang="c"><name>XSString_StringByAppendingFormat</name>
<abstract><p>Gets a string by appending a format string with arguments to a string
</p></abstract>
<parameterlist>
<parameter><name>object</name><desc><p>The string object</p></desc></parameter>
<parameter><name>format</name><desc><p>The format string</p></desc></parameter>
<parameter><name>...</name><desc><p>The format arguments</p></desc></parameter>
</parameterlist>
<parsedparameterlist>
<parsedparameter><type>XSStringRef</type><name>object</name></parsedparameter>
<parsedparameter><type>const char *</type><name>format</name></parsedparameter>
<parsedparameter><type> ...</type><name>...</name></parsedparameter>
</parsedparameterlist>
<returntype> XS_EXPORT XSAutoreleased XSStringRef</returntype>
<result><p>The resulting string (autoreleased)
</p></result>
<declaration><declaration_type>XS_EXPORT</declaration_type> <declaration_type>XSAutoreleased</declaration_type> <declaration_type>XSStringRef</declaration_type> <declaration_function>XSString_StringByAppendingFormat</declaration_function>(
    <declaration_type>XSStringRef</declaration_type> <declaration_param>object</declaration_param>,
    <declaration_keyword>const</declaration_keyword> <declaration_type>char</declaration_type> <declaration_type>*</declaration_type><declaration_param>format</declaration_param>,
    ... );  </declaration>
<desc><p/></desc>
</function><function id="//xsdoc_ref/c/func/XSString_StringByAppendingString" lang="c"><name>XSString_StringByAppendingString</name>
<abstract><p>Gets a string by appending a string to another
</p></abstract>
<parameterlist>
<parameter><name>object</name><desc><p>The string object</p></desc></parameter>
<parameter><name>s</name><desc><p>The string to append</p></desc></parameter>
</parameterlist>
<parsedparameterlist>
<parsedparameter><type>XSStringRef</type><name>object</name></parsedparameter>
<parsedparameter><type>XSStringRef</type><name>s</name></parsedparameter>
</parsedparameterlist>
<returntype> XS_EXPORT XSAutoreleased XSStringRef</returntype>
<result><p>The resulting string (autoreleased)
</p></result>
<declaration><declaration_type>XS_EXPORT</declaration_type> <declaration_type>XSAutoreleased</declaration_type> <declaration_type>XSStringRef</declaration_type> <declaration_function>XSString_StringByAppendingString</declaration_function>(
    <declaration_type>XSStringRef</declaration_type> <declaration_param>object</declaration_param>,
    <declaration_type>XSStringRef</declaration_type> <declaration_param>s</declaration_param> );  </declaration>
<desc><p/></desc>
</function><function id="//xsdoc_ref/c/func/XSString_StringFromXSEdgeInsets" lang="c"><name>XSString_StringFromXSEdgeInsets</name>
<abstract><p>Gets an XSString object from an XSEdgeInsets value
</p></abstract>
<parameterlist>
<parameter><name>insets</name><desc><p>The XSEdgeInsets value</p></desc></parameter>
</parameterlist>
<parsedparameterlist>
<parsedparameter><type>XSEdgeInsets</type><name>insets</name></parsedparameter>
</parsedparameterlist>
<returntype> XS_EXPORT XSStatic XSAutoreleased XSStringRef</returntype>
<result><p>An XSString object (autoreleased)
</p></result>
<declaration><declaration_type>XS_EXPORT</declaration_type> <declaration_type>XSStatic</declaration_type> <declaration_type>XSAutoreleased</declaration_type> <declaration_type>XSStringRef</declaration_type> <declaration_function>XSString_StringFromXSEdgeInsets</declaration_function>(
    <declaration_type>XSEdgeInsets</declaration_type> <declaration_param>insets</declaration_param> );  </declaration>
<desc><p/></desc>
</function><function id="//xsdoc_ref/c/func/XSString_StringFromXSPoint" lang="c"><name>XSString_StringFromXSPoint</name>
<abstract><p>Gets an XSString object from an XSPoint value
</p></abstract>
<parameterlist>
<parameter><name>point</name><desc><p>The XSPoint value</p></desc></parameter>
</parameterlist>
<parsedparameterlist>
<parsedparameter><type>XSPoint</type><name>point</name></parsedparameter>
</parsedparameterlist>
<returntype> XS_EXPORT XSStatic XSAutoreleased XSStringRef</returntype>
<result><p>An XSString object (autoreleased)
</p></result>
<declaration><declaration_type>XS_EXPORT</declaration_type> <declaration_type>XSStatic</declaration_type> <declaration_type>XSAutoreleased</declaration_type> <declaration_type>XSStringRef</declaration_type> <declaration_function>XSString_StringFromXSPoint</declaration_function>(
    <declaration_type>XSPoint</declaration_type> <declaration_param>point</declaration_param> );  </declaration>
<desc><p/></desc>
</function><function id="//xsdoc_ref/c/func/XSString_StringFromXSRange" lang="c"><name>XSString_StringFromXSRange</name>
<abstract><p>Gets an XSString object from an XSRange value
</p></abstract>
<parameterlist>
<parameter><name>range</name><desc><p>The XSRange value</p></desc></parameter>
</parameterlist>
<parsedparameterlist>
<parsedparameter><type>XSRange</type><name>range</name></parsedparameter>
</parsedparameterlist>
<returntype> XS_EXPORT XSStatic XSAutoreleased XSStringRef</returntype>
<result><p>An XSString object (autoreleased)
</p></result>
<declaration><declaration_type>XS_EXPORT</declaration_type> <declaration_type>XSStatic</declaration_type> <declaration_type>XSAutoreleased</declaration_type> <declaration_type>XSStringRef</declaration_type> <declaration_function>XSString_StringFromXSRange</declaration_function>(
    <declaration_type>XSRange</declaration_type> <declaration_param>range</declaration_param> );  </declaration>
<desc><p/></desc>
</function><function id="//xsdoc_ref/c/func/XSString_StringFromXSRect" lang="c"><name>XSString_StringFromXSRect</name>
<abstract><p>Gets an XSString object from an XSRect value
</p></abstract>
<parameterlist>
<parameter><name>rect</name><desc><p>The XSRect value</p></desc></parameter>
</parameterlist>
<parsedparameterlist>
<parsedparameter><type>XSRect</type><name>rect</name></parsedparameter>
</parsedparameterlist>
<returntype> XS_EXPORT XSStatic XSAutoreleased XSStringRef</returntype>
<result><p>An XSString object (autoreleased)
</p></result>
<declaration><declaration_type>XS_EXPORT</declaration_type> <declaration_type>XSStatic</declaration_type> <declaration_type>XSAutoreleased</declaration_type> <declaration_type>XSStringRef</declaration_type> <declaration_function>XSString_StringFromXSRect</declaration_function>(
    <declaration_type>XSRect</declaration_type> <declaration_param>rect</declaration_param> );  </declaration>
<desc><p/></desc>
</function><function id="//xsdoc_ref/c/func/XSString_StringFromXSSize" lang="c"><name>XSString_StringFromXSSize</name>
<abstract><p>Gets an XSString object from an XSSize value
</p></abstract>
<parameterlist>
<parameter><name>size</name><desc><p>The XSSize value</p></desc></parameter>
</parameterlist>
<parsedparameterlist>
<parsedparameter><type>XSSize</type><name>size</name></parsedparameter>
</parsedparameterlist>
<returntype> XS_EXPORT XSStatic XSAutoreleased XSStringRef</returntype>
<result><p>An XSString object (autoreleased)
</p></result>
<declaration><declaration_type>XS_EXPORT</declaration_type> <declaration_type>XSStatic</declaration_type> <declaration_type>XSAutoreleased</declaration_type> <declaration_type>XSStringRef</declaration_type> <declaration_function>XSString_StringFromXSSize</declaration_function>(
    <declaration_type>XSSize</declaration_type> <declaration_param>size</declaration_param> );  </declaration>
<desc><p/></desc>
</function><function id="//xsdoc_ref/c/func/XSString_StringWithCString" lang="c"><name>XSString_StringWithCString</name>
<abstract><p>Gets an XSString object from a C string
</p></abstract>
<parameterlist>
<parameter><name>s</name><desc><p>The C string (const char *)</p></desc></parameter>
</parameterlist>
<parsedparameterlist>
<parsedparameter><type>const char *</type><name>s</name></parsedparameter>
</parsedparameterlist>
<returntype> XS_EXPORT XSStatic XSAutoreleased XSStringRef</returntype>
<result><p>An XSString object (autoreleased)
</p></result>
<declaration><declaration_type>XS_EXPORT</declaration_type> <declaration_type>XSStatic</declaration_type> <declaration_type>XSAutoreleased</declaration_type> <declaration_type>XSStringRef</declaration_type> <declaration_function>XSString_StringWithCString</declaration_function>(
    <declaration_keyword>const</declaration_keyword> <declaration_type>char</declaration_type> <declaration_type>*</declaration_type><declaration_param>s</declaration_param> );  </declaration>
<desc><p/></desc>
</function><function id="//xsdoc_ref/c/func/XSString_StringWithFormat" lang="c"><name>XSString_StringWithFormat</name>
<abstract><p>Gets an XSString object from a format string with arguments
</p></abstract>
<parameterlist>
<parameter><name>format</name><desc><p>The format string</p></desc></parameter>
<parameter><name>...</name><desc><p>The format arguments</p></desc></parameter>
</parameterlist>
<parsedparameterlist>
<parsedparameter><type>const char *</type><name>format</name></parsedparameter>
<parsedparameter><type> ...</type><name>...</name></parsedparameter>
</parsedparameterlist>
<returntype> XS_EXPORT XSStatic XSAutoreleased XSStringRef</returntype>
<result><p>An XSString object (autoreleased)
</p></result>
<declaration><declaration_type>XS_EXPORT</declaration_type> <declaration_type>XSStatic</declaration_type> <declaration_type>XSAutoreleased</declaration_type> <declaration_type>XSStringRef</declaration_type> <declaration_function>XSString_StringWithFormat</declaration_function>(
    <declaration_keyword>const</declaration_keyword> <declaration_type>char</declaration_type> <declaration_type>*</declaration_type><declaration_param>format</declaration_param>,
    ... );  </declaration>
<desc><p/></desc>
</function><function id="//xsdoc_ref/c/func/XSString_StringWithFormatAndArgs" lang="c"><name>XSString_StringWithFormatAndArgs</name>
<abstract><p>Gets an XSString object from a format string with arguments
</p></abstract>
<parameterlist>
<parameter><name>format</name><desc><p>The format string</p></desc></parameter>
<parameter><name>args</name><desc><p>The format arguments</p></desc></parameter>
</parameterlist>
<parsedparameterlist>
<parsedparameter><type>const char *</type><name>format</name></parsedparameter>
<parsedparameter><type>va_list</type><name>args</name></parsedparameter>
</parsedparameterlist>
<returntype> XS_EXPORT XSStatic XSAutoreleased XSStringRef</returntype>
<result><p>An XSString object (autoreleased)
</p></result>
<declaration><declaration_type>XS_EXPORT</declaration_type> <declaration_type>XSStatic</declaration_type> <declaration_type>XSAutoreleased</declaration_type> <declaration_type>XSStringRef</declaration_type> <declaration_function>XSString_StringWithFormatAndArgs</declaration_function>(
    <declaration_keyword>const</declaration_keyword> <declaration_type>char</declaration_type> <declaration_type>*</declaration_type><declaration_param>format</declaration_param>,
    <declaration_type>va_list</declaration_type> <declaration_param>args</declaration_param> );  </declaration>
<desc><p/></desc>
</function><function id="//xsdoc_ref/c/func/XSString_SubstringFromIndex" lang="c"><name>XSString_SubstringFromIndex</name>
<abstract><p>Gets a substring from a specific index to the end of the string
</p></abstract>
<parameterlist>
<parameter><name>object</name><desc><p>The string object</p></desc></parameter>
<parameter><name>i</name><desc><p>The index</p></desc></parameter>
</parameterlist>
<parsedparameterlist>
<parsedparameter><type>XSStringRef</type><name>object</name></parsedparameter>
<parsedparameter><type>XSUInteger</type><name>i</name></parsedparameter>
</parsedparameterlist>
<returntype> XS_EXPORT XSAutoreleased XSStringRef</returntype>
<result><p>The substring (autoreleased)
</p></result>
<declaration><declaration_type>XS_EXPORT</declaration_type> <declaration_type>XSAutoreleased</declaration_type> <declaration_type>XSStringRef</declaration_type> <declaration_function>XSString_SubstringFromIndex</declaration_function>(
    <declaration_type>XSStringRef</declaration_type> <declaration_param>object</declaration_param>,
    <declaration_type>XSUInteger</declaration_type> <declaration_param>i</declaration_param> );  </declaration>
<desc><p/></desc>
</function><function id="//xsdoc_ref/c/func/XSString_SubstringToIndex" lang="c"><name>XSString_SubstringToIndex</name>
<abstract><p>Gets a substring from the start of the string to a specific index
</p></abstract>
<parameterlist>
<parameter><name>object</name><desc><p>The string object</p></desc></parameter>
<parameter><name>i</name><desc><p>The index</p></desc></parameter>
</parameterlist>
<parsedparameterlist>
<parsedparameter><type>XSStringRef</type><name>object</name></parsedparameter>
<parsedparameter><type>XSUInteger</type><name>i</name></parsedparameter>
</parsedparameterlist>
<returntype> XS_EXPORT XSAutoreleased XSStringRef</returntype>
<result><p>The substring (autoreleased)
</p></result>
<declaration><declaration_type>XS_EXPORT</declaration_type> <declaration_type>XSAutoreleased</declaration_type> <declaration_type>XSStringRef</declaration_type> <declaration_function>XSString_SubstringToIndex</declaration_function>(
    <declaration_type>XSStringRef</declaration_type> <declaration_param>object</declaration_param>,
    <declaration_type>XSUInteger</declaration_type> <declaration_param>i</declaration_param> );  </declaration>
<desc><p/></desc>
</function><function id="//xsdoc_ref/c/func/XSString_SubstringWithRange" lang="c"><name>XSString_SubstringWithRange</name>
<abstract><p>Gets a substring based on a specific range
</p></abstract>
<parameterlist>
<parameter><name>object</name><desc><p>The string object</p></desc></parameter>
<parameter><name>range</name><desc><p>The range</p></desc></parameter>
</parameterlist>
<parsedparameterlist>
<parsedparameter><type>XSStringRef</type><name>object</name></parsedparameter>
<parsedparameter><type>XSRange</type><name>range</name></parsedparameter>
</parsedparameterlist>
<returntype> XS_EXPORT XSAutoreleased XSStringRef</returntype>
<result><p>The substring (autoreleased)
</p></result>
<declaration><declaration_type>XS_EXPORT</declaration_type> <declaration_type>XSAutoreleased</declaration_type> <declaration_type>XSStringRef</declaration_type> <declaration_function>XSString_SubstringWithRange</declaration_function>(
    <declaration_type>XSStringRef</declaration_type> <declaration_param>object</declaration_param>,
    <declaration_type>XSRange</declaration_type> <declaration_param>range</declaration_param> );  </declaration>
<desc><p/></desc>
</function><function id="//xsdoc_ref/c/func/XSString_UppercaseString" lang="c"><name>XSString_UppercaseString</name>
<abstract><p>Gets an uppercase version of a string
</p></abstract>
<parameterlist>
<parameter><name>object</name><desc><p>The string object</p></desc></parameter>
</parameterlist>
<parsedparameterlist>
<parsedparameter><type>XSStringRef</type><name>object</name></parsedparameter>
</parsedparameterlist>
<returntype> XS_EXPORT XSAutoreleased XSStringRef</returntype>
<result><p>The uppercase string (autoreleased)
</p></result>
<declaration><declaration_type>XS_EXPORT</declaration_type> <declaration_type>XSAutoreleased</declaration_type> <declaration_type>XSStringRef</declaration_type> <declaration_function>XSString_UppercaseString</declaration_function>(
    <declaration_type>XSStringRef</declaration_type> <declaration_param>object</declaration_param> );  </declaration>
<desc><p/></desc>
</function></functions>
<typedefs><typedef id="//xsdoc_ref/c/tdef/XSMutableStringRef" lang="c" type="simple"><name>XSMutableStringRef</name>
<abstract><p>Opaque type for XSMutableString
</p></abstract>
<declaration><declaration_keyword>typedef</declaration_keyword> <declaration_keyword>struct</declaration_keyword> <declaration_type>__XSString</declaration_type> <declaration_type>*</declaration_type> <declaration_var>XSMutableStringRef</declaration_var>;  </declaration>
<desc><p/></desc>
</typedef><typedef id="//xsdoc_ref/c/tdef/XSStringRef" lang="c" type="simple"><name>XSStringRef</name>
<abstract><p>Opaque type for XSString
</p></abstract>
<declaration><declaration_keyword>typedef</declaration_keyword> <declaration_keyword>const</declaration_keyword> <declaration_keyword>struct</declaration_keyword> <declaration_type>__XSString</declaration_type> <declaration_type>*</declaration_type> <declaration_var>XSStringRef</declaration_var>;  </declaration>
<desc><p/></desc>
</typedef></typedefs><defines><pdefine id="//xsdoc_ref/c/macro/XSSTR" definetype="function" lang="c"><name>XSSTR</name>
<abstract><p>Gets an XSString object from a C string
</p></abstract>
<parameterlist>
<parameter><name>_s_</name><desc><p>The C string (const char *)</p></desc></parameter>
</parameterlist>
<parsedparameterlist>
<parsedparameter><type></type><name>_s_</name></parsedparameter>
</parsedparameterlist>
<result><p>An XSString object (autoreleased)
</p></result>
<declaration><declaration_preprocessor>#define</declaration_preprocessor> <declaration_preprocessor>XSSTR</declaration_preprocessor><declaration_preprocessor>(</declaration_preprocessor> <declaration_preprocessor>_s_</declaration_preprocessor> <declaration_preprocessor>)</declaration_preprocessor> <declaration_preprocessor>XSString_StringWithCString</declaration_preprocessor><declaration_preprocessor>(</declaration_preprocessor> <declaration_preprocessor>_s_</declaration_preprocessor> <declaration_preprocessor>)</declaration_preprocessor> </declaration>
</pdefine></defines><copyrightinfo>&#169; (c) 2010-2014 - Jean-David Gadina - www.xs-labs.com
</copyrightinfo>
<timestamp>Thursday, September 04, 2014</timestamp>
</header>