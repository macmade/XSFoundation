<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE header PUBLIC "-//Apple Computer//DTD HEADERDOC 1.6//EN" "/System/Library/DTDs/HeaderDoc-1.6.dtd">
<header id="//xsdoc_ref/doc/header/XSSemaphoreRef.h" lang="c" filename="XSSemaphoreRef.h" headerpath="/Users/macmade/Documents/Macmade/Development/GitHub/XSFoundation/XSFoundation/include/XS/Classes/XSSemaphoreRef.h"><name>XSSemaphoreRef.h</name>
<abstract><p>XSSemaphore class
</p></abstract>
<attributes><attribute><name>Author</name><value>Jean-David Gadina - www.xs-labs.com</value></attribute>
</attributes>
<includes>
<include><hd_link logicalPath="//xsdoc_ref/doc/header/XSTypes.h">&lt;XS/XSTypes.h&gt;</hd_link></include>
<include><hd_link logicalPath="//xsdoc_ref/doc/header/XSMacros.h">&lt;XS/XSMacros.h&gt;</hd_link></include>
</includes>
<desc><p>...
</p></desc>
<functions><function id="//xsdoc_ref/c/func/XSSemaphore_Create" lang="c"><name>XSSemaphore_Create</name>
<abstract><p>Creates an unnamed semaphore
</p></abstract>
<parameterlist>
<parameter><name>count</name><desc><p>The maximum count for the semaphore</p></desc></parameter>
</parameterlist>
<parsedparameterlist>
<parsedparameter><type>XSUInteger</type><name>count</name></parsedparameter>
</parsedparameterlist>
<returntype> XS_EXPORT XSStatic XSSemaphoreRef</returntype>
<result><p>The semaphore object
</p></result>
<declaration><declaration_type>XS_EXPORT</declaration_type> <declaration_type>XSStatic</declaration_type> <declaration_type>XSSemaphoreRef</declaration_type> <declaration_function>XSSemaphore_Create</declaration_function>(
    <declaration_type>XSUInteger</declaration_type> <declaration_param>count</declaration_param> );  </declaration>
<desc><p/></desc>
</function><function id="//xsdoc_ref/c/func/XSSemaphore_CreateWithName" lang="c"><name>XSSemaphore_CreateWithName</name>
<abstract><p>Creates a named semaphore
</p></abstract>
<parameterlist>
<parameter><name>name</name><desc><p>The semaphore name</p></desc></parameter>
<parameter><name>count</name><desc><p>The maximum count for the semaphore</p></desc></parameter>
</parameterlist>
<parsedparameterlist>
<parsedparameter><type>const char *</type><name>name</name></parsedparameter>
<parsedparameter><type>XSUInteger</type><name>count</name></parsedparameter>
</parsedparameterlist>
<returntype> XS_EXPORT XSStatic XSSemaphoreRef</returntype>
<result><p>The semaphore object
</p></result>
<declaration><declaration_type>XS_EXPORT</declaration_type> <declaration_type>XSStatic</declaration_type> <declaration_type>XSSemaphoreRef</declaration_type> <declaration_function>XSSemaphore_CreateWithName</declaration_function>(
    <declaration_keyword>const</declaration_keyword> <declaration_type>char</declaration_type> <declaration_type>*</declaration_type><declaration_param>name</declaration_param>,
    <declaration_type>XSUInteger</declaration_type> <declaration_param>count</declaration_param> );  </declaration>
<desc><p/></desc>
</function><function id="//xsdoc_ref/c/func/XSSemaphore_GetClassID" lang="c"><name>XSSemaphore_GetClassID</name>
<abstract><p>Gets the class ID for XSSemaphore
</p></abstract>
<returntype> XS_EXPORT XSStatic XSClassID</returntype>
<result><p>The class ID for XSSemaphore
</p></result>
<declaration><declaration_type>XS_EXPORT</declaration_type> <declaration_type>XSStatic</declaration_type> <declaration_type>XSClassID</declaration_type> <declaration_function>XSSemaphore_GetClassID</declaration_function>(
    <declaration_param>void</declaration_param> );  </declaration>
<desc><p/></desc>
</function><function id="//xsdoc_ref/c/func/XSSemaphore_GetName" lang="c"><name>XSSemaphore_GetName</name>
<abstract><p>Gets the name of a semaphore
</p></abstract>
<parameterlist>
<parameter><name>semaphore</name><desc><p>The semaphore object</p></desc></parameter>
</parameterlist>
<parsedparameterlist>
<parsedparameter><type>XSSemaphoreRef</type><name>semaphore</name></parsedparameter>
</parsedparameterlist>
<returntype> XS_EXPORT const char *</returntype>
<result><p>The semaphore name, or NULL if the semaphore is unnamed
</p></result>
<declaration><declaration_type>XS_EXPORT</declaration_type> <declaration_keyword>const</declaration_keyword> <declaration_type>char</declaration_type> <declaration_type>*</declaration_type> <declaration_function>XSSemaphore_GetName</declaration_function>(
    <declaration_type>XSSemaphoreRef</declaration_type> <declaration_param>semaphore</declaration_param> );  </declaration>
<desc><p/></desc>
</function><function id="//xsdoc_ref/c/func/XSSemaphore_IsNamed" lang="c"><name>XSSemaphore_IsNamed</name>
<abstract><p>Checks whether a semaphore is named or not
</p></abstract>
<parameterlist>
<parameter><name>semaphore</name><desc><p>The semaphore object</p></desc></parameter>
</parameterlist>
<parsedparameterlist>
<parsedparameter><type>XSSemaphoreRef</type><name>semaphore</name></parsedparameter>
</parsedparameterlist>
<returntype> XS_EXPORT bool</returntype>
<result><p>True if the semaphore is named, otherwise false
</p></result>
<declaration><declaration_type>XS_EXPORT</declaration_type> <declaration_type>bool</declaration_type> <declaration_function>XSSemaphore_IsNamed</declaration_function>(
    <declaration_type>XSSemaphoreRef</declaration_type> <declaration_param>semaphore</declaration_param> );  </declaration>
<desc><p/></desc>
</function><function id="//xsdoc_ref/c/func/XSSemaphore_Signal" lang="c"><name>XSSemaphore_Signal</name>
<abstract><p>Unlocks a semaphore
</p></abstract>
<parameterlist>
<parameter><name>semaphore</name><desc><p>The semaphore object</p></desc></parameter>
</parameterlist>
<parsedparameterlist>
<parsedparameter><type>XSSemaphoreRef</type><name>semaphore</name></parsedparameter>
</parsedparameterlist>
<returntype> XS_EXPORT void</returntype>
<declaration><declaration_type>XS_EXPORT</declaration_type> <declaration_type>void</declaration_type> <declaration_function>XSSemaphore_Signal</declaration_function>(
    <declaration_type>XSSemaphoreRef</declaration_type> <declaration_param>semaphore</declaration_param> );  </declaration>
<desc><p/></desc>
</function><function id="//xsdoc_ref/c/func/XSSemaphore_TryWait" lang="c"><name>XSSemaphore_TryWait</name>
<abstract><p>Tries to lock a semaphore
</p></abstract>
<parameterlist>
<parameter><name>semaphore</name><desc><p>The semaphore object</p></desc></parameter>
</parameterlist>
<parsedparameterlist>
<parsedparameter><type>XSSemaphoreRef</type><name>semaphore</name></parsedparameter>
</parsedparameterlist>
<returntype> XS_EXPORT bool</returntype>
<result><p>True if the semaphore was locked, otherwise false
</p></result>
<declaration><declaration_type>XS_EXPORT</declaration_type> <declaration_type>bool</declaration_type> <declaration_function>XSSemaphore_TryWait</declaration_function>(
    <declaration_type>XSSemaphoreRef</declaration_type> <declaration_param>semaphore</declaration_param> );  </declaration>
<desc><p>If the semaphore can't be locked, this function will return
immediately, rather than waiting.
</p></desc>
</function><function id="//xsdoc_ref/c/func/XSSemaphore_Wait" lang="c"><name>XSSemaphore_Wait</name>
<abstract><p>Locks a semaphore
</p></abstract>
<parameterlist>
<parameter><name>semaphore</name><desc><p>The semaphore object</p></desc></parameter>
</parameterlist>
<parsedparameterlist>
<parsedparameter><type>XSSemaphoreRef</type><name>semaphore</name></parsedparameter>
</parsedparameterlist>
<returntype> XS_EXPORT void</returntype>
<declaration><declaration_type>XS_EXPORT</declaration_type> <declaration_type>void</declaration_type> <declaration_function>XSSemaphore_Wait</declaration_function>(
    <declaration_type>XSSemaphoreRef</declaration_type> <declaration_param>semaphore</declaration_param> );  </declaration>
<desc><p/></desc>
</function></functions>
<typedefs><typedef id="//xsdoc_ref/c/tdef/XSSemaphoreRef" lang="c" type="simple"><name>XSSemaphoreRef</name>
<abstract><p>Opaque type for XSSemaphore
</p></abstract>
<declaration><declaration_keyword>typedef</declaration_keyword> <declaration_keyword>struct</declaration_keyword> <declaration_type>__XSSemaphore</declaration_type> <declaration_type>*</declaration_type> <declaration_var>XSSemaphoreRef</declaration_var>;  </declaration>
<desc><p/></desc>
</typedef></typedefs><copyrightinfo>&#169; (c) 2010-2014 - Jean-David Gadina - www.xs-labs.com
</copyrightinfo>
<timestamp>Thursday, September 04, 2014</timestamp>
</header>