<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE header PUBLIC "-//Apple Computer//DTD HEADERDOC 1.6//EN" "/System/Library/DTDs/HeaderDoc-1.6.dtd">
<header id="//xsdoc_ref/doc/header/XSDataRef.h" lang="c" filename="XSDataRef.h" headerpath="/Users/macmade/Documents/Macmade/Development/GitHub/XSFoundation/XSFoundation/include/XS/Classes/XSDataRef.h"><name>XSDataRef.h</name>
<abstract><p>XSData class
</p></abstract>
<attributes><attribute><name>Author</name><value>Jean-David Gadina - www.xs-labs.com</value></attribute>
</attributes>
<includes>
<include><hd_link logicalPath="//xsdoc_ref/doc/header/XSTypes.h">&lt;XS/XSTypes.h&gt;</hd_link></include>
<include><hd_link logicalPath="//xsdoc_ref/doc/header/XSMacros.h">&lt;XS/XSMacros.h&gt;</hd_link></include>
</includes>
<desc><p>...
</p></desc>
<functions><function id="//xsdoc_ref/c/func/XSData_AppendByte" lang="c"><name>XSData_AppendByte</name>
<abstract><p>Append a single byte to a data object
</p></abstract>
<parameterlist>
<parameter><name>data</name><desc><p>The data object</p></desc></parameter>
<parameter><name>byte</name><desc><p>The byte to append</p></desc></parameter>
</parameterlist>
<parsedparameterlist>
<parsedparameter><type>XSMutableDataRef</type><name>data</name></parsedparameter>
<parsedparameter><type>XSUInt8</type><name>byte</name></parsedparameter>
</parsedparameterlist>
<returntype> XS_EXPORT void</returntype>
<declaration><declaration_type>XS_EXPORT</declaration_type> <declaration_type>void</declaration_type> <declaration_function>XSData_AppendByte</declaration_function>(
    <declaration_type>XSMutableDataRef</declaration_type> <declaration_param>data</declaration_param>,
    <declaration_type>XSUInt8</declaration_type> <declaration_param>byte</declaration_param> );  </declaration>
<desc><p/></desc>
</function><function id="//xsdoc_ref/c/func/XSData_AppendBytes" lang="c"><name>XSData_AppendBytes</name>
<abstract><p>Append bytes to a data object
</p></abstract>
<parameterlist>
<parameter><name>data</name><desc><p>The data object</p></desc></parameter>
<parameter><name>bytes</name><desc><p>The buffer containing the bytes to append</p></desc></parameter>
<parameter><name>length</name><desc><p>The length of the byte buffer</p></desc></parameter>
</parameterlist>
<parsedparameterlist>
<parsedparameter><type>XSMutableDataRef</type><name>data</name></parsedparameter>
<parsedparameter><type>XSUInt8 *</type><name>bytes</name></parsedparameter>
<parsedparameter><type>XSUInteger</type><name>length</name></parsedparameter>
</parsedparameterlist>
<returntype> XS_EXPORT void</returntype>
<declaration><declaration_type>XS_EXPORT</declaration_type> <declaration_type>void</declaration_type> <declaration_function>XSData_AppendBytes</declaration_function>(
    <declaration_type>XSMutableDataRef</declaration_type> <declaration_param>data</declaration_param>,
    <declaration_type>XSUInt8</declaration_type> <declaration_type>*</declaration_type><declaration_param>bytes</declaration_param>,
    <declaration_type>XSUInteger</declaration_type> <declaration_param>length</declaration_param> );  </declaration>
<desc><p/></desc>
</function><function id="//xsdoc_ref/c/func/XSData_AppendData" lang="c"><name>XSData_AppendData</name>
<abstract><p>Appends a data object to a data object
</p></abstract>
<parameterlist>
<parameter><name>data</name><desc><p>The data object</p></desc></parameter>
<parameter><name>dataToAppend</name><desc><p>The data object to append</p></desc></parameter>
</parameterlist>
<parsedparameterlist>
<parsedparameter><type>XSMutableDataRef</type><name>data</name></parsedparameter>
<parsedparameter><type>XSDataRef</type><name>dataToAppend</name></parsedparameter>
</parsedparameterlist>
<returntype> XS_EXPORT void</returntype>
<declaration><declaration_type>XS_EXPORT</declaration_type> <declaration_type>void</declaration_type> <declaration_function>XSData_AppendData</declaration_function>(
    <declaration_type>XSMutableDataRef</declaration_type> <declaration_param>data</declaration_param>,
    <declaration_type>XSDataRef</declaration_type> <declaration_param>dataToAppend</declaration_param> );  </declaration>
<desc><p/></desc>
</function><function id="//xsdoc_ref/c/func/XSData_Create" lang="c"><name>XSData_Create</name>
<abstract><p>Creates an empty data object
</p></abstract>
<returntype> XS_EXPORT XSStatic XSDataRef</returntype>
<result><p>An empty immutable data object
</p></result>
<declaration><declaration_type>XS_EXPORT</declaration_type> <declaration_type>XSStatic</declaration_type> <declaration_type>XSDataRef</declaration_type> <declaration_function>XSData_Create</declaration_function>(
    <declaration_param>void</declaration_param> );  </declaration>
<desc><p/></desc>
</function><function id="//xsdoc_ref/c/func/XSData_CreateMutable" lang="c"><name>XSData_CreateMutable</name>
<abstract><p>Creates an empty mutable data object
</p></abstract>
<returntype> XS_EXPORT XSStatic XSMutableDataRef</returntype>
<result><p>An empty mutable data object
</p></result>
<declaration><declaration_type>XS_EXPORT</declaration_type> <declaration_type>XSStatic</declaration_type> <declaration_type>XSMutableDataRef</declaration_type> <declaration_function>XSData_CreateMutable</declaration_function>(
    <declaration_param>void</declaration_param> );  </declaration>
<desc><p/></desc>
</function><function id="//xsdoc_ref/c/func/XSData_CreateMutableCopy" lang="c"><name>XSData_CreateMutableCopy</name>
<abstract><p>Creates a mutable copy of a data object
</p></abstract>
<parameterlist>
<parameter><name>data</name><desc><p>The data object</p></desc></parameter>
</parameterlist>
<parsedparameterlist>
<parsedparameter><type>XSDataRef</type><name>data</name></parsedparameter>
</parsedparameterlist>
<returntype> XS_EXPORT XSMutableDataRef</returntype>
<result><p>The mutable copy of the data object
</p></result>
<declaration><declaration_type>XS_EXPORT</declaration_type> <declaration_type>XSMutableDataRef</declaration_type> <declaration_function>XSData_CreateMutableCopy</declaration_function>(
    <declaration_type>XSDataRef</declaration_type> <declaration_param>data</declaration_param> );  </declaration>
<desc><p/></desc>
</function><function id="//xsdoc_ref/c/func/XSData_CreateMutableWithInitialCapacity" lang="c"><name>XSData_CreateMutableWithInitialCapacity</name>
<abstract><p>Creates an empty mutable data object with an initial capacity
</p></abstract>
<parameterlist>
<parameter><name>capacity</name><desc><p>The initial capacity of the internal byte buffer</p></desc></parameter>
</parameterlist>
<parsedparameterlist>
<parsedparameter><type>XSUInteger</type><name>capacity</name></parsedparameter>
</parsedparameterlist>
<returntype> XS_EXPORT XSStatic XSMutableDataRef</returntype>
<result><p>An empty mutable data object
</p></result>
<declaration><declaration_type>XS_EXPORT</declaration_type> <declaration_type>XSStatic</declaration_type> <declaration_type>XSMutableDataRef</declaration_type> <declaration_function>XSData_CreateMutableWithInitialCapacity</declaration_function>(
    <declaration_type>XSUInteger</declaration_type> <declaration_param>capacity</declaration_param> );  </declaration>
<desc><p/></desc>
</function><function id="//xsdoc_ref/c/func/XSData_CreateWithBytes" lang="c"><name>XSData_CreateWithBytes</name>
<abstract><p>Creates a data object with specific bytes
</p></abstract>
<parameterlist>
<parameter><name>bytes</name><desc><p>A pointer to the byte buffer</p></desc></parameter>
<parameter><name>length</name><desc><p>The number of bytes in the buffer</p></desc></parameter>
</parameterlist>
<parsedparameterlist>
<parsedparameter><type>XSUInt8 *</type><name>bytes</name></parsedparameter>
<parsedparameter><type>XSUInteger</type><name>length</name></parsedparameter>
</parsedparameterlist>
<attributelists><listattribute><name>See</name><list>
<item><name>XSData_DataWithBytesNoCopy</name><value><hd_link logicalPath="XSData_DataWithBytesNoCopy" isseealso="yes">XSData_DataWithBytesNoCopy</hd_link></value></item></list></listattribute>
</attributelists>
<returntype> XS_EXPORT XSStatic XSDataRef</returntype>
<result><p>An immutable data object
</p></result>
<declaration><declaration_type>XS_EXPORT</declaration_type> <declaration_type>XSStatic</declaration_type> <declaration_type>XSDataRef</declaration_type> <declaration_function>XSData_CreateWithBytes</declaration_function>(
    <declaration_type>XSUInt8</declaration_type> <declaration_type>*</declaration_type><declaration_param>bytes</declaration_param>,
    <declaration_type>XSUInteger</declaration_type> <declaration_param>length</declaration_param> );  </declaration>
<desc><p>The bytes in the buffer will be copied to an internal buffer.
</p></desc>
</function><function id="//xsdoc_ref/c/func/XSData_CreateWithBytesNoCopy" lang="c"><name>XSData_CreateWithBytesNoCopy</name>
<abstract><p>Creates a data object with specific bytes
</p></abstract>
<parameterlist>
<parameter><name>bytes</name><desc><p>A pointer to the byte buffer</p></desc></parameter>
<parameter><name>length</name><desc><p>The number of bytes in the buffer</p></desc></parameter>
<parameter><name>bufferReleaseType</name><desc><p>The release type for the passed byte buffer (when the data object is deallocated)</p></desc></parameter>
</parameterlist>
<parsedparameterlist>
<parsedparameter><type>XSUInt8 *</type><name>bytes</name></parsedparameter>
<parsedparameter><type>XSUInteger</type><name>length</name></parsedparameter>
<parsedparameter><type>XSData_BufferReleaseType</type><name>bufferReleaseType</name></parsedparameter>
</parsedparameterlist>
<attributelists><listattribute><name>See</name><list>
<item><name>XSData_BufferReleaseType</name><value><hd_link logicalPath="XSData_BufferReleaseType" isseealso="yes">XSData_BufferReleaseType</hd_link></value></item></list></listattribute>
</attributelists>
<returntype> XS_EXPORT XSStatic XSDataRef</returntype>
<result><p>An immutable data object
</p></result>
<declaration><declaration_type>XS_EXPORT</declaration_type> <declaration_type>XSStatic</declaration_type> <declaration_type>XSDataRef</declaration_type> <declaration_function>XSData_CreateWithBytesNoCopy</declaration_function>(
    <declaration_type>XSUInt8</declaration_type> <declaration_type>*</declaration_type><declaration_param>bytes</declaration_param>,
    <declaration_type>XSUInteger</declaration_type> <declaration_param>length</declaration_param>,
    <declaration_type>XSData_BufferReleaseType</declaration_type> <declaration_param>bufferReleaseType</declaration_param> );  </declaration>
<desc><p>The bytes in the buffer will not be copied.
</p></desc>
</function><function id="//xsdoc_ref/c/func/XSData_CreateWithContentsOfFileAtPath" lang="c"><name>XSData_CreateWithContentsOfFileAtPath</name>
<abstract><p>Creates a data object with the contents of a file
</p></abstract>
<parameterlist>
<parameter><name>path</name><desc><p>The path to the file</p></desc></parameter>
</parameterlist>
<parsedparameterlist>
<parsedparameter><type>const char *</type><name>path</name></parsedparameter>
</parsedparameterlist>
<returntype> XS_EXPORT XSStatic XSDataRef</returntype>
<result><p>An immutable data object
</p></result>
<declaration><declaration_type>XS_EXPORT</declaration_type> <declaration_type>XSStatic</declaration_type> <declaration_type>XSDataRef</declaration_type> <declaration_function>XSData_CreateWithContentsOfFileAtPath</declaration_function>(
    <declaration_keyword>const</declaration_keyword> <declaration_type>char</declaration_type> <declaration_type>*</declaration_type><declaration_param>path</declaration_param> );  </declaration>
<desc><p>NULL will be returned if the file does not exist or if the file
is not accessible.
</p></desc>
</function><function id="//xsdoc_ref/c/func/XSData_CreateWithData" lang="c"><name>XSData_CreateWithData</name>
<abstract><p>Creates an data object from another data object
</p></abstract>
<parameterlist>
<parameter><name>data</name><desc><p>The data object</p></desc></parameter>
</parameterlist>
<parsedparameterlist>
<parsedparameter><type>XSDataRef</type><name>data</name></parsedparameter>
</parsedparameterlist>
<returntype> XS_EXPORT XSStatic XSDataRef</returntype>
<result><p>An immutable data object based on the given data object
</p></result>
<declaration><declaration_type>XS_EXPORT</declaration_type> <declaration_type>XSStatic</declaration_type> <declaration_type>XSDataRef</declaration_type> <declaration_function>XSData_CreateWithData</declaration_function>(
    <declaration_type>XSDataRef</declaration_type> <declaration_param>data</declaration_param> );  </declaration>
<desc><p/></desc>
</function><function id="//xsdoc_ref/c/func/XSData_Data" lang="c"><name>XSData_Data</name>
<abstract><p>Gets an empty data object
</p></abstract>
<returntype> XS_EXPORT XSStatic XSAutoreleased XSDataRef</returntype>
<result><p>An empty immutable data object
</p></result>
<declaration><declaration_type>XS_EXPORT</declaration_type> <declaration_type>XSStatic</declaration_type> <declaration_type>XSAutoreleased</declaration_type> <declaration_type>XSDataRef</declaration_type> <declaration_function>XSData_Data</declaration_function>(
    <declaration_param>void</declaration_param> );  </declaration>
<desc><p/></desc>
</function><function id="//xsdoc_ref/c/func/XSData_DataWithBytes" lang="c"><name>XSData_DataWithBytes</name>
<abstract><p>Gets a data object with specific bytes
</p></abstract>
<parameterlist>
<parameter><name>bytes</name><desc><p>A pointer to the byte buffer</p></desc></parameter>
<parameter><name>length</name><desc><p>The number of bytes in the buffer</p></desc></parameter>
</parameterlist>
<parsedparameterlist>
<parsedparameter><type>XSUInt8 *</type><name>bytes</name></parsedparameter>
<parsedparameter><type>XSUInteger</type><name>length</name></parsedparameter>
</parsedparameterlist>
<attributelists><listattribute><name>See</name><list>
<item><name>XSData_DataWithBytesNoCopy</name><value><hd_link logicalPath="XSData_DataWithBytesNoCopy" isseealso="yes">XSData_DataWithBytesNoCopy</hd_link></value></item></list></listattribute>
</attributelists>
<returntype> XS_EXPORT XSStatic XSAutoreleased XSDataRef</returntype>
<result><p>An immutable data object
</p></result>
<declaration><declaration_type>XS_EXPORT</declaration_type> <declaration_type>XSStatic</declaration_type> <declaration_type>XSAutoreleased</declaration_type> <declaration_type>XSDataRef</declaration_type> <declaration_function>XSData_DataWithBytes</declaration_function>(
    <declaration_type>XSUInt8</declaration_type> <declaration_type>*</declaration_type><declaration_param>bytes</declaration_param>,
    <declaration_type>XSUInteger</declaration_type> <declaration_param>length</declaration_param> );  </declaration>
<desc><p>The bytes in the buffer will be copied to an internal buffer.
</p></desc>
</function><function id="//xsdoc_ref/c/func/XSData_DataWithBytesNoCopy" lang="c"><name>XSData_DataWithBytesNoCopy</name>
<abstract><p>Gets a data object with specific bytes
</p></abstract>
<parameterlist>
<parameter><name>bytes</name><desc><p>A pointer to the byte buffer</p></desc></parameter>
<parameter><name>length</name><desc><p>The number of bytes in the buffer</p></desc></parameter>
<parameter><name>bufferReleaseType</name><desc><p>The release type for the passed byte buffer (when the data object is deallocated)</p></desc></parameter>
</parameterlist>
<parsedparameterlist>
<parsedparameter><type>XSUInt8 *</type><name>bytes</name></parsedparameter>
<parsedparameter><type>XSUInteger</type><name>length</name></parsedparameter>
<parsedparameter><type>XSData_BufferReleaseType</type><name>bufferReleaseType</name></parsedparameter>
</parsedparameterlist>
<attributelists><listattribute><name>See</name><list>
<item><name>XSData_BufferReleaseType</name><value><hd_link logicalPath="XSData_BufferReleaseType" isseealso="yes">XSData_BufferReleaseType</hd_link></value></item></list></listattribute>
</attributelists>
<returntype> XS_EXPORT XSStatic XSAutoreleased XSDataRef</returntype>
<result><p>An immutable data object
</p></result>
<declaration><declaration_type>XS_EXPORT</declaration_type> <declaration_type>XSStatic</declaration_type> <declaration_type>XSAutoreleased</declaration_type> <declaration_type>XSDataRef</declaration_type> <declaration_function>XSData_DataWithBytesNoCopy</declaration_function>(
    <declaration_type>XSUInt8</declaration_type> <declaration_type>*</declaration_type><declaration_param>bytes</declaration_param>,
    <declaration_type>XSUInteger</declaration_type> <declaration_param>length</declaration_param>,
    <declaration_type>XSData_BufferReleaseType</declaration_type> <declaration_param>bufferReleaseType</declaration_param> );  </declaration>
<desc><p>The bytes in the buffer will not be copied.
</p></desc>
</function><function id="//xsdoc_ref/c/func/XSData_DataWithContentsOfFileAtPath" lang="c"><name>XSData_DataWithContentsOfFileAtPath</name>
<abstract><p>Gets a data object with the contents of a file
</p></abstract>
<parameterlist>
<parameter><name>path</name><desc><p>The path to the file</p></desc></parameter>
</parameterlist>
<parsedparameterlist>
<parsedparameter><type>const char *</type><name>path</name></parsedparameter>
</parsedparameterlist>
<returntype> XS_EXPORT XSStatic XSAutoreleased XSDataRef</returntype>
<result><p>An immutable data object
</p></result>
<declaration><declaration_type>XS_EXPORT</declaration_type> <declaration_type>XSStatic</declaration_type> <declaration_type>XSAutoreleased</declaration_type> <declaration_type>XSDataRef</declaration_type> <declaration_function>XSData_DataWithContentsOfFileAtPath</declaration_function>(
    <declaration_keyword>const</declaration_keyword> <declaration_type>char</declaration_type> <declaration_type>*</declaration_type><declaration_param>path</declaration_param> );  </declaration>
<desc><p>NULL will be returned if the file does not exist or if the file
is not accessible.
</p></desc>
</function><function id="//xsdoc_ref/c/func/XSData_DataWithData" lang="c"><name>XSData_DataWithData</name>
<abstract><p>Gets an data object from another data object
</p></abstract>
<parameterlist>
<parameter><name>data</name><desc><p>The data object</p></desc></parameter>
</parameterlist>
<parsedparameterlist>
<parsedparameter><type>XSDataRef</type><name>data</name></parsedparameter>
</parsedparameterlist>
<returntype> XS_EXPORT XSStatic XSAutoreleased XSDataRef</returntype>
<result><p>An immutable data object based on the given data object
</p></result>
<declaration><declaration_type>XS_EXPORT</declaration_type> <declaration_type>XSStatic</declaration_type> <declaration_type>XSAutoreleased</declaration_type> <declaration_type>XSDataRef</declaration_type> <declaration_function>XSData_DataWithData</declaration_function>(
    <declaration_type>XSDataRef</declaration_type> <declaration_param>data</declaration_param> );  </declaration>
<desc><p/></desc>
</function><function id="//xsdoc_ref/c/func/XSData_GetBytesInRange" lang="c"><name>XSData_GetBytesInRange</name>
<abstract><p>Gets bytes in a specific range from a data object
</p></abstract>
<parameterlist>
<parameter><name>data</name><desc><p>The data object</p></desc></parameter>
<parameter><name>buffer</name><desc><p>The buffer in which to place the bytes</p></desc></parameter>
<parameter><name>range</name><desc><p>The range of the bytes to get from the data object</p></desc></parameter>
</parameterlist>
<parsedparameterlist>
<parsedparameter><type>XSDataRef</type><name>data</name></parsedparameter>
<parsedparameter><type>XSUInt8 *</type><name>buffer</name></parsedparameter>
<parsedparameter><type>XSRange</type><name>range</name></parsedparameter>
</parsedparameterlist>
<returntype> XS_EXPORT void</returntype>
<declaration><declaration_type>XS_EXPORT</declaration_type> <declaration_type>void</declaration_type> <declaration_function>XSData_GetBytesInRange</declaration_function>(
    <declaration_type>XSDataRef</declaration_type> <declaration_param>data</declaration_param>,
    <declaration_type>XSUInt8</declaration_type> <declaration_type>*</declaration_type><declaration_param>buffer</declaration_param>,
    <declaration_type>XSRange</declaration_type> <declaration_param>range</declaration_param> );  </declaration>
<desc><p>The passed buffer must have the necessary capacity to store
the required number of bytes.
Results are undefined if the passed buffer is NULL or if the
specified range is not contained in the data object's range.
</p></desc>
</function><function id="//xsdoc_ref/c/func/XSData_GetBytesPointer" lang="c"><name>XSData_GetBytesPointer</name>
<abstract><p>Gets a read-only pointer to the internal byte buffer of a data oject
</p></abstract>
<parameterlist>
<parameter><name>data</name><desc><p>The data object</p></desc></parameter>
</parameterlist>
<parsedparameterlist>
<parsedparameter><type>XSDataRef</type><name>data</name></parsedparameter>
</parsedparameterlist>
<returntype> XS_EXPORT const XSUInt8 *</returntype>
<result><p>A pointer to the byte buffer
</p></result>
<declaration><declaration_type>XS_EXPORT</declaration_type> <declaration_keyword>const</declaration_keyword> <declaration_type>XSUInt8</declaration_type> <declaration_type>*</declaration_type> <declaration_function>XSData_GetBytesPointer</declaration_function>(
    <declaration_type>XSDataRef</declaration_type> <declaration_param>data</declaration_param> );  </declaration>
<desc><p>The returned pointer is read-only. Never attempts to modify
its contents.
</p></desc>
</function><function id="//xsdoc_ref/c/func/XSData_GetClassID" lang="c"><name>XSData_GetClassID</name>
<abstract><p>Gets the class ID for XSData
</p></abstract>
<returntype> XS_EXPORT XSStatic XSClassID</returntype>
<result><p>The class ID for XSData
</p></result>
<declaration><declaration_type>XS_EXPORT</declaration_type> <declaration_type>XSStatic</declaration_type> <declaration_type>XSClassID</declaration_type> <declaration_function>XSData_GetClassID</declaration_function>(
    <declaration_param>void</declaration_param> );  </declaration>
<desc><p/></desc>
</function><function id="//xsdoc_ref/c/func/XSData_GetLength" lang="c"><name>XSData_GetLength</name>
<abstract><p>Gets the length of a data object
</p></abstract>
<parameterlist>
<parameter><name>data</name><desc><p>The data object</p></desc></parameter>
</parameterlist>
<parsedparameterlist>
<parsedparameter><type>XSDataRef</type><name>data</name></parsedparameter>
</parsedparameterlist>
<returntype> XS_EXPORT XSUInteger</returntype>
<result><p>The number of bytes contained in the data object
</p></result>
<declaration><declaration_type>XS_EXPORT</declaration_type> <declaration_type>XSUInteger</declaration_type> <declaration_function>XSData_GetLength</declaration_function>(
    <declaration_type>XSDataRef</declaration_type> <declaration_param>data</declaration_param> );  </declaration>
<desc><p/></desc>
</function><function id="//xsdoc_ref/c/func/XSData_IsMutable" lang="c"><name>XSData_IsMutable</name>
<abstract><p>Checks if a data object is mutable
</p></abstract>
<parameterlist>
<parameter><name>data</name><desc><p>The data object</p></desc></parameter>
</parameterlist>
<parsedparameterlist>
<parsedparameter><type>XSDataRef</type><name>data</name></parsedparameter>
</parsedparameterlist>
<returntype> XS_EXPORT bool</returntype>
<result><p>True if the data object is mutable, otherwise false
</p></result>
<declaration><declaration_type>XS_EXPORT</declaration_type> <declaration_type>bool</declaration_type> <declaration_function>XSData_IsMutable</declaration_function>(
    <declaration_type>XSDataRef</declaration_type> <declaration_param>data</declaration_param> );  </declaration>
<desc><p/></desc>
</function><function id="//xsdoc_ref/c/func/XSData_MutableData" lang="c"><name>XSData_MutableData</name>
<abstract><p>Gets an empty mutable data object
</p></abstract>
<returntype> XS_EXPORT XSStatic XSAutoreleased XSMutableDataRef</returntype>
<result><p>An empty mutable data object
</p></result>
<declaration><declaration_type>XS_EXPORT</declaration_type> <declaration_type>XSStatic</declaration_type> <declaration_type>XSAutoreleased</declaration_type> <declaration_type>XSMutableDataRef</declaration_type> <declaration_function>XSData_MutableData</declaration_function>(
    <declaration_param>void</declaration_param> );  </declaration>
<desc><p/></desc>
</function><function id="//xsdoc_ref/c/func/XSData_MutableDataWithInitialCapacity" lang="c"><name>XSData_MutableDataWithInitialCapacity</name>
<abstract><p>Gets an empty mutable data object with an initial capacity
</p></abstract>
<parameterlist>
<parameter><name>capacity</name><desc><p>The initial capacity of the internal byte buffer</p></desc></parameter>
</parameterlist>
<parsedparameterlist>
<parsedparameter><type>XSUInteger</type><name>capacity</name></parsedparameter>
</parsedparameterlist>
<returntype> XS_EXPORT XSStatic XSAutoreleased XSMutableDataRef</returntype>
<result><p>An empty mutable data object
</p></result>
<declaration><declaration_type>XS_EXPORT</declaration_type> <declaration_type>XSStatic</declaration_type> <declaration_type>XSAutoreleased</declaration_type> <declaration_type>XSMutableDataRef</declaration_type> <declaration_function>XSData_MutableDataWithInitialCapacity</declaration_function>(
    <declaration_type>XSUInteger</declaration_type> <declaration_param>capacity</declaration_param> );  </declaration>
<desc><p/></desc>
</function><function id="//xsdoc_ref/c/func/XSData_RangeOfData" lang="c"><name>XSData_RangeOfData</name>
<abstract><p>Searches a data object for data contained in another data object
</p></abstract>
<parameterlist>
<parameter><name>data</name><desc><p>The data object</p></desc></parameter>
<parameter><name>search</name><desc><p>The data object containing the bytes to search for</p></desc></parameter>
<parameter><name>searchRange</name><desc><p>The search range. Pass XSRangeZero to search in the whole data object</p></desc></parameter>
</parameterlist>
<parsedparameterlist>
<parsedparameter><type>XSDataRef</type><name>data</name></parsedparameter>
<parsedparameter><type>XSDataRef</type><name>search</name></parsedparameter>
<parsedparameter><type>XSRange</type><name>searchRange</name></parsedparameter>
</parsedparameterlist>
<returntype> XS_EXPORT XSRange</returntype>
<result><p>The range of the data
</p></result>
<declaration><declaration_type>XS_EXPORT</declaration_type> <declaration_type>XSRange</declaration_type> <declaration_function>XSData_RangeOfData</declaration_function>(
    <declaration_type>XSDataRef</declaration_type> <declaration_param>data</declaration_param>,
    <declaration_type>XSDataRef</declaration_type> <declaration_param>search</declaration_param>,
    <declaration_type>XSRange</declaration_type> <declaration_param>searchRange</declaration_param> );  </declaration>
<desc><p>If the data was not found, the location of the returned range will by XSNotFound.
</p></desc>
</function><function id="//xsdoc_ref/c/func/XSData_ReplaceBytesInRangeWithBytes" lang="c"><name>XSData_ReplaceBytesInRangeWithBytes</name>
<abstract><p>Replaces bytes in a data object with other bytes
</p></abstract>
<parameterlist>
<parameter><name>data</name><desc><p>The data object</p></desc></parameter>
<parameter><name>range</name><desc><p>The range of the bytes to replace. Pass XSRangeZero to replace bytes in the whole data object</p></desc></parameter>
<parameter><name>newBytes</name><desc><p>The bytes</p></desc></parameter>
</parameterlist>
<parsedparameterlist>
<parsedparameter><type>XSMutableDataRef</type><name>data</name></parsedparameter>
<parsedparameter><type>XSRange</type><name>range</name></parsedparameter>
<parsedparameter><type>XSUInt8 *</type><name>newBytes</name></parsedparameter>
</parsedparameterlist>
<returntype> XS_EXPORT void</returntype>
<declaration><declaration_type>XS_EXPORT</declaration_type> <declaration_type>void</declaration_type> <declaration_function>XSData_ReplaceBytesInRangeWithBytes</declaration_function>(
    <declaration_type>XSMutableDataRef</declaration_type> <declaration_param>data</declaration_param>,
    <declaration_type>XSRange</declaration_type> <declaration_param>range</declaration_param>,
    <declaration_type>XSUInt8</declaration_type> <declaration_type>*</declaration_type><declaration_param>newBytes</declaration_param> );  </declaration>
<desc><p/></desc>
</function><function id="//xsdoc_ref/c/func/XSData_ResetBytesInRange" lang="c"><name>XSData_ResetBytesInRange</name>
<abstract><p>Resets bytes at a specific range in a data object
</p></abstract>
<parameterlist>
<parameter><name>data</name><desc><p>The data object</p></desc></parameter>
<parameter><name>range</name><desc><p>The range of the bytes to reset. Pass XSRangeZero to reset the whole data object</p></desc></parameter>
</parameterlist>
<parsedparameterlist>
<parsedparameter><type>XSMutableDataRef</type><name>data</name></parsedparameter>
<parsedparameter><type>XSRange</type><name>range</name></parsedparameter>
</parsedparameterlist>
<returntype> XS_EXPORT void</returntype>
<declaration><declaration_type>XS_EXPORT</declaration_type> <declaration_type>void</declaration_type> <declaration_function>XSData_ResetBytesInRange</declaration_function>(
    <declaration_type>XSMutableDataRef</declaration_type> <declaration_param>data</declaration_param>,
    <declaration_type>XSRange</declaration_type> <declaration_param>range</declaration_param> );  </declaration>
<desc><p>Bytes in the specific range will be set to zero.
</p></desc>
</function><function id="//xsdoc_ref/c/func/XSData_SubDataWithRange" lang="c"><name>XSData_SubDataWithRange</name>
<abstract><p>Gets a data object containing bytes from another data object at a specific range
</p></abstract>
<parameterlist>
<parameter><name>data</name><desc><p>The data object</p></desc></parameter>
<parameter><name>range</name><desc><p>The range of the bytes for the new data object. Pass XSRangeZero to get all bytes from the data object</p></desc></parameter>
</parameterlist>
<parsedparameterlist>
<parsedparameter><type>XSDataRef</type><name>data</name></parsedparameter>
<parsedparameter><type>XSRange</type><name>range</name></parsedparameter>
</parsedparameterlist>
<returntype> XS_EXPORT XSDataRef</returntype>
<result><p>Am immutable data object 
</p></result>
<declaration><declaration_type>XS_EXPORT</declaration_type> <declaration_type>XSDataRef</declaration_type> <declaration_function>XSData_SubDataWithRange</declaration_function>(
    <declaration_type>XSDataRef</declaration_type> <declaration_param>data</declaration_param>,
    <declaration_type>XSRange</declaration_type> <declaration_param>range</declaration_param> );  </declaration>
<desc><p/></desc>
</function></functions>
<typedefs><typedef id="//xsdoc_ref/c/tdef/XSData_BufferReleaseType" lang="c" type="simple"><name>XSData_BufferReleaseType</name>
<abstract><p>Release type for XSData internal buffer
</p></abstract>
<constantlist>
<constant><name>XSData_BufferReleaseTypeNone</name><desc><p>No release</p></desc></constant>
<constant><name>XSData_BufferReleaseTypeRelease</name><desc><p>Release - For memory allocated with XSAlloc</p></desc></constant>
<constant><name>XSData_BufferReleaseTypeFree</name><desc><p>Free - For memory allocated with malloc</p></desc></constant>
</constantlist>
<parsedparameterlist>
<parsedparameter><type></type><name>XSData_BufferReleaseTypeNone</name></parsedparameter>
<parsedparameter><type></type><name>XSData_BufferReleaseTypeRelease</name></parsedparameter>
<parsedparameter><type></type><name>XSData_BufferReleaseTypeFree</name></parsedparameter>
</parsedparameterlist>
<declaration><declaration_keyword>typedef</declaration_keyword> <declaration_keyword>enum</declaration_keyword> { 
    <declaration_var>XSData_BufferReleaseTypeNone</declaration_var> = <declaration_number>0x00</declaration_number>,
    <declaration_comment>/*! No release */</declaration_comment>
    <declaration_var>XSData_BufferReleaseTypeRelease</declaration_var> = <declaration_number>0x01</declaration_number>,
    <declaration_comment>/*! Release - For memory allocated with XSAlloc */</declaration_comment>
    <declaration_var>XSData_BufferReleaseTypeFree</declaration_var> = <declaration_number>0x02</declaration_number> <declaration_comment>/*! Free - For memory allocated with malloc </declaration_comment>
        <declaration_comment>*/</declaration_comment>
} <declaration_var>XSData_BufferReleaseType</declaration_var>;  </declaration>
<desc><p/></desc>
</typedef><typedef id="//xsdoc_ref/c/tdef/XSDataRef" lang="c" type="simple"><name>XSDataRef</name>
<abstract><p>Opaque type for XSData
</p></abstract>
<declaration><declaration_keyword>typedef</declaration_keyword> <declaration_keyword>const</declaration_keyword> <declaration_keyword>struct</declaration_keyword> <declaration_type>__XSData</declaration_type> <declaration_type>*</declaration_type> <declaration_var>XSDataRef</declaration_var>;  </declaration>
<desc><p>XSDataRef objects are thread-safe
</p></desc>
</typedef><typedef id="//xsdoc_ref/c/tdef/XSMutableDataRef" lang="c" type="simple"><name>XSMutableDataRef</name>
<abstract><p>Opaque type for XSMutableData
</p></abstract>
<declaration><declaration_keyword>typedef</declaration_keyword> <declaration_keyword>struct</declaration_keyword> <declaration_type>__XSData</declaration_type> <declaration_type>*</declaration_type> <declaration_var>XSMutableDataRef</declaration_var>;  </declaration>
<desc><p>XSMutableDataRef objects are thread-safe
</p></desc>
</typedef></typedefs><copyrightinfo>&#169; (c) 2010-2014 - Jean-David Gadina - www.xs-labs.com
</copyrightinfo>
<timestamp>Thursday, September 04, 2014</timestamp>
</header>