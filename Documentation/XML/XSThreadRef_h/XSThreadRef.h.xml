<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE header PUBLIC "-//Apple Computer//DTD HEADERDOC 1.6//EN" "/System/Library/DTDs/HeaderDoc-1.6.dtd">
<header id="//xsdoc_ref/doc/header/XSThreadRef.h" lang="c" filename="XSThreadRef.h" headerpath="/Users/macmade/Documents/Macmade/Development/GitHub/XSFoundation/XSFoundation/include/XS/Classes/XSThreadRef.h"><name>XSThreadRef.h</name>
<abstract><p>XSThread class
</p></abstract>
<attributes><attribute><name>Author</name><value>Jean-David Gadina - www.xs-labs.com</value></attribute>
</attributes>
<includes>
<include><hd_link logicalPath="//xsdoc_ref/doc/header/XSTypes.h">&lt;XS/XSTypes.h&gt;</hd_link></include>
<include><hd_link logicalPath="//xsdoc_ref/doc/header/XSMacros.h">&lt;XS/XSMacros.h&gt;</hd_link></include>
</includes>
<desc><p>...
</p></desc>
<functions><function id="//xsdoc_ref/c/func/XSThread_DetachFunction" lang="c"><name>XSThread_DetachFunction</name>
<abstract><p>Creates a thread with an object's method as entry point
</p></abstract>
<parameterlist>
<parameter><name>func</name><desc><p>The function to detach</p></desc></parameter>
</parameterlist>
<parsedparameterlist>
<parsedparameter><type>XSThread_Function</type><name>func</name></parsedparameter>
</parsedparameterlist>
<returntype> XS_EXPORT XSStatic void</returntype>
<declaration><declaration_type>XS_EXPORT</declaration_type> <declaration_type>XSStatic</declaration_type> <declaration_type>void</declaration_type> <declaration_function>XSThread_DetachFunction</declaration_function>(
    <declaration_type>XSThread_Function</declaration_type> <declaration_param>func</declaration_param> );  </declaration>
<desc><p/></desc>
</function><function id="//xsdoc_ref/c/func/XSThread_DetachFunctionWithArgument" lang="c"><name>XSThread_DetachFunctionWithArgument</name>
<abstract><p>Creates a thread with an object's method as entry point and with an argument
</p></abstract>
<parameterlist>
<parameter><name>func</name><desc><p>The function to detach</p></desc></parameter>
<parameter><name>arg</name><desc><p>The argument to pass to the threaded function</p></desc></parameter>
</parameterlist>
<parsedparameterlist>
<parsedparameter><type>XSThread_FunctionWithArgument</type><name>func</name></parsedparameter>
<parsedparameter><type>void *</type><name>arg</name></parsedparameter>
</parsedparameterlist>
<returntype> XS_EXPORT XSStatic void</returntype>
<declaration><declaration_type>XS_EXPORT</declaration_type> <declaration_type>XSStatic</declaration_type> <declaration_type>void</declaration_type> <declaration_function>XSThread_DetachFunctionWithArgument</declaration_function>(
    <declaration_type>XSThread_FunctionWithArgument</declaration_type> <declaration_param>func</declaration_param>,
    <declaration_type>void</declaration_type> <declaration_type>*</declaration_type><declaration_param>arg</declaration_param> );  </declaration>
<desc><p/></desc>
</function><function id="//xsdoc_ref/c/func/XSThread_DetachMethod" lang="c"><name>XSThread_DetachMethod</name>
<abstract><p>Creates a thread with an object's method as entry point
</p></abstract>
<parameterlist>
<parameter><name>object</name><desc><p>The receiver object</p></desc></parameter>
<parameter><name>method</name><desc><p>The receiver object's method to detach</p></desc></parameter>
</parameterlist>
<parsedparameterlist>
<parsedparameter><type>XSObjectRef</type><name>object</name></parsedparameter>
<parsedparameter><type>XSThread_Method</type><name>method</name></parsedparameter>
</parsedparameterlist>
<returntype> XS_EXPORT XSStatic void</returntype>
<declaration><declaration_type>XS_EXPORT</declaration_type> <declaration_type>XSStatic</declaration_type> <declaration_type>void</declaration_type> <declaration_function>XSThread_DetachMethod</declaration_function>(
    <declaration_type>XSObjectRef</declaration_type> <declaration_param>object</declaration_param>,
    <declaration_type>XSThread_Method</declaration_type> <declaration_param>method</declaration_param> );  </declaration>
<desc><p/></desc>
</function><function id="//xsdoc_ref/c/func/XSThread_DetachMethodWithArgument" lang="c"><name>XSThread_DetachMethodWithArgument</name>
<abstract><p>Creates a thread with an object's method as entry point and with an argument
</p></abstract>
<parameterlist>
<parameter><name>object</name><desc><p>The receiver object</p></desc></parameter>
<parameter><name>method</name><desc><p>The receiver object's method to detach</p></desc></parameter>
<parameter><name>arg</name><desc><p>The argument to pass to the threaded method</p></desc></parameter>
</parameterlist>
<parsedparameterlist>
<parsedparameter><type>XSObjectRef</type><name>object</name></parsedparameter>
<parsedparameter><type>XSThread_MethodWithArgument</type><name>method</name></parsedparameter>
<parsedparameter><type>void *</type><name>arg</name></parsedparameter>
</parsedparameterlist>
<returntype> XS_EXPORT XSStatic void</returntype>
<declaration><declaration_type>XS_EXPORT</declaration_type> <declaration_type>XSStatic</declaration_type> <declaration_type>void</declaration_type> <declaration_function>XSThread_DetachMethodWithArgument</declaration_function>(
    <declaration_type>XSObjectRef</declaration_type> <declaration_param>object</declaration_param>,
    <declaration_type>XSThread_MethodWithArgument</declaration_type> <declaration_param>method</declaration_param>,
    <declaration_type>void</declaration_type> <declaration_type>*</declaration_type><declaration_param>arg</declaration_param> );  </declaration>
<desc><p/></desc>
</function><function id="//xsdoc_ref/c/func/XSThread_GetClassID" lang="c"><name>XSThread_GetClassID</name>
<abstract><p>Gets the class ID for XSThread
</p></abstract>
<returntype> XS_EXPORT XSStatic XSClassID</returntype>
<result><p>The class ID for XSThread
</p></result>
<declaration><declaration_type>XS_EXPORT</declaration_type> <declaration_type>XSStatic</declaration_type> <declaration_type>XSClassID</declaration_type> <declaration_function>XSThread_GetClassID</declaration_function>(
    <declaration_param>void</declaration_param> );  </declaration>
<desc><p/></desc>
</function><function id="//xsdoc_ref/c/func/XSThread_GetCurrentThread" lang="c"><name>XSThread_GetCurrentThread</name>
<abstract><p>Gets the instance of the current thread
</p></abstract>
<returntype> XS_EXPORT XSStatic XSThreadRef</returntype>
<result><p>The instance of the current thread
</p></result>
<declaration><declaration_type>XS_EXPORT</declaration_type> <declaration_type>XSStatic</declaration_type> <declaration_type>XSThreadRef</declaration_type> <declaration_function>XSThread_GetCurrentThread</declaration_function>(
    <declaration_param>void</declaration_param> );  </declaration>
<desc><p/></desc>
</function><function id="//xsdoc_ref/c/func/XSThread_GetCurrentThreadID" lang="c"><name>XSThread_GetCurrentThreadID</name>
<abstract><p>Gets the instance of the current thread
</p></abstract>
<returntype> XS_EXPORT XSStatic XSUInteger</returntype>
<result><p>The instance of the current thread
</p></result>
<declaration><declaration_type>XS_EXPORT</declaration_type> <declaration_type>XSStatic</declaration_type> <declaration_type>XSUInteger</declaration_type> <declaration_function>XSThread_GetCurrentThreadID</declaration_function>(
    <declaration_param>void</declaration_param> );  </declaration>
<desc><p/></desc>
</function><function id="//xsdoc_ref/c/func/XSThread_GetID" lang="c"><name>XSThread_GetID</name>
<abstract><p>Gets the ID of a thread
</p></abstract>
<parameterlist>
<parameter><name>thread</name><desc><p>The thread object</p></desc></parameter>
</parameterlist>
<parsedparameterlist>
<parsedparameter><type>XSThreadRef</type><name>thread</name></parsedparameter>
</parsedparameterlist>
<returntype> XS_EXPORT XSUInteger</returntype>
<result><p>The thread ID
</p></result>
<declaration><declaration_type>XS_EXPORT</declaration_type> <declaration_type>XSUInteger</declaration_type> <declaration_function>XSThread_GetID</declaration_function>(
    <declaration_type>XSThreadRef</declaration_type> <declaration_param>thread</declaration_param> );  </declaration>
<desc><p/></desc>
</function><function id="//xsdoc_ref/c/func/XSThread_GetMainThread" lang="c"><name>XSThread_GetMainThread</name>
<abstract><p>Gets the instance of the main thread
</p></abstract>
<returntype> XS_EXPORT XSStatic XSThreadRef</returntype>
<result><p>The instance of the main thread
</p></result>
<declaration><declaration_type>XS_EXPORT</declaration_type> <declaration_type>XSStatic</declaration_type> <declaration_type>XSThreadRef</declaration_type> <declaration_function>XSThread_GetMainThread</declaration_function>(
    <declaration_param>void</declaration_param> );  </declaration>
<desc><p/></desc>
</function><function id="//xsdoc_ref/c/func/XSThread_IsMainThread" lang="c"><name>XSThread_IsMainThread</name>
<abstract><p>Checks if a thread is the main thread
</p></abstract>
<parameterlist>
<parameter><name>thread</name><desc><p>The thread object</p></desc></parameter>
</parameterlist>
<parsedparameterlist>
<parsedparameter><type>XSThreadRef</type><name>thread</name></parsedparameter>
</parsedparameterlist>
<returntype> XS_EXPORT bool</returntype>
<result><p>True if the thread is the main thread, otherwise false
</p></result>
<declaration><declaration_type>XS_EXPORT</declaration_type> <declaration_type>bool</declaration_type> <declaration_function>XSThread_IsMainThread</declaration_function>(
    <declaration_type>XSThreadRef</declaration_type> <declaration_param>thread</declaration_param> );  </declaration>
<desc><p/></desc>
</function></functions>
<typedefs><typedef id="//xsdoc_ref/c/tdef/XSThread_Function" lang="c" type="funcPtr"><name>XSThread_Function</name>
<abstract><p>Threaded function
</p></abstract>
<declaration><declaration_keyword>typedef</declaration_keyword> <declaration_type>void</declaration_type> ( <declaration_type>*</declaration_type><declaration_function>XSThread_Function</declaration_function> )(
    <declaration_param>void</declaration_param> );  </declaration>
<desc><p/></desc>
</typedef><typedef id="//xsdoc_ref/c/tdef/XSThread_FunctionWithArgument" lang="c" type="funcPtr"><name>XSThread_FunctionWithArgument</name>
<abstract><p>Threaded function with an argument
</p></abstract>
<parsedparameterlist>
<parsedparameter><type>void *</type><name>arg</name></parsedparameter>
</parsedparameterlist>
<declaration><declaration_keyword>typedef</declaration_keyword> <declaration_type>void</declaration_type> ( <declaration_type>*</declaration_type><declaration_function>XSThread_FunctionWithArgument</declaration_function> )(
    <declaration_type>void</declaration_type> <declaration_type>*</declaration_type><declaration_param>arg</declaration_param> );  </declaration>
<desc><p/></desc>
</typedef><typedef id="//xsdoc_ref/c/tdef/XSThread_Method" lang="c" type="funcPtr"><name>XSThread_Method</name>
<abstract><p>Threaded method
</p></abstract>
<parsedparameterlist>
<parsedparameter><type>XSObjectRef</type><name>object</name></parsedparameter>
</parsedparameterlist>
<declaration><declaration_keyword>typedef</declaration_keyword> <declaration_type>void</declaration_type> ( <declaration_type>*</declaration_type><declaration_function>XSThread_Method</declaration_function> )(
    <declaration_type>XSObjectRef</declaration_type> <declaration_param>object</declaration_param> );  </declaration>
<desc><p/></desc>
</typedef><typedef id="//xsdoc_ref/c/tdef/XSThread_MethodWithArgument" lang="c" type="funcPtr"><name>XSThread_MethodWithArgument</name>
<abstract><p>Threaded method with an argument
</p></abstract>
<parsedparameterlist>
<parsedparameter><type>XSObjectRef</type><name>object</name></parsedparameter>
<parsedparameter><type>void *</type><name>arg</name></parsedparameter>
</parsedparameterlist>
<declaration><declaration_keyword>typedef</declaration_keyword> <declaration_type>void</declaration_type> ( <declaration_type>*</declaration_type><declaration_function>XSThread_MethodWithArgument</declaration_function> )(
    <declaration_type>XSObjectRef</declaration_type> <declaration_param>object</declaration_param>,
    <declaration_type>void</declaration_type> <declaration_type>*</declaration_type><declaration_param>arg</declaration_param> );  </declaration>
<desc><p/></desc>
</typedef><typedef id="//xsdoc_ref/c/tdef/XSThreadRef" lang="c" type="simple"><name>XSThreadRef</name>
<abstract><p>Opaque type for XSThread
</p></abstract>
<declaration><declaration_keyword>typedef</declaration_keyword> <declaration_keyword>const</declaration_keyword> <declaration_keyword>struct</declaration_keyword> <declaration_type>__XSThread</declaration_type> <declaration_type>*</declaration_type> <declaration_var>XSThreadRef</declaration_var>;  </declaration>
<desc><p/></desc>
</typedef></typedefs><copyrightinfo>&#169; (c) 2010-2014 - Jean-David Gadina - www.xs-labs.com
</copyrightinfo>
<timestamp>Thursday, September 04, 2014</timestamp>
</header>