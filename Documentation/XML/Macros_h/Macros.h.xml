<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE header PUBLIC "-//Apple Computer//DTD HEADERDOC 1.6//EN" "/System/Library/DTDs/HeaderDoc-1.6.dtd">
<header id="//xsdoc_ref/doc/header/Macros.h" lang="c" filename="Macros.h" headerpath="/Users/macmade/Documents/Macmade/GitHub/XSFoundation/XSFoundation/include/XS/Macros.h"><name>Macros.h</name>
<abstract><p>XSFoundation macros
</p></abstract>
<attributes><attribute><name>Author</name><value>Jean-David Gadina - www.xs-labs.com</value></attribute>
</attributes>
<includes>
</includes>
<desc><p/></desc>
<defines><pdefine id="//xsdoc_ref/c/macro/__func__" definetype="block" lang="c"><name>__func__</name>
<abstract><p>Function name
</p></abstract>
<declaration><declaration_preprocessor>#ifndef</declaration_preprocessor> <declaration_preprocessor>__func__</declaration_preprocessor> 
<declaration_preprocessor>#ifdef</declaration_preprocessor> <declaration_preprocessor>_WIN32</declaration_preprocessor> 
<declaration_preprocessor>#if</declaration_preprocessor> <declaration_preprocessor>defined</declaration_preprocessor><declaration_preprocessor>(</declaration_preprocessor> <declaration_preprocessor>__FUNCTION__</declaration_preprocessor> <declaration_preprocessor>)</declaration_preprocessor> 
<declaration_preprocessor>#define</declaration_preprocessor> <declaration_preprocessor>__func__</declaration_preprocessor> <declaration_preprocessor>__FUNCTION__</declaration_preprocessor> 
<declaration_preprocessor>#else</declaration_preprocessor> 
<declaration_preprocessor>#if</declaration_preprocessor> <declaration_preprocessor>defined</declaration_preprocessor><declaration_preprocessor>(</declaration_preprocessor> <declaration_preprocessor>__FUNCSIG__</declaration_preprocessor> <declaration_preprocessor>)</declaration_preprocessor> 
<declaration_preprocessor>#define</declaration_preprocessor> <declaration_preprocessor>__func__</declaration_preprocessor> <declaration_preprocessor>__FUNCSIG__</declaration_preprocessor> 
<declaration_preprocessor>#else</declaration_preprocessor> 
<declaration_preprocessor>#if</declaration_preprocessor> <declaration_preprocessor>defined</declaration_preprocessor><declaration_preprocessor>(</declaration_preprocessor> <declaration_preprocessor>__FUNCDNAME__</declaration_preprocessor> <declaration_preprocessor>)</declaration_preprocessor> 
<declaration_preprocessor>#define</declaration_preprocessor> <declaration_preprocessor>__func__</declaration_preprocessor> <declaration_preprocessor>__FUNCDNAME__</declaration_preprocessor> 
<declaration_preprocessor>#else</declaration_preprocessor> 
<declaration_preprocessor>#define</declaration_preprocessor> <declaration_preprocessor>__func__</declaration_preprocessor> <declaration_preprocessor>"</declaration_preprocessor><declaration_preprocessor>&lt;</declaration_preprocessor><declaration_preprocessor>unknown</declaration_preprocessor> <declaration_preprocessor>function</declaration_preprocessor><declaration_preprocessor>&gt;</declaration_preprocessor><declaration_preprocessor>"</declaration_preprocessor> 
<declaration_preprocessor>#endif</declaration_preprocessor>  
<declaration_preprocessor>#endif</declaration_preprocessor>  
<declaration_preprocessor>#endif</declaration_preprocessor>  
<declaration_preprocessor>#else</declaration_preprocessor> 
<declaration_preprocessor>#if</declaration_preprocessor> <declaration_preprocessor>__STDC_VERSION__</declaration_preprocessor> <declaration_preprocessor>&lt;</declaration_preprocessor> <declaration_preprocessor>199901L</declaration_preprocessor> 
<declaration_preprocessor>#ifdef</declaration_preprocessor> <declaration_preprocessor>__GNUC__</declaration_preprocessor> 
<declaration_preprocessor>#if</declaration_preprocessor> <declaration_preprocessor>__GNUC__</declaration_preprocessor> <declaration_preprocessor>&gt;=</declaration_preprocessor> <declaration_preprocessor>2</declaration_preprocessor> 
<declaration_preprocessor>#define</declaration_preprocessor> <declaration_preprocessor>__func__</declaration_preprocessor> <declaration_preprocessor>__FUNCTION__</declaration_preprocessor> 
<declaration_preprocessor>#else</declaration_preprocessor> 
<declaration_preprocessor>#define</declaration_preprocessor> <declaration_preprocessor>__func__</declaration_preprocessor> <declaration_preprocessor>"</declaration_preprocessor><declaration_preprocessor>&lt;</declaration_preprocessor><declaration_preprocessor>unknown</declaration_preprocessor> <declaration_preprocessor>function</declaration_preprocessor><declaration_preprocessor>&gt;</declaration_preprocessor><declaration_preprocessor>"</declaration_preprocessor> 
<declaration_preprocessor>#endif</declaration_preprocessor>  
<declaration_preprocessor>#else</declaration_preprocessor> 
<declaration_preprocessor>#define</declaration_preprocessor> <declaration_preprocessor>__func__</declaration_preprocessor> <declaration_preprocessor>"</declaration_preprocessor><declaration_preprocessor>&lt;</declaration_preprocessor><declaration_preprocessor>unknown</declaration_preprocessor> <declaration_preprocessor>function</declaration_preprocessor><declaration_preprocessor>&gt;</declaration_preprocessor><declaration_preprocessor>"</declaration_preprocessor> 
<declaration_preprocessor>#endif</declaration_preprocessor>  
<declaration_preprocessor>#endif</declaration_preprocessor>  
<declaration_preprocessor>#endif</declaration_preprocessor>  
<declaration_preprocessor>#endif</declaration_preprocessor>  
</declaration>
</pdefine><pdefine id="//xsdoc_ref/c/macro/XS_ABS" definetype="block" lang="c"><name>XS_ABS</name>
<abstract><p>Gets an absolute value of a value
</p></abstract>
<parameterlist>
<parameter><name>_a_</name><desc><p>The value</p></desc></parameter>
</parameterlist>
<result><p>The absolute value of the value
</p></result>
<declaration><declaration_preprocessor>#if</declaration_preprocessor> <declaration_preprocessor>!</declaration_preprocessor><declaration_preprocessor>defined</declaration_preprocessor><declaration_preprocessor>(</declaration_preprocessor> <declaration_preprocessor>__STRICT_ANSI__</declaration_preprocessor> <declaration_preprocessor>)</declaration_preprocessor> <declaration_preprocessor>&amp;</declaration_preprocessor><declaration_preprocessor>&amp;</declaration_preprocessor> <declaration_preprocessor>(</declaration_preprocessor> <declaration_preprocessor>defined</declaration_preprocessor><declaration_preprocessor>(</declaration_preprocessor> <declaration_preprocessor>__GNUC__</declaration_preprocessor> <declaration_preprocessor>)</declaration_preprocessor> <declaration_preprocessor>|</declaration_preprocessor><declaration_preprocessor>|</declaration_preprocessor> <declaration_preprocessor>defined</declaration_preprocessor><declaration_preprocessor>(</declaration_preprocessor> <declaration_preprocessor>__clang__</declaration_preprocessor> <declaration_preprocessor>)</declaration_preprocessor> <declaration_preprocessor>)</declaration_preprocessor> 
<declaration_preprocessor>#define</declaration_preprocessor> <declaration_preprocessor>XS_ABS</declaration_preprocessor><declaration_preprocessor>(</declaration_preprocessor> <declaration_preprocessor>_a_</declaration_preprocessor> <declaration_preprocessor>)</declaration_preprocessor> <declaration_preprocessor>(</declaration_preprocessor> <declaration_preprocessor>\</declaration_preprocessor> 
    <declaration_preprocessor>{</declaration_preprocessor> <declaration_preprocessor>\</declaration_preprocessor> 
    <declaration_preprocessor>__typeof__</declaration_preprocessor><declaration_preprocessor>(</declaration_preprocessor> <declaration_preprocessor>_a_</declaration_preprocessor> <declaration_preprocessor>)</declaration_preprocessor> <declaration_preprocessor>__a</declaration_preprocessor> <declaration_preprocessor>=</declaration_preprocessor> <declaration_preprocessor>(</declaration_preprocessor> <declaration_preprocessor>_a_</declaration_preprocessor> <declaration_preprocessor>)</declaration_preprocessor><declaration_preprocessor>;</declaration_preprocessor> <declaration_preprocessor>\</declaration_preprocessor> 
    <declaration_preprocessor>(</declaration_preprocessor> <declaration_preprocessor>__a</declaration_preprocessor> <declaration_preprocessor>&lt;</declaration_preprocessor> <declaration_preprocessor>0</declaration_preprocessor> <declaration_preprocessor>)</declaration_preprocessor> <declaration_preprocessor>?</declaration_preprocessor> <declaration_preprocessor>-</declaration_preprocessor><declaration_preprocessor>__a</declaration_preprocessor> <declaration_preprocessor>:</declaration_preprocessor> <declaration_preprocessor>__a</declaration_preprocessor><declaration_preprocessor>;</declaration_preprocessor> <declaration_preprocessor>\</declaration_preprocessor> 
    <declaration_preprocessor>}</declaration_preprocessor> <declaration_preprocessor>)</declaration_preprocessor> 
<declaration_preprocessor>#else</declaration_preprocessor> 
<declaration_preprocessor>#define</declaration_preprocessor> <declaration_preprocessor>XS_ABS</declaration_preprocessor><declaration_preprocessor>(</declaration_preprocessor> <declaration_preprocessor>_a_</declaration_preprocessor> <declaration_preprocessor>)</declaration_preprocessor> <declaration_preprocessor>(</declaration_preprocessor> <declaration_preprocessor>(</declaration_preprocessor> <declaration_preprocessor>(</declaration_preprocessor> <declaration_preprocessor>_a_</declaration_preprocessor> <declaration_preprocessor>)</declaration_preprocessor> <declaration_preprocessor>&lt;</declaration_preprocessor> <declaration_preprocessor>0</declaration_preprocessor> <declaration_preprocessor>)</declaration_preprocessor> <declaration_preprocessor>?</declaration_preprocessor> <declaration_preprocessor>(</declaration_preprocessor> <declaration_preprocessor>-</declaration_preprocessor><declaration_preprocessor>(</declaration_preprocessor> <declaration_preprocessor>_a_</declaration_preprocessor> <declaration_preprocessor>)</declaration_preprocessor> <declaration_preprocessor>)</declaration_preprocessor> <declaration_preprocessor>:</declaration_preprocessor> <declaration_preprocessor>(</declaration_preprocessor> <declaration_preprocessor>_a_</declaration_preprocessor> <declaration_preprocessor>)</declaration_preprocessor> <declaration_preprocessor>)</declaration_preprocessor> 
<declaration_preprocessor>#endif</declaration_preprocessor>  
</declaration>
</pdefine><pdefine id="//xsdoc_ref/c/macro/XS_AUTORELEASED" definetype="value" lang="c"><name>XS_AUTORELEASED</name>
<abstract><p>Marker for methods that return auto-released objects
</p></abstract>
<declaration><declaration_preprocessor>#define</declaration_preprocessor> <declaration_preprocessor>XS_AUTORELEASED</declaration_preprocessor> </declaration>
</pdefine><pdefine id="//xsdoc_ref/c/macro/XS_CONST_ATTRIBUTE" definetype="block" lang="c"><name>XS_CONST_ATTRIBUTE</name>
<abstract><p>Standardization of the const compiler attribute
</p></abstract>
<declaration><declaration_preprocessor>#if</declaration_preprocessor> <declaration_preprocessor>defined</declaration_preprocessor><declaration_preprocessor>(</declaration_preprocessor> <declaration_preprocessor>__GNUC__</declaration_preprocessor> <declaration_preprocessor>)</declaration_preprocessor> <declaration_preprocessor>&amp;</declaration_preprocessor><declaration_preprocessor>&amp;</declaration_preprocessor> <declaration_preprocessor>(</declaration_preprocessor> <declaration_preprocessor>(</declaration_preprocessor> <declaration_preprocessor>__GNUC__</declaration_preprocessor> <declaration_preprocessor>&gt;=</declaration_preprocessor> <declaration_preprocessor>4</declaration_preprocessor> <declaration_preprocessor>)</declaration_preprocessor> <declaration_preprocessor>|</declaration_preprocessor><declaration_preprocessor>|</declaration_preprocessor> <declaration_preprocessor>(</declaration_preprocessor> <declaration_preprocessor>(</declaration_preprocessor> <declaration_preprocessor>__GNUC__</declaration_preprocessor> <declaration_preprocessor>==</declaration_preprocessor> <declaration_preprocessor>3</declaration_preprocessor> <declaration_preprocessor>)</declaration_preprocessor> <declaration_preprocessor>&amp;</declaration_preprocessor><declaration_preprocessor>&amp;</declaration_preprocessor> <declaration_preprocessor>(</declaration_preprocessor> <declaration_preprocessor>__GNUC_MINOR__</declaration_preprocessor> <declaration_preprocessor>&gt;=</declaration_preprocessor> <declaration_preprocessor>1</declaration_preprocessor> <declaration_preprocessor>)</declaration_preprocessor> <declaration_preprocessor>)</declaration_preprocessor> <declaration_preprocessor>)</declaration_preprocessor> 
<declaration_preprocessor>#define</declaration_preprocessor> <declaration_preprocessor>XS_CONST_ATTRIBUTE</declaration_preprocessor> <declaration_preprocessor>__attribute__</declaration_preprocessor><declaration_preprocessor>(</declaration_preprocessor> <declaration_preprocessor>(</declaration_preprocessor> <declaration_preprocessor>const</declaration_preprocessor> <declaration_preprocessor>)</declaration_preprocessor> <declaration_preprocessor>)</declaration_preprocessor> 
<declaration_preprocessor>#else</declaration_preprocessor> 
<declaration_preprocessor>#define</declaration_preprocessor> <declaration_preprocessor>XS_CONST_ATTRIBUTE</declaration_preprocessor> 
<declaration_preprocessor>#endif</declaration_preprocessor>  
</declaration>
<desc><p>Not all compiler support this attribute, so it may be defined
to nothing.
</p></desc>
</pdefine><pdefine id="//xsdoc_ref/c/macro/XS_DEPRECATED_ATTRIBUTE" definetype="block" lang="c"><name>XS_DEPRECATED_ATTRIBUTE</name>
<abstract><p>Standardization of the deprecated compiler attribute
</p></abstract>
<declaration><declaration_preprocessor>#if</declaration_preprocessor> <declaration_preprocessor>defined</declaration_preprocessor><declaration_preprocessor>(</declaration_preprocessor> <declaration_preprocessor>__GNUC__</declaration_preprocessor> <declaration_preprocessor>)</declaration_preprocessor> <declaration_preprocessor>&amp;</declaration_preprocessor><declaration_preprocessor>&amp;</declaration_preprocessor> <declaration_preprocessor>(</declaration_preprocessor> <declaration_preprocessor>(</declaration_preprocessor> <declaration_preprocessor>__GNUC__</declaration_preprocessor> <declaration_preprocessor>&gt;=</declaration_preprocessor> <declaration_preprocessor>4</declaration_preprocessor> <declaration_preprocessor>)</declaration_preprocessor> <declaration_preprocessor>|</declaration_preprocessor><declaration_preprocessor>|</declaration_preprocessor> <declaration_preprocessor>(</declaration_preprocessor> <declaration_preprocessor>(</declaration_preprocessor> <declaration_preprocessor>__GNUC__</declaration_preprocessor> <declaration_preprocessor>==</declaration_preprocessor> <declaration_preprocessor>3</declaration_preprocessor> <declaration_preprocessor>)</declaration_preprocessor> <declaration_preprocessor>&amp;</declaration_preprocessor><declaration_preprocessor>&amp;</declaration_preprocessor> <declaration_preprocessor>(</declaration_preprocessor> <declaration_preprocessor>__GNUC_MINOR__</declaration_preprocessor> <declaration_preprocessor>&gt;=</declaration_preprocessor> <declaration_preprocessor>1</declaration_preprocessor> <declaration_preprocessor>)</declaration_preprocessor> <declaration_preprocessor>)</declaration_preprocessor> <declaration_preprocessor>)</declaration_preprocessor> 
<declaration_preprocessor>#define</declaration_preprocessor> <declaration_preprocessor>XS_DEPRECATED_ATTRIBUTE</declaration_preprocessor> <declaration_preprocessor>__attribute__</declaration_preprocessor><declaration_preprocessor>(</declaration_preprocessor> <declaration_preprocessor>(</declaration_preprocessor> <declaration_preprocessor>deprecated</declaration_preprocessor> <declaration_preprocessor>)</declaration_preprocessor> <declaration_preprocessor>)</declaration_preprocessor> 
<declaration_preprocessor>#else</declaration_preprocessor> 
<declaration_preprocessor>#define</declaration_preprocessor> <declaration_preprocessor>XS_DEPRECATED_ATTRIBUTE</declaration_preprocessor> 
<declaration_preprocessor>#endif</declaration_preprocessor>  
</declaration>
<desc><p>Not all compiler support this attribute, so it may be defined
to nothing.
</p></desc>
</pdefine><pdefine id="//xsdoc_ref/c/macro/XS_EXPORT" definetype="block" lang="c"><name>XS_EXPORT</name>
<abstract><p>Standardization of the extern keyword for exported symbols
</p></abstract>
<declaration><declaration_preprocessor>#if</declaration_preprocessor> <declaration_preprocessor>defined</declaration_preprocessor><declaration_preprocessor>(</declaration_preprocessor> <declaration_preprocessor>__WIN32__</declaration_preprocessor> <declaration_preprocessor>)</declaration_preprocessor> 
<declaration_preprocessor>#define</declaration_preprocessor> <declaration_preprocessor>XS_EXPORT</declaration_preprocessor> <declaration_preprocessor>XS_EXTERN</declaration_preprocessor> <declaration_preprocessor>__declspec</declaration_preprocessor><declaration_preprocessor>(</declaration_preprocessor> <declaration_preprocessor>dllimport</declaration_preprocessor> <declaration_preprocessor>)</declaration_preprocessor> 
<declaration_preprocessor>#else</declaration_preprocessor> 
<declaration_preprocessor>#define</declaration_preprocessor> <declaration_preprocessor>XS_EXPORT</declaration_preprocessor> <declaration_preprocessor>XS_EXTERN</declaration_preprocessor> 
<declaration_preprocessor>#endif</declaration_preprocessor>  
</declaration>
</pdefine><pdefine id="//xsdoc_ref/c/macro/XS_EXTERN" definetype="block" lang="c"><name>XS_EXTERN</name>
<abstract><p>Standardization of the extern keyword
</p></abstract>
<declaration><declaration_preprocessor>#if</declaration_preprocessor> <declaration_preprocessor>defined</declaration_preprocessor><declaration_preprocessor>(</declaration_preprocessor> <declaration_preprocessor>__cplusplus</declaration_preprocessor> <declaration_preprocessor>)</declaration_preprocessor> 
<declaration_preprocessor>#define</declaration_preprocessor> <declaration_preprocessor>XS_EXTERN</declaration_preprocessor> <declaration_preprocessor>extern</declaration_preprocessor> <declaration_preprocessor>"</declaration_preprocessor><declaration_preprocessor>C</declaration_preprocessor><declaration_preprocessor>"</declaration_preprocessor> 
<declaration_preprocessor>#else</declaration_preprocessor> 
<declaration_preprocessor>#define</declaration_preprocessor> <declaration_preprocessor>XS_EXTERN</declaration_preprocessor> <declaration_preprocessor>extern</declaration_preprocessor> 
<declaration_preprocessor>#endif</declaration_preprocessor>  
</declaration>
</pdefine><pdefine id="//xsdoc_ref/c/macro/XS_EXTERN_C_BEGIN" definetype="block" lang="c"><name>XS_EXTERN_C_BEGIN</name>
<abstract><p>Substitution for 'extern "C" {' start, when compiling with C++
</p></abstract>
<declaration><declaration_preprocessor>#ifdef</declaration_preprocessor> <declaration_preprocessor>__cplusplus</declaration_preprocessor> 
<declaration_preprocessor>#define</declaration_preprocessor> <declaration_preprocessor>XS_EXTERN_C_BEGIN</declaration_preprocessor> <declaration_preprocessor>extern</declaration_preprocessor> <declaration_preprocessor>"</declaration_preprocessor><declaration_preprocessor>C</declaration_preprocessor><declaration_preprocessor>"</declaration_preprocessor> <declaration_preprocessor>{</declaration_preprocessor> 
<declaration_preprocessor>#else</declaration_preprocessor> 
<declaration_preprocessor>#define</declaration_preprocessor> <declaration_preprocessor>XS_EXTERN_C_BEGIN</declaration_preprocessor> 
<declaration_preprocessor>#endif</declaration_preprocessor>  
</declaration>
</pdefine><pdefine id="//xsdoc_ref/c/macro/XS_EXTERN_C_END" definetype="block" lang="c"><name>XS_EXTERN_C_END</name>
<abstract><p>Substitution for 'extern "C" {' end, when compiling with C++
</p></abstract>
<declaration><declaration_preprocessor>#ifdef</declaration_preprocessor> <declaration_preprocessor>__cplusplus</declaration_preprocessor> 
<declaration_preprocessor>#define</declaration_preprocessor> <declaration_preprocessor>XS_EXTERN_C_END</declaration_preprocessor> <declaration_preprocessor>}</declaration_preprocessor> 
<declaration_preprocessor>#else</declaration_preprocessor> 
<declaration_preprocessor>#define</declaration_preprocessor> <declaration_preprocessor>XS_EXTERN_C_END</declaration_preprocessor> 
<declaration_preprocessor>#endif</declaration_preprocessor>  
</declaration>
</pdefine><pdefine id="//xsdoc_ref/c/macro/XS_FORMAT_ATTRIBUTE" definetype="block" lang="c"><name>XS_FORMAT_ATTRIBUTE</name>
<abstract><p>Standardization of the format compiler attribute
</p></abstract>
<declaration><declaration_preprocessor>#if</declaration_preprocessor> <declaration_preprocessor>defined</declaration_preprocessor><declaration_preprocessor>(</declaration_preprocessor> <declaration_preprocessor>__GNUC__</declaration_preprocessor> <declaration_preprocessor>)</declaration_preprocessor> <declaration_preprocessor>&amp;</declaration_preprocessor><declaration_preprocessor>&amp;</declaration_preprocessor> <declaration_preprocessor>(</declaration_preprocessor> <declaration_preprocessor>(</declaration_preprocessor> <declaration_preprocessor>__GNUC__</declaration_preprocessor> <declaration_preprocessor>&gt;=</declaration_preprocessor> <declaration_preprocessor>4</declaration_preprocessor> <declaration_preprocessor>)</declaration_preprocessor> <declaration_preprocessor>|</declaration_preprocessor><declaration_preprocessor>|</declaration_preprocessor> <declaration_preprocessor>(</declaration_preprocessor> <declaration_preprocessor>(</declaration_preprocessor> <declaration_preprocessor>__GNUC__</declaration_preprocessor> <declaration_preprocessor>==</declaration_preprocessor> <declaration_preprocessor>3</declaration_preprocessor> <declaration_preprocessor>)</declaration_preprocessor> <declaration_preprocessor>&amp;</declaration_preprocessor><declaration_preprocessor>&amp;</declaration_preprocessor> <declaration_preprocessor>(</declaration_preprocessor> <declaration_preprocessor>__GNUC_MINOR__</declaration_preprocessor> <declaration_preprocessor>&gt;=</declaration_preprocessor> <declaration_preprocessor>1</declaration_preprocessor> <declaration_preprocessor>)</declaration_preprocessor> <declaration_preprocessor>)</declaration_preprocessor> <declaration_preprocessor>)</declaration_preprocessor> 
<declaration_preprocessor>#define</declaration_preprocessor> <declaration_preprocessor>XS_FORMAT_ATTRIBUTE</declaration_preprocessor><declaration_preprocessor>(</declaration_preprocessor> <declaration_preprocessor>f</declaration_preprocessor><declaration_preprocessor>,</declaration_preprocessor> <declaration_preprocessor>s</declaration_preprocessor><declaration_preprocessor>,</declaration_preprocessor> <declaration_preprocessor>v</declaration_preprocessor> <declaration_preprocessor>)</declaration_preprocessor> <declaration_preprocessor>__attribute__</declaration_preprocessor><declaration_preprocessor>(</declaration_preprocessor> <declaration_preprocessor>(</declaration_preprocessor> <declaration_preprocessor>format</declaration_preprocessor><declaration_preprocessor>(</declaration_preprocessor> <declaration_preprocessor>f</declaration_preprocessor><declaration_preprocessor>,</declaration_preprocessor> <declaration_preprocessor>s</declaration_preprocessor><declaration_preprocessor>,</declaration_preprocessor> <declaration_preprocessor>v</declaration_preprocessor> <declaration_preprocessor>)</declaration_preprocessor> <declaration_preprocessor>)</declaration_preprocessor> <declaration_preprocessor>)</declaration_preprocessor> 
<declaration_preprocessor>#else</declaration_preprocessor> 
<declaration_preprocessor>#define</declaration_preprocessor> <declaration_preprocessor>XS_FORMAT_ATTRIBUTE</declaration_preprocessor><declaration_preprocessor>(</declaration_preprocessor> <declaration_preprocessor>f</declaration_preprocessor><declaration_preprocessor>,</declaration_preprocessor> <declaration_preprocessor>s</declaration_preprocessor><declaration_preprocessor>,</declaration_preprocessor> <declaration_preprocessor>v</declaration_preprocessor> <declaration_preprocessor>)</declaration_preprocessor> 
<declaration_preprocessor>#endif</declaration_preprocessor>  
</declaration>
<desc><p>Not all compiler support this attribute, so it may be defined
to nothing.
</p></desc>
</pdefine><pdefine id="//xsdoc_ref/c/macro/XS_INLINE" definetype="block" lang="c"><name>XS_INLINE</name>
<abstract><p>Standardization of the inline compiler keyword
</p></abstract>
<declaration><declaration_preprocessor>#if</declaration_preprocessor> <declaration_preprocessor>defined</declaration_preprocessor><declaration_preprocessor>(</declaration_preprocessor> <declaration_preprocessor>__GNUC__</declaration_preprocessor> <declaration_preprocessor>)</declaration_preprocessor> <declaration_preprocessor>&amp;</declaration_preprocessor><declaration_preprocessor>&amp;</declaration_preprocessor> <declaration_preprocessor>(</declaration_preprocessor> <declaration_preprocessor>__GNUC__</declaration_preprocessor> <declaration_preprocessor>==</declaration_preprocessor> <declaration_preprocessor>4</declaration_preprocessor> <declaration_preprocessor>)</declaration_preprocessor> <declaration_preprocessor>&amp;</declaration_preprocessor><declaration_preprocessor>&amp;</declaration_preprocessor> <declaration_preprocessor>!</declaration_preprocessor><declaration_preprocessor>defined</declaration_preprocessor><declaration_preprocessor>(</declaration_preprocessor> <declaration_preprocessor>DEBUG</declaration_preprocessor> <declaration_preprocessor>)</declaration_preprocessor> 
<declaration_preprocessor>#define</declaration_preprocessor> <declaration_preprocessor>XS_INLINE</declaration_preprocessor> <declaration_preprocessor>static</declaration_preprocessor> <declaration_preprocessor>__inline__</declaration_preprocessor> <declaration_preprocessor>__attribute__</declaration_preprocessor><declaration_preprocessor>(</declaration_preprocessor> <declaration_preprocessor>(</declaration_preprocessor> <declaration_preprocessor>always_inline</declaration_preprocessor> <declaration_preprocessor>)</declaration_preprocessor> <declaration_preprocessor>)</declaration_preprocessor> 
<declaration_preprocessor>#else</declaration_preprocessor> 
<declaration_preprocessor>#if</declaration_preprocessor> <declaration_preprocessor>defined</declaration_preprocessor><declaration_preprocessor>(</declaration_preprocessor> <declaration_preprocessor>__GNUC__</declaration_preprocessor> <declaration_preprocessor>)</declaration_preprocessor> 
<declaration_preprocessor>#define</declaration_preprocessor> <declaration_preprocessor>XS_INLINE</declaration_preprocessor> <declaration_preprocessor>static</declaration_preprocessor> <declaration_preprocessor>__inline__</declaration_preprocessor> 
<declaration_preprocessor>#else</declaration_preprocessor> 
<declaration_preprocessor>#if</declaration_preprocessor> <declaration_preprocessor>defined</declaration_preprocessor><declaration_preprocessor>(</declaration_preprocessor> <declaration_preprocessor>__MWERKS__</declaration_preprocessor> <declaration_preprocessor>)</declaration_preprocessor> <declaration_preprocessor>|</declaration_preprocessor><declaration_preprocessor>|</declaration_preprocessor> <declaration_preprocessor>defined</declaration_preprocessor><declaration_preprocessor>(</declaration_preprocessor> <declaration_preprocessor>__cplusplus</declaration_preprocessor> <declaration_preprocessor>)</declaration_preprocessor> 
<declaration_preprocessor>#define</declaration_preprocessor> <declaration_preprocessor>XS_INLINE</declaration_preprocessor> <declaration_preprocessor>static</declaration_preprocessor> <declaration_preprocessor>inline</declaration_preprocessor> 
<declaration_preprocessor>#else</declaration_preprocessor> 
<declaration_preprocessor>#if</declaration_preprocessor> <declaration_preprocessor>defined</declaration_preprocessor><declaration_preprocessor>(</declaration_preprocessor> <declaration_preprocessor>_MSC_VER</declaration_preprocessor> <declaration_preprocessor>)</declaration_preprocessor> 
<declaration_preprocessor>#define</declaration_preprocessor> <declaration_preprocessor>XS_INLINE</declaration_preprocessor> <declaration_preprocessor>static</declaration_preprocessor> <declaration_preprocessor>__inline</declaration_preprocessor> 
<declaration_preprocessor>#else</declaration_preprocessor> 
<declaration_preprocessor>#define</declaration_preprocessor> <declaration_preprocessor>XS_INLINE</declaration_preprocessor> 
<declaration_preprocessor>#endif</declaration_preprocessor>  
<declaration_preprocessor>#endif</declaration_preprocessor>  
<declaration_preprocessor>#endif</declaration_preprocessor>  
<declaration_preprocessor>#endif</declaration_preprocessor>  
</declaration>
</pdefine><pdefine id="//xsdoc_ref/c/macro/XS_MAX" definetype="block" lang="c"><name>XS_MAX</name>
<abstract><p>Gets the maximum value of two values
</p></abstract>
<parameterlist>
<parameter><name>_a_</name><desc><p>The first value</p></desc></parameter>
<parameter><name>_b_</name><desc><p>The second value</p></desc></parameter>
</parameterlist>
<result><p>The maximum value of the two values
</p></result>
<declaration><declaration_preprocessor>#if</declaration_preprocessor> <declaration_preprocessor>!</declaration_preprocessor><declaration_preprocessor>defined</declaration_preprocessor><declaration_preprocessor>(</declaration_preprocessor> <declaration_preprocessor>__STRICT_ANSI__</declaration_preprocessor> <declaration_preprocessor>)</declaration_preprocessor> <declaration_preprocessor>&amp;</declaration_preprocessor><declaration_preprocessor>&amp;</declaration_preprocessor> <declaration_preprocessor>(</declaration_preprocessor> <declaration_preprocessor>defined</declaration_preprocessor><declaration_preprocessor>(</declaration_preprocessor> <declaration_preprocessor>__GNUC__</declaration_preprocessor> <declaration_preprocessor>)</declaration_preprocessor> <declaration_preprocessor>|</declaration_preprocessor><declaration_preprocessor>|</declaration_preprocessor> <declaration_preprocessor>defined</declaration_preprocessor><declaration_preprocessor>(</declaration_preprocessor> <declaration_preprocessor>__clang__</declaration_preprocessor> <declaration_preprocessor>)</declaration_preprocessor> <declaration_preprocessor>)</declaration_preprocessor> 
<declaration_preprocessor>#define</declaration_preprocessor> <declaration_preprocessor>XS_MAX</declaration_preprocessor><declaration_preprocessor>(</declaration_preprocessor> <declaration_preprocessor>_a_</declaration_preprocessor><declaration_preprocessor>,</declaration_preprocessor> <declaration_preprocessor>_b_</declaration_preprocessor> <declaration_preprocessor>)</declaration_preprocessor> <declaration_preprocessor>(</declaration_preprocessor> <declaration_preprocessor>\</declaration_preprocessor> 
    <declaration_preprocessor>{</declaration_preprocessor> <declaration_preprocessor>\</declaration_preprocessor> 
    <declaration_preprocessor>__typeof__</declaration_preprocessor><declaration_preprocessor>(</declaration_preprocessor> <declaration_preprocessor>_a_</declaration_preprocessor> <declaration_preprocessor>)</declaration_preprocessor> <declaration_preprocessor>__a</declaration_preprocessor><declaration_preprocessor>;</declaration_preprocessor> <declaration_preprocessor>\</declaration_preprocessor> 
    <declaration_preprocessor>__typeof__</declaration_preprocessor><declaration_preprocessor>(</declaration_preprocessor> <declaration_preprocessor>_b_</declaration_preprocessor> <declaration_preprocessor>)</declaration_preprocessor> <declaration_preprocessor>__b</declaration_preprocessor><declaration_preprocessor>;</declaration_preprocessor> <declaration_preprocessor>\</declaration_preprocessor> 
    <declaration_preprocessor>__a</declaration_preprocessor> <declaration_preprocessor>=</declaration_preprocessor> <declaration_preprocessor>(</declaration_preprocessor> <declaration_preprocessor>_a_</declaration_preprocessor> <declaration_preprocessor>)</declaration_preprocessor><declaration_preprocessor>;</declaration_preprocessor> <declaration_preprocessor>\</declaration_preprocessor> 
    <declaration_preprocessor>__b</declaration_preprocessor> <declaration_preprocessor>=</declaration_preprocessor> <declaration_preprocessor>(</declaration_preprocessor> <declaration_preprocessor>_b_</declaration_preprocessor> <declaration_preprocessor>)</declaration_preprocessor><declaration_preprocessor>;</declaration_preprocessor> <declaration_preprocessor>\</declaration_preprocessor> 
    <declaration_preprocessor>(</declaration_preprocessor> <declaration_preprocessor>__a</declaration_preprocessor> <declaration_preprocessor>&lt;</declaration_preprocessor> <declaration_preprocessor>__b</declaration_preprocessor> <declaration_preprocessor>)</declaration_preprocessor> <declaration_preprocessor>?</declaration_preprocessor> <declaration_preprocessor>__b</declaration_preprocessor> <declaration_preprocessor>:</declaration_preprocessor> <declaration_preprocessor>__a</declaration_preprocessor><declaration_preprocessor>;</declaration_preprocessor> <declaration_preprocessor>\</declaration_preprocessor> 
    <declaration_preprocessor>}</declaration_preprocessor> <declaration_preprocessor>)</declaration_preprocessor> 
<declaration_preprocessor>#else</declaration_preprocessor> 
<declaration_preprocessor>#define</declaration_preprocessor> <declaration_preprocessor>XS_MAX</declaration_preprocessor><declaration_preprocessor>(</declaration_preprocessor> <declaration_preprocessor>_a_</declaration_preprocessor><declaration_preprocessor>,</declaration_preprocessor> <declaration_preprocessor>_b_</declaration_preprocessor> <declaration_preprocessor>)</declaration_preprocessor> <declaration_preprocessor>(</declaration_preprocessor> <declaration_preprocessor>(</declaration_preprocessor> <declaration_preprocessor>(</declaration_preprocessor> <declaration_preprocessor>_a_</declaration_preprocessor> <declaration_preprocessor>)</declaration_preprocessor> <declaration_preprocessor>&gt;</declaration_preprocessor> <declaration_preprocessor>(</declaration_preprocessor> <declaration_preprocessor>_b_</declaration_preprocessor> <declaration_preprocessor>)</declaration_preprocessor> <declaration_preprocessor>)</declaration_preprocessor> <declaration_preprocessor>?</declaration_preprocessor> <declaration_preprocessor>(</declaration_preprocessor> <declaration_preprocessor>_a_</declaration_preprocessor> <declaration_preprocessor>)</declaration_preprocessor> <declaration_preprocessor>:</declaration_preprocessor> <declaration_preprocessor>(</declaration_preprocessor> <declaration_preprocessor>_b_</declaration_preprocessor> <declaration_preprocessor>)</declaration_preprocessor> <declaration_preprocessor>)</declaration_preprocessor> 
<declaration_preprocessor>#endif</declaration_preprocessor>  
</declaration>
</pdefine><pdefine id="//xsdoc_ref/c/macro/XS_MIN" definetype="block" lang="c"><name>XS_MIN</name>
<abstract><p>Gets the minimum value of two values
</p></abstract>
<parameterlist>
<parameter><name>_a_</name><desc><p>The first value</p></desc></parameter>
<parameter><name>_b_</name><desc><p>The second value</p></desc></parameter>
</parameterlist>
<result><p>The minimum value of the two values
</p></result>
<declaration><declaration_preprocessor>#if</declaration_preprocessor> <declaration_preprocessor>!</declaration_preprocessor><declaration_preprocessor>defined</declaration_preprocessor><declaration_preprocessor>(</declaration_preprocessor> <declaration_preprocessor>__STRICT_ANSI__</declaration_preprocessor> <declaration_preprocessor>)</declaration_preprocessor> <declaration_preprocessor>&amp;</declaration_preprocessor><declaration_preprocessor>&amp;</declaration_preprocessor> <declaration_preprocessor>(</declaration_preprocessor> <declaration_preprocessor>defined</declaration_preprocessor><declaration_preprocessor>(</declaration_preprocessor> <declaration_preprocessor>__GNUC__</declaration_preprocessor> <declaration_preprocessor>)</declaration_preprocessor> <declaration_preprocessor>|</declaration_preprocessor><declaration_preprocessor>|</declaration_preprocessor> <declaration_preprocessor>defined</declaration_preprocessor><declaration_preprocessor>(</declaration_preprocessor> <declaration_preprocessor>__clang__</declaration_preprocessor> <declaration_preprocessor>)</declaration_preprocessor> <declaration_preprocessor>)</declaration_preprocessor> 
<declaration_preprocessor>#define</declaration_preprocessor> <declaration_preprocessor>XS_MIN</declaration_preprocessor><declaration_preprocessor>(</declaration_preprocessor> <declaration_preprocessor>_a_</declaration_preprocessor><declaration_preprocessor>,</declaration_preprocessor> <declaration_preprocessor>_b_</declaration_preprocessor> <declaration_preprocessor>)</declaration_preprocessor> <declaration_preprocessor>(</declaration_preprocessor> <declaration_preprocessor>\</declaration_preprocessor> 
    <declaration_preprocessor>{</declaration_preprocessor> <declaration_preprocessor>\</declaration_preprocessor> 
    <declaration_preprocessor>__typeof__</declaration_preprocessor><declaration_preprocessor>(</declaration_preprocessor> <declaration_preprocessor>_a_</declaration_preprocessor> <declaration_preprocessor>)</declaration_preprocessor> <declaration_preprocessor>__a</declaration_preprocessor><declaration_preprocessor>;</declaration_preprocessor> <declaration_preprocessor>\</declaration_preprocessor> 
    <declaration_preprocessor>__typeof__</declaration_preprocessor><declaration_preprocessor>(</declaration_preprocessor> <declaration_preprocessor>_b_</declaration_preprocessor> <declaration_preprocessor>)</declaration_preprocessor> <declaration_preprocessor>__b</declaration_preprocessor><declaration_preprocessor>;</declaration_preprocessor> <declaration_preprocessor>\</declaration_preprocessor> 
    <declaration_preprocessor>__a</declaration_preprocessor> <declaration_preprocessor>=</declaration_preprocessor> <declaration_preprocessor>(</declaration_preprocessor> <declaration_preprocessor>_a_</declaration_preprocessor> <declaration_preprocessor>)</declaration_preprocessor><declaration_preprocessor>;</declaration_preprocessor> <declaration_preprocessor>\</declaration_preprocessor> 
    <declaration_preprocessor>__b</declaration_preprocessor> <declaration_preprocessor>=</declaration_preprocessor> <declaration_preprocessor>(</declaration_preprocessor> <declaration_preprocessor>_b_</declaration_preprocessor> <declaration_preprocessor>)</declaration_preprocessor><declaration_preprocessor>;</declaration_preprocessor> <declaration_preprocessor>\</declaration_preprocessor> 
    <declaration_preprocessor>(</declaration_preprocessor> <declaration_preprocessor>__a</declaration_preprocessor> <declaration_preprocessor>&lt;</declaration_preprocessor> <declaration_preprocessor>__b</declaration_preprocessor> <declaration_preprocessor>)</declaration_preprocessor> <declaration_preprocessor>?</declaration_preprocessor> <declaration_preprocessor>__a</declaration_preprocessor> <declaration_preprocessor>:</declaration_preprocessor> <declaration_preprocessor>__b</declaration_preprocessor><declaration_preprocessor>;</declaration_preprocessor> <declaration_preprocessor>\</declaration_preprocessor> 
    <declaration_preprocessor>}</declaration_preprocessor> <declaration_preprocessor>)</declaration_preprocessor> 
<declaration_preprocessor>#else</declaration_preprocessor> 
<declaration_preprocessor>#define</declaration_preprocessor> <declaration_preprocessor>XS_MIN</declaration_preprocessor><declaration_preprocessor>(</declaration_preprocessor> <declaration_preprocessor>_a_</declaration_preprocessor><declaration_preprocessor>,</declaration_preprocessor> <declaration_preprocessor>_b_</declaration_preprocessor> <declaration_preprocessor>)</declaration_preprocessor> <declaration_preprocessor>(</declaration_preprocessor> <declaration_preprocessor>(</declaration_preprocessor> <declaration_preprocessor>(</declaration_preprocessor> <declaration_preprocessor>_a_</declaration_preprocessor> <declaration_preprocessor>)</declaration_preprocessor> <declaration_preprocessor>&lt;</declaration_preprocessor> <declaration_preprocessor>(</declaration_preprocessor> <declaration_preprocessor>_b_</declaration_preprocessor> <declaration_preprocessor>)</declaration_preprocessor> <declaration_preprocessor>)</declaration_preprocessor> <declaration_preprocessor>?</declaration_preprocessor> <declaration_preprocessor>(</declaration_preprocessor> <declaration_preprocessor>_a_</declaration_preprocessor> <declaration_preprocessor>)</declaration_preprocessor> <declaration_preprocessor>:</declaration_preprocessor> <declaration_preprocessor>(</declaration_preprocessor> <declaration_preprocessor>_b_</declaration_preprocessor> <declaration_preprocessor>)</declaration_preprocessor> <declaration_preprocessor>)</declaration_preprocessor> 
<declaration_preprocessor>#endif</declaration_preprocessor>  
</declaration>
</pdefine><pdefine id="//xsdoc_ref/c/macro/XS_NORETURN_ATTRIBUTE" definetype="block" lang="c"><name>XS_NORETURN_ATTRIBUTE</name>
<abstract><p>Standardization of the noreturn compiler attribute
</p></abstract>
<declaration><declaration_preprocessor>#if</declaration_preprocessor> <declaration_preprocessor>defined</declaration_preprocessor><declaration_preprocessor>(</declaration_preprocessor> <declaration_preprocessor>__GNUC__</declaration_preprocessor> <declaration_preprocessor>)</declaration_preprocessor> <declaration_preprocessor>&amp;</declaration_preprocessor><declaration_preprocessor>&amp;</declaration_preprocessor> <declaration_preprocessor>(</declaration_preprocessor> <declaration_preprocessor>(</declaration_preprocessor> <declaration_preprocessor>__GNUC__</declaration_preprocessor> <declaration_preprocessor>&gt;=</declaration_preprocessor> <declaration_preprocessor>4</declaration_preprocessor> <declaration_preprocessor>)</declaration_preprocessor> <declaration_preprocessor>|</declaration_preprocessor><declaration_preprocessor>|</declaration_preprocessor> <declaration_preprocessor>(</declaration_preprocessor> <declaration_preprocessor>(</declaration_preprocessor> <declaration_preprocessor>__GNUC__</declaration_preprocessor> <declaration_preprocessor>==</declaration_preprocessor> <declaration_preprocessor>3</declaration_preprocessor> <declaration_preprocessor>)</declaration_preprocessor> <declaration_preprocessor>&amp;</declaration_preprocessor><declaration_preprocessor>&amp;</declaration_preprocessor> <declaration_preprocessor>(</declaration_preprocessor> <declaration_preprocessor>__GNUC_MINOR__</declaration_preprocessor> <declaration_preprocessor>&gt;=</declaration_preprocessor> <declaration_preprocessor>1</declaration_preprocessor> <declaration_preprocessor>)</declaration_preprocessor> <declaration_preprocessor>)</declaration_preprocessor> <declaration_preprocessor>)</declaration_preprocessor> 
<declaration_preprocessor>#define</declaration_preprocessor> <declaration_preprocessor>XS_NORETURN_ATTRIBUTE</declaration_preprocessor> <declaration_preprocessor>__attribute__</declaration_preprocessor><declaration_preprocessor>(</declaration_preprocessor> <declaration_preprocessor>(</declaration_preprocessor> <declaration_preprocessor>noreturn</declaration_preprocessor> <declaration_preprocessor>)</declaration_preprocessor> <declaration_preprocessor>)</declaration_preprocessor> 
<declaration_preprocessor>#else</declaration_preprocessor> 
<declaration_preprocessor>#define</declaration_preprocessor> <declaration_preprocessor>XS_NORETURN_ATTRIBUTE</declaration_preprocessor> 
<declaration_preprocessor>#endif</declaration_preprocessor>  
</declaration>
<desc><p>Not all compiler support this attribute, so it may be defined
to nothing.
</p></desc>
</pdefine><pdefine id="//xsdoc_ref/c/macro/XS_PATH_MAX" definetype="block" lang="c"><name>XS_PATH_MAX</name>
<abstract><p>Maximum length for a path
</p></abstract>
<declaration><declaration_preprocessor>#if</declaration_preprocessor> <declaration_preprocessor>defined</declaration_preprocessor><declaration_preprocessor>(</declaration_preprocessor> <declaration_preprocessor>_WIN32</declaration_preprocessor> <declaration_preprocessor>)</declaration_preprocessor> 
<declaration_preprocessor>#define</declaration_preprocessor> <declaration_preprocessor>XS_PATH_MAX</declaration_preprocessor> <declaration_preprocessor>MAX_PATH</declaration_preprocessor> 
<declaration_preprocessor>#else</declaration_preprocessor> 
<declaration_preprocessor>#define</declaration_preprocessor> <declaration_preprocessor>XS_PATH_MAX</declaration_preprocessor> <declaration_preprocessor>PATH_MAX</declaration_preprocessor> 
<declaration_preprocessor>#endif</declaration_preprocessor>  
</declaration>
</pdefine><pdefine id="//xsdoc_ref/c/macro/XS_PATH_SEPARATOR" definetype="block" lang="c"><name>XS_PATH_SEPARATOR</name>
<abstract><p>The separator character used in paths
</p></abstract>
<declaration><declaration_preprocessor>#if</declaration_preprocessor> <declaration_preprocessor>defined</declaration_preprocessor><declaration_preprocessor>(</declaration_preprocessor> <declaration_preprocessor>_WIN32</declaration_preprocessor> <declaration_preprocessor>)</declaration_preprocessor> 
<declaration_preprocessor>#define</declaration_preprocessor> <declaration_preprocessor>XS_PATH_SEPARATOR</declaration_preprocessor> <declaration_preprocessor>'</declaration_preprocessor><declaration_preprocessor>\</declaration_preprocessor><declaration_preprocessor>\</declaration_preprocessor><declaration_preprocessor>'</declaration_preprocessor> 
<declaration_preprocessor>#else</declaration_preprocessor> 
<declaration_preprocessor>#define</declaration_preprocessor> <declaration_preprocessor>XS_PATH_SEPARATOR</declaration_preprocessor> <declaration_preprocessor>'</declaration_preprocessor><declaration_preprocessor>/</declaration_preprocessor><declaration_preprocessor>'</declaration_preprocessor> 
<declaration_preprocessor>#endif</declaration_preprocessor>  
</declaration>
</pdefine><pdefine id="//xsdoc_ref/c/macro/XS_SWAP_16" definetype="function" lang="c"><name>XS_SWAP_16</name>
<abstract><p>Swap endiannes of a 16 bits value
</p></abstract>
<parameterlist>
<parameter><name>_value_</name><desc><p>The value to swap</p></desc></parameter>
</parameterlist>
<parsedparameterlist>
<parsedparameter><type></type><name>_value_</name></parsedparameter>
</parsedparameterlist>
<declaration><declaration_preprocessor>#define</declaration_preprocessor> <declaration_preprocessor>XS_SWAP_16</declaration_preprocessor><declaration_preprocessor>(</declaration_preprocessor> <declaration_preprocessor>_value_</declaration_preprocessor> <declaration_preprocessor>)</declaration_preprocessor> <declaration_preprocessor>(</declaration_preprocessor> <declaration_preprocessor>(</declaration_preprocessor> <declaration_preprocessor>(</declaration_preprocessor> <declaration_preprocessor>(</declaration_preprocessor> <declaration_preprocessor>uint16_t</declaration_preprocessor> <declaration_preprocessor>)</declaration_preprocessor><declaration_preprocessor>(</declaration_preprocessor> <declaration_preprocessor>_value_</declaration_preprocessor> <declaration_preprocessor>)</declaration_preprocessor> <declaration_preprocessor>&gt;&gt;</declaration_preprocessor> <declaration_preprocessor>8</declaration_preprocessor> <declaration_preprocessor>)</declaration_preprocessor> <declaration_preprocessor>&amp;</declaration_preprocessor> <declaration_preprocessor>0x00FF</declaration_preprocessor> <declaration_preprocessor>)</declaration_preprocessor> <declaration_preprocessor>|</declaration_preprocessor> <declaration_preprocessor>(</declaration_preprocessor> <declaration_preprocessor>(</declaration_preprocessor> <declaration_preprocessor>(</declaration_preprocessor> <declaration_preprocessor>uint16_t</declaration_preprocessor> <declaration_preprocessor>)</declaration_preprocessor><declaration_preprocessor>(</declaration_preprocessor> <declaration_preprocessor>_value_</declaration_preprocessor> <declaration_preprocessor>)</declaration_preprocessor> <declaration_preprocessor>&lt;&lt;</declaration_preprocessor> <declaration_preprocessor>8</declaration_preprocessor> <declaration_preprocessor>)</declaration_preprocessor> <declaration_preprocessor>&amp;</declaration_preprocessor> <declaration_preprocessor>0xFF00</declaration_preprocessor> <declaration_preprocessor>)</declaration_preprocessor> <declaration_preprocessor>)</declaration_preprocessor> </declaration>
</pdefine><pdefine id="//xsdoc_ref/c/macro/XS_SWAP_32" definetype="function" lang="c"><name>XS_SWAP_32</name>
<abstract><p>Swap endiannes of a 32 bits value
</p></abstract>
<parameterlist>
<parameter><name>_value_</name><desc><p>The value to swap</p></desc></parameter>
</parameterlist>
<parsedparameterlist>
<parsedparameter><type></type><name>_value_</name></parsedparameter>
</parsedparameterlist>
<declaration><declaration_preprocessor>#define</declaration_preprocessor> <declaration_preprocessor>XS_SWAP_32</declaration_preprocessor><declaration_preprocessor>(</declaration_preprocessor> <declaration_preprocessor>_value_</declaration_preprocessor> <declaration_preprocessor>)</declaration_preprocessor> <declaration_preprocessor>(</declaration_preprocessor> <declaration_preprocessor>(</declaration_preprocessor> <declaration_preprocessor>(</declaration_preprocessor> <declaration_preprocessor>(</declaration_preprocessor> <declaration_preprocessor>uint32_t</declaration_preprocessor> <declaration_preprocessor>)</declaration_preprocessor><declaration_preprocessor>(</declaration_preprocessor> <declaration_preprocessor>_value_</declaration_preprocessor> <declaration_preprocessor>)</declaration_preprocessor> <declaration_preprocessor>&gt;&gt;</declaration_preprocessor> <declaration_preprocessor>24</declaration_preprocessor> <declaration_preprocessor>)</declaration_preprocessor> <declaration_preprocessor>&amp;</declaration_preprocessor> <declaration_preprocessor>0x000000FF</declaration_preprocessor> <declaration_preprocessor>)</declaration_preprocessor> <declaration_preprocessor>|</declaration_preprocessor> <declaration_preprocessor>(</declaration_preprocessor> <declaration_preprocessor>(</declaration_preprocessor> <declaration_preprocessor>(</declaration_preprocessor> <declaration_preprocessor>uint32_t</declaration_preprocessor> <declaration_preprocessor>)</declaration_preprocessor><declaration_preprocessor>(</declaration_preprocessor> <declaration_preprocessor>_value_</declaration_preprocessor> <declaration_preprocessor>)</declaration_preprocessor> <declaration_preprocessor>&gt;&gt;</declaration_preprocessor> <declaration_preprocessor>8</declaration_preprocessor> <declaration_preprocessor>)</declaration_preprocessor> <declaration_preprocessor>&amp;</declaration_preprocessor> <declaration_preprocessor>0x0000FF00</declaration_preprocessor> <declaration_preprocessor>)</declaration_preprocessor> <declaration_preprocessor>|</declaration_preprocessor> <declaration_preprocessor>(</declaration_preprocessor> <declaration_preprocessor>(</declaration_preprocessor> <declaration_preprocessor>(</declaration_preprocessor> <declaration_preprocessor>uint32_t</declaration_preprocessor> <declaration_preprocessor>)</declaration_preprocessor><declaration_preprocessor>(</declaration_preprocessor> <declaration_preprocessor>_value_</declaration_preprocessor> <declaration_preprocessor>)</declaration_preprocessor> <declaration_preprocessor>&lt;&lt;</declaration_preprocessor> <declaration_preprocessor>8</declaration_preprocessor> <declaration_preprocessor>)</declaration_preprocessor> <declaration_preprocessor>&amp;</declaration_preprocessor> <declaration_preprocessor>0x00FF0000</declaration_preprocessor> <declaration_preprocessor>)</declaration_preprocessor> <declaration_preprocessor>|</declaration_preprocessor> <declaration_preprocessor>(</declaration_preprocessor> <declaration_preprocessor>(</declaration_preprocessor> <declaration_preprocessor>(</declaration_preprocessor> <declaration_preprocessor>uint32_t</declaration_preprocessor> <declaration_preprocessor>)</declaration_preprocessor><declaration_preprocessor>(</declaration_preprocessor> <declaration_preprocessor>_value_</declaration_preprocessor> <declaration_preprocessor>)</declaration_preprocessor> <declaration_preprocessor>&lt;&lt;</declaration_preprocessor> <declaration_preprocessor>24</declaration_preprocessor> <declaration_preprocessor>)</declaration_preprocessor> <declaration_preprocessor>&amp;</declaration_preprocessor> <declaration_preprocessor>0xFF000000</declaration_preprocessor> <declaration_preprocessor>)</declaration_preprocessor> <declaration_preprocessor>)</declaration_preprocessor> </declaration>
</pdefine><pdefine id="//xsdoc_ref/c/macro/XS_SWAP_64" definetype="function" lang="c"><name>XS_SWAP_64</name>
<abstract><p>Swap endiannes of a 64 bits value
</p></abstract>
<parameterlist>
<parameter><name>_value_</name><desc><p>The value to swap</p></desc></parameter>
</parameterlist>
<parsedparameterlist>
<parsedparameter><type></type><name>_value_</name></parsedparameter>
</parsedparameterlist>
<declaration><declaration_preprocessor>#define</declaration_preprocessor> <declaration_preprocessor>XS_SWAP_64</declaration_preprocessor><declaration_preprocessor>(</declaration_preprocessor> <declaration_preprocessor>_value_</declaration_preprocessor> <declaration_preprocessor>)</declaration_preprocessor> <declaration_preprocessor>(</declaration_preprocessor> <declaration_preprocessor>(</declaration_preprocessor> <declaration_preprocessor>(</declaration_preprocessor> <declaration_preprocessor>(</declaration_preprocessor> <declaration_preprocessor>uint64_t</declaration_preprocessor> <declaration_preprocessor>)</declaration_preprocessor><declaration_preprocessor>(</declaration_preprocessor> <declaration_preprocessor>_value_</declaration_preprocessor> <declaration_preprocessor>)</declaration_preprocessor> <declaration_preprocessor>&gt;&gt;</declaration_preprocessor> <declaration_preprocessor>56</declaration_preprocessor> <declaration_preprocessor>)</declaration_preprocessor> <declaration_preprocessor>&amp;</declaration_preprocessor> <declaration_preprocessor>0x00000000000000FFULL</declaration_preprocessor> <declaration_preprocessor>)</declaration_preprocessor> <declaration_preprocessor>|</declaration_preprocessor> <declaration_preprocessor>(</declaration_preprocessor> <declaration_preprocessor>(</declaration_preprocessor> <declaration_preprocessor>(</declaration_preprocessor> <declaration_preprocessor>uint64_t</declaration_preprocessor> <declaration_preprocessor>)</declaration_preprocessor><declaration_preprocessor>(</declaration_preprocessor> <declaration_preprocessor>_value_</declaration_preprocessor> <declaration_preprocessor>)</declaration_preprocessor> <declaration_preprocessor>&gt;&gt;</declaration_preprocessor> <declaration_preprocessor>40</declaration_preprocessor> <declaration_preprocessor>)</declaration_preprocessor> <declaration_preprocessor>&amp;</declaration_preprocessor> <declaration_preprocessor>0x000000000000FF00ULL</declaration_preprocessor> <declaration_preprocessor>)</declaration_preprocessor> <declaration_preprocessor>|</declaration_preprocessor> <declaration_preprocessor>(</declaration_preprocessor> <declaration_preprocessor>(</declaration_preprocessor> <declaration_preprocessor>(</declaration_preprocessor> <declaration_preprocessor>uint64_t</declaration_preprocessor> <declaration_preprocessor>)</declaration_preprocessor><declaration_preprocessor>(</declaration_preprocessor> <declaration_preprocessor>_value_</declaration_preprocessor> <declaration_preprocessor>)</declaration_preprocessor> <declaration_preprocessor>&gt;&gt;</declaration_preprocessor> <declaration_preprocessor>24</declaration_preprocessor> <declaration_preprocessor>)</declaration_preprocessor> <declaration_preprocessor>&amp;</declaration_preprocessor> <declaration_preprocessor>0x0000000000FF0000ULL</declaration_preprocessor> <declaration_preprocessor>)</declaration_preprocessor> <declaration_preprocessor>|</declaration_preprocessor> <declaration_preprocessor>(</declaration_preprocessor> <declaration_preprocessor>(</declaration_preprocessor> <declaration_preprocessor>(</declaration_preprocessor> <declaration_preprocessor>uint64_t</declaration_preprocessor> <declaration_preprocessor>)</declaration_preprocessor><declaration_preprocessor>(</declaration_preprocessor> <declaration_preprocessor>_value_</declaration_preprocessor> <declaration_preprocessor>)</declaration_preprocessor> <declaration_preprocessor>&gt;&gt;</declaration_preprocessor> <declaration_preprocessor>8</declaration_preprocessor> <declaration_preprocessor>)</declaration_preprocessor> <declaration_preprocessor>&amp;</declaration_preprocessor> <declaration_preprocessor>0x00000000FF000000ULL</declaration_preprocessor> <declaration_preprocessor>)</declaration_preprocessor> <declaration_preprocessor>|</declaration_preprocessor> <declaration_preprocessor>(</declaration_preprocessor> <declaration_preprocessor>(</declaration_preprocessor> <declaration_preprocessor>(</declaration_preprocessor> <declaration_preprocessor>uint64_t</declaration_preprocessor> <declaration_preprocessor>)</declaration_preprocessor><declaration_preprocessor>(</declaration_preprocessor> <declaration_preprocessor>_value_</declaration_preprocessor> <declaration_preprocessor>)</declaration_preprocessor> <declaration_preprocessor>&lt;&lt;</declaration_preprocessor> <declaration_preprocessor>8</declaration_preprocessor> <declaration_preprocessor>)</declaration_preprocessor> <declaration_preprocessor>&amp;</declaration_preprocessor> <declaration_preprocessor>0x000000FF00000000ULL</declaration_preprocessor> <declaration_preprocessor>)</declaration_preprocessor> <declaration_preprocessor>|</declaration_preprocessor> <declaration_preprocessor>(</declaration_preprocessor> <declaration_preprocessor>(</declaration_preprocessor> <declaration_preprocessor>(</declaration_preprocessor> <declaration_preprocessor>uint64_t</declaration_preprocessor> <declaration_preprocessor>)</declaration_preprocessor><declaration_preprocessor>(</declaration_preprocessor> <declaration_preprocessor>_value_</declaration_preprocessor> <declaration_preprocessor>)</declaration_preprocessor> <declaration_preprocessor>&lt;&lt;</declaration_preprocessor> <declaration_preprocessor>24</declaration_preprocessor> <declaration_preprocessor>)</declaration_preprocessor> <declaration_preprocessor>&amp;</declaration_preprocessor> <declaration_preprocessor>0x0000FF0000000000ULL</declaration_preprocessor> <declaration_preprocessor>)</declaration_preprocessor> <declaration_preprocessor>|</declaration_preprocessor> <declaration_preprocessor>(</declaration_preprocessor> <declaration_preprocessor>(</declaration_preprocessor> <declaration_preprocessor>(</declaration_preprocessor> <declaration_preprocessor>uint64_t</declaration_preprocessor> <declaration_preprocessor>)</declaration_preprocessor><declaration_preprocessor>(</declaration_preprocessor> <declaration_preprocessor>_value_</declaration_preprocessor> <declaration_preprocessor>)</declaration_preprocessor> <declaration_preprocessor>&lt;&lt;</declaration_preprocessor> <declaration_preprocessor>40</declaration_preprocessor> <declaration_preprocessor>)</declaration_preprocessor> <declaration_preprocessor>&amp;</declaration_preprocessor> <declaration_preprocessor>0x00FF000000000000ULL</declaration_preprocessor> <declaration_preprocessor>)</declaration_preprocessor> <declaration_preprocessor>|</declaration_preprocessor> <declaration_preprocessor>(</declaration_preprocessor> <declaration_preprocessor>(</declaration_preprocessor> <declaration_preprocessor>(</declaration_preprocessor> <declaration_preprocessor>uint64_t</declaration_preprocessor> <declaration_preprocessor>)</declaration_preprocessor><declaration_preprocessor>(</declaration_preprocessor> <declaration_preprocessor>_value_</declaration_preprocessor> <declaration_preprocessor>)</declaration_preprocessor> <declaration_preprocessor>&lt;&lt;</declaration_preprocessor> <declaration_preprocessor>56</declaration_preprocessor> <declaration_preprocessor>)</declaration_preprocessor> <declaration_preprocessor>&amp;</declaration_preprocessor> <declaration_preprocessor>0xFF00000000000000ULL</declaration_preprocessor> <declaration_preprocessor>)</declaration_preprocessor> <declaration_preprocessor>)</declaration_preprocessor> </declaration>
</pdefine><pdefine id="//xsdoc_ref/c/macro/XS_UNAVAILABLE_ATTRIBUTE" definetype="block" lang="c"><name>XS_UNAVAILABLE_ATTRIBUTE</name>
<abstract><p>Standardization of the unavailable compiler attribute
</p></abstract>
<declaration><declaration_preprocessor>#if</declaration_preprocessor> <declaration_preprocessor>defined</declaration_preprocessor><declaration_preprocessor>(</declaration_preprocessor> <declaration_preprocessor>__GNUC__</declaration_preprocessor> <declaration_preprocessor>)</declaration_preprocessor> <declaration_preprocessor>&amp;</declaration_preprocessor><declaration_preprocessor>&amp;</declaration_preprocessor> <declaration_preprocessor>(</declaration_preprocessor> <declaration_preprocessor>(</declaration_preprocessor> <declaration_preprocessor>__GNUC__</declaration_preprocessor> <declaration_preprocessor>&gt;=</declaration_preprocessor> <declaration_preprocessor>4</declaration_preprocessor> <declaration_preprocessor>)</declaration_preprocessor> <declaration_preprocessor>|</declaration_preprocessor><declaration_preprocessor>|</declaration_preprocessor> <declaration_preprocessor>(</declaration_preprocessor> <declaration_preprocessor>(</declaration_preprocessor> <declaration_preprocessor>__GNUC__</declaration_preprocessor> <declaration_preprocessor>==</declaration_preprocessor> <declaration_preprocessor>3</declaration_preprocessor> <declaration_preprocessor>)</declaration_preprocessor> <declaration_preprocessor>&amp;</declaration_preprocessor><declaration_preprocessor>&amp;</declaration_preprocessor> <declaration_preprocessor>(</declaration_preprocessor> <declaration_preprocessor>__GNUC_MINOR__</declaration_preprocessor> <declaration_preprocessor>&gt;=</declaration_preprocessor> <declaration_preprocessor>1</declaration_preprocessor> <declaration_preprocessor>)</declaration_preprocessor> <declaration_preprocessor>)</declaration_preprocessor> <declaration_preprocessor>)</declaration_preprocessor> 
<declaration_preprocessor>#define</declaration_preprocessor> <declaration_preprocessor>XS_UNAVAILABLE_ATTRIBUTE</declaration_preprocessor> <declaration_preprocessor>__attribute__</declaration_preprocessor><declaration_preprocessor>(</declaration_preprocessor> <declaration_preprocessor>(</declaration_preprocessor> <declaration_preprocessor>unavailable</declaration_preprocessor> <declaration_preprocessor>)</declaration_preprocessor> <declaration_preprocessor>)</declaration_preprocessor> 
<declaration_preprocessor>#else</declaration_preprocessor> 
<declaration_preprocessor>#define</declaration_preprocessor> <declaration_preprocessor>XS_UNAVAILABLE_ATTRIBUTE</declaration_preprocessor> 
<declaration_preprocessor>#endif</declaration_preprocessor>  
</declaration>
<desc><p>Not all compiler support this attribute, so it may be defined
to nothing.
</p></desc>
</pdefine><pdefine id="//xsdoc_ref/c/macro/XS_VERSION" definetype="value" lang="c"><name>XS_VERSION</name>
<abstract><p>XSFoundation version number
</p></abstract>
<declaration><declaration_preprocessor>#define</declaration_preprocessor> <declaration_preprocessor>XS_VERSION</declaration_preprocessor> <declaration_preprocessor>(</declaration_preprocessor> <declaration_preprocessor>XS_VERS_MAJ</declaration_preprocessor> <declaration_preprocessor>*</declaration_preprocessor> <declaration_preprocessor>1000000</declaration_preprocessor> <declaration_preprocessor>+</declaration_preprocessor> <declaration_preprocessor>XS_VERS_MIN</declaration_preprocessor> <declaration_preprocessor>*</declaration_preprocessor> <declaration_preprocessor>10000</declaration_preprocessor> <declaration_preprocessor>+</declaration_preprocessor> <declaration_preprocessor>XS_VERS_BUG</declaration_preprocessor> <declaration_preprocessor>*</declaration_preprocessor> <declaration_preprocessor>100</declaration_preprocessor> <declaration_preprocessor>+</declaration_preprocessor> <declaration_preprocessor>XS_VERS_PATCH</declaration_preprocessor> <declaration_preprocessor>)</declaration_preprocessor> </declaration>
</pdefine><pdefine id="//xsdoc_ref/c/macro/XS_VERSION_BUGFIX" definetype="value" lang="c"><name>XS_VERSION_BUGFIX</name>
<abstract><p>XSFoundation bugfix version number
</p></abstract>
<declaration><declaration_preprocessor>#define</declaration_preprocessor> <declaration_preprocessor>XS_VERSION_BUGFIX</declaration_preprocessor> <declaration_preprocessor>0</declaration_preprocessor> </declaration>
</pdefine><pdefine id="//xsdoc_ref/c/macro/XS_VERSION_MAJ" definetype="value" lang="c"><name>XS_VERSION_MAJ</name>
<abstract><p>XSFoundation major version number
</p></abstract>
<declaration><declaration_preprocessor>#define</declaration_preprocessor> <declaration_preprocessor>XS_VERSION_MAJ</declaration_preprocessor> <declaration_preprocessor>1</declaration_preprocessor> </declaration>
</pdefine><pdefine id="//xsdoc_ref/c/macro/XS_VERSION_MIN" definetype="value" lang="c"><name>XS_VERSION_MIN</name>
<abstract><p>XSFoundation minor version number
</p></abstract>
<declaration><declaration_preprocessor>#define</declaration_preprocessor> <declaration_preprocessor>XS_VERSION_MIN</declaration_preprocessor> <declaration_preprocessor>0</declaration_preprocessor> </declaration>
</pdefine><pdefine id="//xsdoc_ref/c/macro/XS_VERSION_PATCH" definetype="value" lang="c"><name>XS_VERSION_PATCH</name>
<abstract><p>XSFoundation patch level version number
</p></abstract>
<declaration><declaration_preprocessor>#define</declaration_preprocessor> <declaration_preprocessor>XS_VERSION_PATCH</declaration_preprocessor> <declaration_preprocessor>0</declaration_preprocessor> </declaration>
</pdefine><pdefine id="//xsdoc_ref/c/macro/XS_VERSION_STR" definetype="value" lang="c"><name>XS_VERSION_STR</name>
<abstract><p>XSFoundation version number string
</p></abstract>
<declaration><declaration_preprocessor>#define</declaration_preprocessor> <declaration_preprocessor>XS_VERSION_STR</declaration_preprocessor> <declaration_preprocessor>"</declaration_preprocessor><declaration_preprocessor>1</declaration_preprocessor><declaration_preprocessor>.</declaration_preprocessor><declaration_preprocessor>0</declaration_preprocessor><declaration_preprocessor>.</declaration_preprocessor><declaration_preprocessor>0</declaration_preprocessor><declaration_preprocessor>-</declaration_preprocessor><declaration_preprocessor>0</declaration_preprocessor><declaration_preprocessor>"</declaration_preprocessor> </declaration>
</pdefine><pdefine id="//xsdoc_ref/c/macro/XS_WEAK_ATTRIBUTE" definetype="block" lang="c"><name>XS_WEAK_ATTRIBUTE</name>
<abstract><p>Standardization of the weak compiler attribute
</p></abstract>
<declaration><declaration_preprocessor>#if</declaration_preprocessor> <declaration_preprocessor>defined</declaration_preprocessor><declaration_preprocessor>(</declaration_preprocessor> <declaration_preprocessor>__GNUC__</declaration_preprocessor> <declaration_preprocessor>)</declaration_preprocessor> <declaration_preprocessor>&amp;</declaration_preprocessor><declaration_preprocessor>&amp;</declaration_preprocessor> <declaration_preprocessor>(</declaration_preprocessor> <declaration_preprocessor>(</declaration_preprocessor> <declaration_preprocessor>__GNUC__</declaration_preprocessor> <declaration_preprocessor>&gt;=</declaration_preprocessor> <declaration_preprocessor>4</declaration_preprocessor> <declaration_preprocessor>)</declaration_preprocessor> <declaration_preprocessor>|</declaration_preprocessor><declaration_preprocessor>|</declaration_preprocessor> <declaration_preprocessor>(</declaration_preprocessor> <declaration_preprocessor>(</declaration_preprocessor> <declaration_preprocessor>__GNUC__</declaration_preprocessor> <declaration_preprocessor>==</declaration_preprocessor> <declaration_preprocessor>3</declaration_preprocessor> <declaration_preprocessor>)</declaration_preprocessor> <declaration_preprocessor>&amp;</declaration_preprocessor><declaration_preprocessor>&amp;</declaration_preprocessor> <declaration_preprocessor>(</declaration_preprocessor> <declaration_preprocessor>__GNUC_MINOR__</declaration_preprocessor> <declaration_preprocessor>&gt;=</declaration_preprocessor> <declaration_preprocessor>1</declaration_preprocessor> <declaration_preprocessor>)</declaration_preprocessor> <declaration_preprocessor>)</declaration_preprocessor> <declaration_preprocessor>)</declaration_preprocessor> 
<declaration_preprocessor>#define</declaration_preprocessor> <declaration_preprocessor>XS_WEAK_ATTRIBUTE</declaration_preprocessor> <declaration_preprocessor>__attribute__</declaration_preprocessor><declaration_preprocessor>(</declaration_preprocessor> <declaration_preprocessor>(</declaration_preprocessor> <declaration_preprocessor>weak</declaration_preprocessor> <declaration_preprocessor>)</declaration_preprocessor> <declaration_preprocessor>)</declaration_preprocessor> 
<declaration_preprocessor>#else</declaration_preprocessor> 
<declaration_preprocessor>#define</declaration_preprocessor> <declaration_preprocessor>XS_WEAK_ATTRIBUTE</declaration_preprocessor> 
<declaration_preprocessor>#endif</declaration_preprocessor>  
</declaration>
<desc><p>Not all compiler support this attribute, so it may be defined
to nothing.
</p></desc>
</pdefine><pdefine id="//xsdoc_ref/c/macro/XS_WEAK_IMPORT_ATTRIBUTE" definetype="block" lang="c"><name>XS_WEAK_IMPORT_ATTRIBUTE</name>
<abstract><p>Standardization of the weak import compiler attribute
</p></abstract>
<declaration><declaration_preprocessor>#if</declaration_preprocessor> <declaration_preprocessor>defined</declaration_preprocessor><declaration_preprocessor>(</declaration_preprocessor> <declaration_preprocessor>__GNUC__</declaration_preprocessor> <declaration_preprocessor>)</declaration_preprocessor> <declaration_preprocessor>&amp;</declaration_preprocessor><declaration_preprocessor>&amp;</declaration_preprocessor> <declaration_preprocessor>(</declaration_preprocessor> <declaration_preprocessor>(</declaration_preprocessor> <declaration_preprocessor>__GNUC__</declaration_preprocessor> <declaration_preprocessor>&gt;=</declaration_preprocessor> <declaration_preprocessor>4</declaration_preprocessor> <declaration_preprocessor>)</declaration_preprocessor> <declaration_preprocessor>|</declaration_preprocessor><declaration_preprocessor>|</declaration_preprocessor> <declaration_preprocessor>(</declaration_preprocessor> <declaration_preprocessor>(</declaration_preprocessor> <declaration_preprocessor>__GNUC__</declaration_preprocessor> <declaration_preprocessor>==</declaration_preprocessor> <declaration_preprocessor>3</declaration_preprocessor> <declaration_preprocessor>)</declaration_preprocessor> <declaration_preprocessor>&amp;</declaration_preprocessor><declaration_preprocessor>&amp;</declaration_preprocessor> <declaration_preprocessor>(</declaration_preprocessor> <declaration_preprocessor>__GNUC_MINOR__</declaration_preprocessor> <declaration_preprocessor>&gt;=</declaration_preprocessor> <declaration_preprocessor>1</declaration_preprocessor> <declaration_preprocessor>)</declaration_preprocessor> <declaration_preprocessor>)</declaration_preprocessor> <declaration_preprocessor>)</declaration_preprocessor> 
<declaration_preprocessor>#define</declaration_preprocessor> <declaration_preprocessor>XS_WEAK_IMPORT_ATTRIBUTE</declaration_preprocessor> <declaration_preprocessor>__attribute__</declaration_preprocessor><declaration_preprocessor>(</declaration_preprocessor> <declaration_preprocessor>(</declaration_preprocessor> <declaration_preprocessor>weak_import</declaration_preprocessor> <declaration_preprocessor>)</declaration_preprocessor> <declaration_preprocessor>)</declaration_preprocessor> 
<declaration_preprocessor>#else</declaration_preprocessor> 
<declaration_preprocessor>#if</declaration_preprocessor> <declaration_preprocessor>defined</declaration_preprocessor><declaration_preprocessor>(</declaration_preprocessor> <declaration_preprocessor>__MWERKS__</declaration_preprocessor> <declaration_preprocessor>)</declaration_preprocessor> <declaration_preprocessor>&amp;</declaration_preprocessor><declaration_preprocessor>&amp;</declaration_preprocessor> <declaration_preprocessor>(</declaration_preprocessor> <declaration_preprocessor>__MWERKS__</declaration_preprocessor> <declaration_preprocessor>&gt;=</declaration_preprocessor> <declaration_preprocessor>0x3205</declaration_preprocessor> <declaration_preprocessor>)</declaration_preprocessor> 
<declaration_preprocessor>#define</declaration_preprocessor> <declaration_preprocessor>XS_WEAK_IMPORT_ATTRIBUTE</declaration_preprocessor> <declaration_preprocessor>__attribute__</declaration_preprocessor><declaration_preprocessor>(</declaration_preprocessor> <declaration_preprocessor>(</declaration_preprocessor> <declaration_preprocessor>weak_import</declaration_preprocessor> <declaration_preprocessor>)</declaration_preprocessor> <declaration_preprocessor>)</declaration_preprocessor> 
<declaration_preprocessor>#else</declaration_preprocessor> 
<declaration_preprocessor>#define</declaration_preprocessor> <declaration_preprocessor>XS_WEAK_IMPORT_ATTRIBUTE</declaration_preprocessor> 
<declaration_preprocessor>#endif</declaration_preprocessor>  
<declaration_preprocessor>#endif</declaration_preprocessor>  
</declaration>
<desc><p>Not all compiler support this attribute, so it may be defined
to nothing.
</p></desc>
</pdefine></defines><copyrightinfo>&#169; (c) 2020 - Jean-David Gadina - www.xs-labs.com
</copyrightinfo>
<timestamp>Sunday, September 27, 2020</timestamp>
</header>