<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE header PUBLIC "-//Apple Computer//DTD HEADERDOC 1.2//EN" "/System/Library/DTDs/HeaderDoc-1.2.dtd">
<header id="//apple_ref/doc/header/XSMemory.h" lang="c" filename="XSMemory.h" headerpath="/Volumes/Brain/Documents/Development/GitHub/XSFoundation/XSFoundation/include/XS/Functions/XSMemory.h"><name>XSMemory.h</name>
<includes>
<include><hd_link logicalPath="//apple_ref/doc/header/XSTypes.h">&lt;XS/XSTypes.h&gt;</hd_link></include>
</includes>
<desc><p/></desc>
<functions><function id="//apple_ref/c/func/XSAlloc" lang="c"><name>XSAllocWithInfos</name>
<abstract><p>Allocates memory
</p></abstract>
<parameterlist>
<parameter><name>_bytes_</name><desc><p>The number of bytes to allocate
</p>
<p>The number of bytes to reallocate
</p>
<p>The number of bytes to allocate</p></desc></parameter>
<parameter><name>_memory_</name><desc><p>The memory data to reallocate
</p>
<p>The memory data to release
</p>
<p>The object to copy</p></desc></parameter>
<parameter><name>bytes</name><desc><p>The number of bytes to allocate</p></desc></parameter>
<parameter><name>classID</name><desc><p>The class ID, if any</p></desc></parameter>
<parameter><name>file</name><desc><p>The file in which the allocation occurs</p></desc></parameter>
<parameter><name>line</name><desc><p>The line number of the file in which the allocation occurs</p></desc></parameter>
<parameter><name>func</name><desc><p>The function in which the allocation occurs</p></desc></parameter>
</parameterlist>
<parsedparameterlist>
<parsedparameter><type>XSUInteger</type><name>bytes</name></parsedparameter>
<parsedparameter><type>XSClassID</type><name>classID</name></parsedparameter>
<parsedparameter><type>const char *</type><name>file</name></parsedparameter>
<parsedparameter><type>int</type><name>line</name></parsedparameter>
<parsedparameter><type>const char *</type><name>func</name></parsedparameter>
</parsedparameterlist>
<returntype> XS_EXTERN_C_BEGIN # &lt; XS / XSTypes . h &gt; #</returntype>
<result><p>The allocated memory, or NULL
</p></result>
<declaration><declaration_type>XS_EXTERN_C_BEGIN</declaration_type>   <declaration_preprocessor>#include</declaration_preprocessor> <declaration_preprocessor>&lt;</declaration_preprocessor><declaration_preprocessor>XS</declaration_preprocessor><declaration_preprocessor>/</declaration_preprocessor><declaration_preprocessor>XSTypes</declaration_preprocessor><declaration_preprocessor>.</declaration_preprocessor><declaration_preprocessor>h</declaration_preprocessor><declaration_preprocessor>&gt;</declaration_preprocessor>  
<declaration_comment>/*!</declaration_comment>
    <declaration_comment>*/</declaration_comment>
<declaration_preprocessor>#define</declaration_preprocessor> <declaration_preprocessor>XSAlloc</declaration_preprocessor><declaration_preprocessor>(</declaration_preprocessor> <declaration_preprocessor>_bytes_</declaration_preprocessor> <declaration_preprocessor>)</declaration_preprocessor> <declaration_preprocessor>XSAllocWithInfos</declaration_preprocessor><declaration_preprocessor>(</declaration_preprocessor> <declaration_preprocessor>_bytes_</declaration_preprocessor><declaration_preprocessor>,</declaration_preprocessor> <declaration_preprocessor>0</declaration_preprocessor><declaration_preprocessor>,</declaration_preprocessor> <declaration_preprocessor>__FILE__</declaration_preprocessor><declaration_preprocessor>,</declaration_preprocessor> <declaration_preprocessor>__LINE__</declaration_preprocessor><declaration_preprocessor>,</declaration_preprocessor> <declaration_preprocessor>__func__</declaration_preprocessor> <declaration_preprocessor>)</declaration_preprocessor>  
<declaration_comment>/*!</declaration_comment>
    <declaration_comment>*/</declaration_comment>
<declaration_preprocessor>#define</declaration_preprocessor> <declaration_preprocessor>XSRealloc</declaration_preprocessor><declaration_preprocessor>(</declaration_preprocessor> <declaration_preprocessor>_memory_</declaration_preprocessor><declaration_preprocessor>,</declaration_preprocessor> <declaration_preprocessor>_bytes_</declaration_preprocessor> <declaration_preprocessor>)</declaration_preprocessor> <declaration_preprocessor>XSReallocWithInfos</declaration_preprocessor><declaration_preprocessor>(</declaration_preprocessor> <declaration_preprocessor>_memory_</declaration_preprocessor><declaration_preprocessor>,</declaration_preprocessor> <declaration_preprocessor>_bytes_</declaration_preprocessor><declaration_preprocessor>,</declaration_preprocessor> <declaration_preprocessor>0</declaration_preprocessor><declaration_preprocessor>,</declaration_preprocessor> <declaration_preprocessor>__FILE__</declaration_preprocessor><declaration_preprocessor>,</declaration_preprocessor> <declaration_preprocessor>__LINE__</declaration_preprocessor><declaration_preprocessor>,</declaration_preprocessor> <declaration_preprocessor>__func__</declaration_preprocessor> <declaration_preprocessor>)</declaration_preprocessor>  
<declaration_comment>/*!</declaration_comment>
    <declaration_comment>*/</declaration_comment>
<declaration_preprocessor>#define</declaration_preprocessor> <declaration_preprocessor>XSAutoAlloc</declaration_preprocessor><declaration_preprocessor>(</declaration_preprocessor> <declaration_preprocessor>_bytes_</declaration_preprocessor> <declaration_preprocessor>)</declaration_preprocessor> <declaration_preprocessor>XSAutoAllocWithInfos</declaration_preprocessor><declaration_preprocessor>(</declaration_preprocessor> <declaration_preprocessor>_bytes_</declaration_preprocessor><declaration_preprocessor>,</declaration_preprocessor> <declaration_preprocessor>0</declaration_preprocessor><declaration_preprocessor>,</declaration_preprocessor> <declaration_preprocessor>__FILE__</declaration_preprocessor><declaration_preprocessor>,</declaration_preprocessor> <declaration_preprocessor>__LINE__</declaration_preprocessor><declaration_preprocessor>,</declaration_preprocessor> <declaration_preprocessor>__func__</declaration_preprocessor> <declaration_preprocessor>)</declaration_preprocessor>  
<declaration_comment>/*!</declaration_comment>
    <declaration_comment>*/</declaration_comment>
<declaration_preprocessor>#define</declaration_preprocessor> <declaration_preprocessor>XSRelease</declaration_preprocessor><declaration_preprocessor>(</declaration_preprocessor> <declaration_preprocessor>_memory_</declaration_preprocessor> <declaration_preprocessor>)</declaration_preprocessor> <declaration_preprocessor>XSReleaseWithInfos</declaration_preprocessor><declaration_preprocessor>(</declaration_preprocessor> <declaration_preprocessor>_memory_</declaration_preprocessor><declaration_preprocessor>,</declaration_preprocessor> <declaration_preprocessor>__FILE__</declaration_preprocessor><declaration_preprocessor>,</declaration_preprocessor> <declaration_preprocessor>__LINE__</declaration_preprocessor><declaration_preprocessor>,</declaration_preprocessor> <declaration_preprocessor>__func__</declaration_preprocessor> <declaration_preprocessor>)</declaration_preprocessor>  
<declaration_comment>/*!</declaration_comment>
    <declaration_comment>*/</declaration_comment>
<declaration_preprocessor>#define</declaration_preprocessor> <declaration_preprocessor>XSCopy</declaration_preprocessor><declaration_preprocessor>(</declaration_preprocessor> <declaration_preprocessor>_memory_</declaration_preprocessor> <declaration_preprocessor>)</declaration_preprocessor> <declaration_preprocessor>XSCopyWithInfos</declaration_preprocessor><declaration_preprocessor>(</declaration_preprocessor> <declaration_preprocessor>_memory_</declaration_preprocessor><declaration_preprocessor>,</declaration_preprocessor> <declaration_preprocessor>__FILE__</declaration_preprocessor><declaration_preprocessor>,</declaration_preprocessor> <declaration_preprocessor>__LINE__</declaration_preprocessor><declaration_preprocessor>,</declaration_preprocessor> <declaration_preprocessor>__func__</declaration_preprocessor> <declaration_preprocessor>)</declaration_preprocessor>  
<declaration_comment>/*!</declaration_comment>
    <declaration_comment>*/</declaration_comment>
<declaration_type>XS_EXPORT</declaration_type> <declaration_type>void</declaration_type> <declaration_type>*</declaration_type> <declaration_function>XSAllocWithInfos</declaration_function>(
    <declaration_type>XSUInteger</declaration_type> <declaration_param>bytes</declaration_param>,
    <declaration_type>XSClassID</declaration_type> <declaration_param>classID</declaration_param>,
    <declaration_keyword>const</declaration_keyword> <declaration_type>char</declaration_type> <declaration_type>*</declaration_type><declaration_param>file</declaration_param>,
    <declaration_type>int</declaration_type> <declaration_param>line</declaration_param>,
    <declaration_keyword>const</declaration_keyword> <declaration_type>char</declaration_type> <declaration_type>*</declaration_type><declaration_param>func</declaration_param> );  </declaration>
<desc><p>Do not use this function directly. Use the XSAlloc macro
instead.
</p></desc>
</function><function id="//apple_ref/c/func/XSAutoAllocWithInfos" lang="c"><name>XSAutoAllocWithInfos</name>
<abstract><p>Allocates memory which will be automatically released
</p></abstract>
<parameterlist>
<parameter><name>bytes</name><desc><p>The number of bytes to allocate</p></desc></parameter>
<parameter><name>classID</name><desc><p>The class ID, if any</p></desc></parameter>
<parameter><name>file</name><desc><p>The file in which the allocation occurs</p></desc></parameter>
<parameter><name>line</name><desc><p>The line number of the file in which the allocation occurs</p></desc></parameter>
<parameter><name>func</name><desc><p>The function in which the allocation occurs</p></desc></parameter>
</parameterlist>
<parsedparameterlist>
<parsedparameter><type>XSUInteger</type><name>bytes</name></parsedparameter>
<parsedparameter><type>XSClassID</type><name>classID</name></parsedparameter>
<parsedparameter><type>const char *</type><name>file</name></parsedparameter>
<parsedparameter><type>int</type><name>line</name></parsedparameter>
<parsedparameter><type>const char *</type><name>func</name></parsedparameter>
</parsedparameterlist>
<returntype> XS_EXPORT void *</returntype>
<result><p>The allocated memory, or NULL
</p></result>
<declaration><declaration_type>XS_EXPORT</declaration_type> <declaration_type>void</declaration_type> <declaration_type>*</declaration_type> <declaration_function>XSAutoAllocWithInfos</declaration_function>(
    <declaration_type>XSUInteger</declaration_type> <declaration_param>bytes</declaration_param>,
    <declaration_type>XSClassID</declaration_type> <declaration_param>classID</declaration_param>,
    <declaration_keyword>const</declaration_keyword> <declaration_type>char</declaration_type> <declaration_type>*</declaration_type><declaration_param>file</declaration_param>,
    <declaration_type>int</declaration_type> <declaration_param>line</declaration_param>,
    <declaration_keyword>const</declaration_keyword> <declaration_type>char</declaration_type> <declaration_type>*</declaration_type><declaration_param>func</declaration_param> );  </declaration>
<desc><p>Do not use this function directly. Use the XSAutoAlloc macro
instead.
</p></desc>
</function><function id="//apple_ref/c/func/XSAutorelease" lang="c"><name>XSAutorelease</name>
<abstract><p>Auto-releases memory data
</p></abstract>
<parameterlist>
<parameter><name>memory</name><desc><p>The memory data to release</p></desc></parameter>
</parameterlist>
<parsedparameterlist>
<parsedparameter><type>void *</type><name>memory</name></parsedparameter>
</parsedparameterlist>
<returntype> XS_EXPORT void *</returntype>
<result><p>The memory data
</p></result>
<declaration><declaration_type>XS_EXPORT</declaration_type> <declaration_type>void</declaration_type> <declaration_type>*</declaration_type> <declaration_function>XSAutorelease</declaration_function>(
    <declaration_type>void</declaration_type> <declaration_type>*</declaration_type><declaration_param>memory</declaration_param> );  </declaration>
<desc><p>The memory data will be placed in the instance of the current
auto-release pool, and will be released the next time
the auto-release pool is drained.
</p></desc>
</function><function id="//apple_ref/doc/title:func/XSCopy" lang="c"><name>XSCopy</name>
<abstract><p>Copies an object
</p></abstract>
<parameterlist>
<parameter><name>memory</name><desc><p>The object to copy</p></desc></parameter>
<parameter><name>file</name><desc><p>The file in which the copy occurs</p></desc></parameter>
<parameter><name>line</name><desc><p>The line number of the file in which the copy occurs</p></desc></parameter>
<parameter><name>func</name><desc><p>The function in which the copy occurs</p></desc></parameter>
</parameterlist>
<parsedparameterlist>
<parsedparameter><type>void *</type><name>memory</name></parsedparameter>
<parsedparameter><type>const char *</type><name>file</name></parsedparameter>
<parsedparameter><type>int</type><name>line</name></parsedparameter>
<parsedparameter><type>const char *</type><name>func</name></parsedparameter>
</parsedparameterlist>
<returntype> XS_EXPORT XSObjectRef</returntype>
<result><p>The copy of the object
</p></result>
<declaration><declaration_type>XS_EXPORT</declaration_type> <declaration_type>XSObjectRef</declaration_type> <declaration_function>XSCopyWithInfos</declaration_function>(
    <declaration_type>void</declaration_type> <declaration_type>*</declaration_type><declaration_param>memory</declaration_param>,
    <declaration_keyword>const</declaration_keyword> <declaration_type>char</declaration_type> <declaration_type>*</declaration_type><declaration_param>file</declaration_param>,
    <declaration_type>int</declaration_type> <declaration_param>line</declaration_param>,
    <declaration_keyword>const</declaration_keyword> <declaration_type>char</declaration_type> <declaration_type>*</declaration_type><declaration_param>func</declaration_param> );  </declaration>
<desc><p>Do not use this function directly. Use the XSCopy macro
instead.
</p></desc>
</function><function id="//apple_ref/c/func/XSCopyWithInfos" lang="c"><name>XSCopyWithInfos</name>
<abstract><p>Copies an object
</p></abstract>
<parameterlist>
<parameter><name>memory</name><desc><p>The object to copy</p></desc></parameter>
<parameter><name>file</name><desc><p>The file in which the copy occurs</p></desc></parameter>
<parameter><name>line</name><desc><p>The line number of the file in which the copy occurs</p></desc></parameter>
<parameter><name>func</name><desc><p>The function in which the copy occurs</p></desc></parameter>
</parameterlist>
<parsedparameterlist>
<parsedparameter><type>void *</type><name>memory</name></parsedparameter>
<parsedparameter><type>const char *</type><name>file</name></parsedparameter>
<parsedparameter><type>int</type><name>line</name></parsedparameter>
<parsedparameter><type>const char *</type><name>func</name></parsedparameter>
</parsedparameterlist>
<returntype> XS_EXPORT XSObjectRef</returntype>
<result><p>The copy of the object
</p></result>
<declaration><declaration_type>XS_EXPORT</declaration_type> <declaration_type>XSObjectRef</declaration_type> <declaration_function>XSCopyWithInfos</declaration_function>(
    <declaration_type>void</declaration_type> <declaration_type>*</declaration_type><declaration_param>memory</declaration_param>,
    <declaration_keyword>const</declaration_keyword> <declaration_type>char</declaration_type> <declaration_type>*</declaration_type><declaration_param>file</declaration_param>,
    <declaration_type>int</declaration_type> <declaration_param>line</declaration_param>,
    <declaration_keyword>const</declaration_keyword> <declaration_type>char</declaration_type> <declaration_type>*</declaration_type><declaration_param>func</declaration_param> );  </declaration>
<desc><p>Do not use this function directly. Use the XSCopy macro
instead.
</p></desc>
</function><function id="//apple_ref/c/func/XSEquals" lang="c"><name>XSEquals</name>
<abstract><p>Checks whether two objects are equals
</p></abstract>
<parameterlist>
<parameter><name>memory1</name><desc><p>The first object to compare</p></desc></parameter>
<parameter><name>memory2</name><desc><p>The second object to compare</p></desc></parameter>
</parameterlist>
<parsedparameterlist>
<parsedparameter><type>void *</type><name>memory1</name></parsedparameter>
<parsedparameter><type>void *</type><name>memory2</name></parsedparameter>
</parsedparameterlist>
<returntype> XS_EXPORT bool</returntype>
<result><p>True if both objects are equals, otherwise false
</p></result>
<declaration><declaration_type>XS_EXPORT</declaration_type> <declaration_type>bool</declaration_type> <declaration_function>XSEquals</declaration_function>(
    <declaration_type>void</declaration_type> <declaration_type>*</declaration_type><declaration_param>memory1</declaration_param>,
    <declaration_type>void</declaration_type> <declaration_type>*</declaration_type><declaration_param>memory2</declaration_param> );  </declaration>
<desc><p/></desc>
</function><function id="//apple_ref/c/func/XSReallocWithInfos" lang="c"><name>XSReallocWithInfos</name>
<abstract><p>Reallocates memory
</p></abstract>
<parameterlist>
<parameter><name>memory</name><desc><p>The memory data to reallocate</p></desc></parameter>
<parameter><name>bytes</name><desc><p>The number of bytes to reallocate</p></desc></parameter>
<parameter><name>classID</name><desc><p>The class ID, if any</p></desc></parameter>
<parameter><name>file</name><desc><p>The file in which the reallocation occurs</p></desc></parameter>
<parameter><name>line</name><desc><p>The line number of the file in which the reallocation occurs</p></desc></parameter>
<parameter><name>func</name><desc><p>The function in which the reallocation occurs</p></desc></parameter>
</parameterlist>
<parsedparameterlist>
<parsedparameter><type>void *</type><name>memory</name></parsedparameter>
<parsedparameter><type>XSUInteger</type><name>bytes</name></parsedparameter>
<parsedparameter><type>XSClassID</type><name>classID</name></parsedparameter>
<parsedparameter><type>const char *</type><name>file</name></parsedparameter>
<parsedparameter><type>int</type><name>line</name></parsedparameter>
<parsedparameter><type>const char *</type><name>func</name></parsedparameter>
</parsedparameterlist>
<returntype> XS_EXPORT void *</returntype>
<result><p>The reallocated memory, or NULL
</p></result>
<declaration><declaration_type>XS_EXPORT</declaration_type> <declaration_type>void</declaration_type> <declaration_type>*</declaration_type> <declaration_function>XSReallocWithInfos</declaration_function>(
    <declaration_type>void</declaration_type> <declaration_type>*</declaration_type><declaration_param>memory</declaration_param>,
    <declaration_type>XSUInteger</declaration_type> <declaration_param>bytes</declaration_param>,
    <declaration_type>XSClassID</declaration_type> <declaration_param>classID</declaration_param>,
    <declaration_keyword>const</declaration_keyword> <declaration_type>char</declaration_type> <declaration_type>*</declaration_type><declaration_param>file</declaration_param>,
    <declaration_type>int</declaration_type> <declaration_param>line</declaration_param>,
    <declaration_keyword>const</declaration_keyword> <declaration_type>char</declaration_type> <declaration_type>*</declaration_type><declaration_param>func</declaration_param> );  </declaration>
<desc><p>Do not use this function directly. Use the XSRealloc macro
instead.
</p></desc>
</function><function id="//apple_ref/c/func/XSReleaseWithInfos" lang="c"><name>XSReleaseWithInfos</name>
<abstract><p>Releases memory data
</p></abstract>
<parameterlist>
<parameter><name>memory</name><desc><p>The memory data to release</p></desc></parameter>
<parameter><name>file</name><desc><p>The file in which the release occurs</p></desc></parameter>
<parameter><name>line</name><desc><p>The line number of the file in which the release occurs</p></desc></parameter>
<parameter><name>func</name><desc><p>The function in which the release occurs</p></desc></parameter>
</parameterlist>
<parsedparameterlist>
<parsedparameter><type>void *</type><name>memory</name></parsedparameter>
<parsedparameter><type>const char *</type><name>file</name></parsedparameter>
<parsedparameter><type>int</type><name>line</name></parsedparameter>
<parsedparameter><type>const char *</type><name>func</name></parsedparameter>
</parsedparameterlist>
<returntype> XS_EXPORT void</returntype>
<declaration><declaration_type>XS_EXPORT</declaration_type> <declaration_type>void</declaration_type> <declaration_function>XSReleaseWithInfos</declaration_function>(
    <declaration_type>void</declaration_type> <declaration_type>*</declaration_type><declaration_param>memory</declaration_param>,
    <declaration_keyword>const</declaration_keyword> <declaration_type>char</declaration_type> <declaration_type>*</declaration_type><declaration_param>file</declaration_param>,
    <declaration_type>int</declaration_type> <declaration_param>line</declaration_param>,
    <declaration_keyword>const</declaration_keyword> <declaration_type>char</declaration_type> <declaration_type>*</declaration_type><declaration_param>func</declaration_param> );  </declaration>
<desc><p>Do not use this function directly. Use the XSRelease macro
instead.
</p></desc>
</function><function id="//apple_ref/c/func/XSRetain" lang="c"><name>XSRetain</name>
<abstract><p>Retains memory data
</p></abstract>
<parameterlist>
<parameter><name>memory</name><desc><p>The memory data to retain</p></desc></parameter>
</parameterlist>
<parsedparameterlist>
<parsedparameter><type>void *</type><name>memory</name></parsedparameter>
</parsedparameterlist>
<returntype> XS_EXPORT void *</returntype>
<result><p>The memory data
</p></result>
<declaration><declaration_type>XS_EXPORT</declaration_type> <declaration_type>void</declaration_type> <declaration_type>*</declaration_type> <declaration_function>XSRetain</declaration_function>(
    <declaration_type>void</declaration_type> <declaration_type>*</declaration_type><declaration_param>memory</declaration_param> );  </declaration>
<desc><p/></desc>
</function></functions>
<defines><pdefine id="//apple_ref/c/macro/__XS_FUNCTIONS_XS_MEMORY_H__" definetype="value" lang="c"><name>__XS_FUNCTIONS_XS_MEMORY_H__</name>
<declaration><declaration_preprocessor>#define</declaration_preprocessor> <declaration_preprocessor>__XS_FUNCTIONS_XS_MEMORY_H__</declaration_preprocessor> </declaration>
</pdefine></defines><timestamp>Wednesday, May 14, 2014</timestamp>
</header>