<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE header PUBLIC "-//Apple Computer//DTD HEADERDOC 1.6//EN" "/System/Library/DTDs/HeaderDoc-1.6.dtd">
<header id="//xsdoc_ref/doc/header/XSGeometry-XSRange.h" lang="c" filename="XSGeometry-XSRange.h" headerpath="/Users/macmade/Documents/Macmade/Development/GitHub/XSFoundation/XSFoundation/include/XS/Functions/XSGeometry-XSRange.h"><name>XSGeometry-XSRange.h</name>
<abstract><p>XSRange functions
</p></abstract>
<attributes><attribute><name>Author</name><value>Jean-David Gadina - www.xs-labs.com</value></attribute>
</attributes>
<includes>
<include><hd_link logicalPath="//xsdoc_ref/doc/header/XSTypes.h">&lt;XS/XSTypes.h&gt;</hd_link></include>
</includes>
<desc><p>...
</p></desc>
<functions><function id="//xsdoc_ref/c/func/XSRange_Intersection" lang="c"><name>XSRange_Intersection</name>
<abstract><p>Returns the intersection of the specified ranges
</p></abstract>
<parameterlist>
<parameter><name>r1</name><desc><p>The first range</p></desc></parameter>
<parameter><name>r2</name><desc><p>The second range</p></desc></parameter>
</parameterlist>
<parsedparameterlist>
<parsedparameter><type>XSRange</type><name>r1</name></parsedparameter>
<parsedparameter><type>XSRange</type><name>r2</name></parsedparameter>
</parsedparameterlist>
<returntype> XS_EXPORT XSRange</returntype>
<result><p>A range containing the indices that exist in both ranges
</p></result>
<declaration><declaration_type>XS_EXPORT</declaration_type> <declaration_type>XSRange</declaration_type> <declaration_function>XSRange_Intersection</declaration_function>(
    <declaration_type>XSRange</declaration_type> <declaration_param>r1</declaration_param>,
    <declaration_type>XSRange</declaration_type> <declaration_param>r2</declaration_param> );  </declaration>
<desc><p/></desc>
</function><function id="//xsdoc_ref/c/func/XSRange_IsEqualToRange" lang="c"><name>XSRange_IsEqualToRange</name>
<abstract><p>Checks if two ranges are equal
</p></abstract>
<parameterlist>
<parameter><name>r1</name><desc><p>The first range to compare</p></desc></parameter>
<parameter><name>r2</name><desc><p>The second range to compare</p></desc></parameter>
</parameterlist>
<parsedparameterlist>
<parsedparameter><type>XSRange</type><name>r1</name></parsedparameter>
<parsedparameter><type>XSRange</type><name>r2</name></parsedparameter>
</parsedparameterlist>
<returntype> XS_EXPORT bool</returntype>
<result><p>True if both ranges are equal, otherwise false
</p></result>
<declaration><declaration_type>XS_EXPORT</declaration_type> <declaration_type>bool</declaration_type> <declaration_function>XSRange_IsEqualToRange</declaration_function>(
    <declaration_type>XSRange</declaration_type> <declaration_param>r1</declaration_param>,
    <declaration_type>XSRange</declaration_type> <declaration_param>r2</declaration_param> );  </declaration>
<desc><p/></desc>
</function><function id="//xsdoc_ref/c/func/XSRange_LocationInRange" lang="c"><name>XSRange_LocationInRange</name>
<abstract><p>Checks whether a specified position is in a given range
</p></abstract>
<parameterlist>
<parameter><name>location</name><desc><p>The location</p></desc></parameter>
<parameter><name>range</name><desc><p>The range</p></desc></parameter>
</parameterlist>
<parsedparameterlist>
<parsedparameter><type>XSUInteger</type><name>location</name></parsedparameter>
<parsedparameter><type>XSRange</type><name>range</name></parsedparameter>
</parsedparameterlist>
<returntype> XS_EXPORT bool</returntype>
<result><p>True if the location is in the given range, otherwise false
</p></result>
<declaration><declaration_type>XS_EXPORT</declaration_type> <declaration_type>bool</declaration_type> <declaration_function>XSRange_LocationInRange</declaration_function>(
    <declaration_type>XSUInteger</declaration_type> <declaration_param>location</declaration_param>,
    <declaration_type>XSRange</declaration_type> <declaration_param>range</declaration_param> );  </declaration>
<desc><p/></desc>
</function><function id="//xsdoc_ref/c/func/XSRange_Make" lang="c"><name>XSRange_Make</name>
<abstract><p>Creates an range with the specified location and length
</p></abstract>
<parameterlist>
<parameter><name>location</name><desc><p>The range's location</p></desc></parameter>
<parameter><name>length</name><desc><p>The range's length</p></desc></parameter>
</parameterlist>
<parsedparameterlist>
<parsedparameter><type>XSUInteger</type><name>location</name></parsedparameter>
<parsedparameter><type>XSUInteger</type><name>length</name></parsedparameter>
</parsedparameterlist>
<returntype> XS_EXPORT XSRange</returntype>
<result><p>The range
</p></result>
<declaration><declaration_type>XS_EXPORT</declaration_type> <declaration_type>XSRange</declaration_type> <declaration_function>XSRange_Make</declaration_function>(
    <declaration_type>XSUInteger</declaration_type> <declaration_param>location</declaration_param>,
    <declaration_type>XSUInteger</declaration_type> <declaration_param>length</declaration_param> );  </declaration>
<desc><p/></desc>
</function><function id="//xsdoc_ref/c/func/XSRange_Max" lang="c"><name>XSRange_Max</name>
<abstract><p>Returns the sum of the location and length of the range
</p></abstract>
<parameterlist>
<parameter><name>range</name><desc><p>The range</p></desc></parameter>
</parameterlist>
<parsedparameterlist>
<parsedparameter><type>XSRange</type><name>range</name></parsedparameter>
</parsedparameterlist>
<returntype> XS_EXPORT XSUInteger</returntype>
<result><p>The sum of the location and length of the range
</p></result>
<declaration><declaration_type>XS_EXPORT</declaration_type> <declaration_type>XSUInteger</declaration_type> <declaration_function>XSRange_Max</declaration_function>(
    <declaration_type>XSRange</declaration_type> <declaration_param>range</declaration_param> );  </declaration>
<desc><p/></desc>
</function><function id="//xsdoc_ref/c/func/XSRange_Union" lang="c"><name>XSRange_Union</name>
<abstract><p>Returns the union of the specified ranges
</p></abstract>
<parameterlist>
<parameter><name>r1</name><desc><p>The first range</p></desc></parameter>
<parameter><name>r2</name><desc><p>The second range</p></desc></parameter>
</parameterlist>
<parsedparameterlist>
<parsedparameter><type>XSRange</type><name>r1</name></parsedparameter>
<parsedparameter><type>XSRange</type><name>r2</name></parsedparameter>
</parsedparameterlist>
<returntype> XS_EXPORT XSRange</returntype>
<result><p>A range covering all indices in and between r1 and r2
</p></result>
<declaration><declaration_type>XS_EXPORT</declaration_type> <declaration_type>XSRange</declaration_type> <declaration_function>XSRange_Union</declaration_function>(
    <declaration_type>XSRange</declaration_type> <declaration_param>r1</declaration_param>,
    <declaration_type>XSRange</declaration_type> <declaration_param>r2</declaration_param> );  </declaration>
<desc><p>If one range is completely contained in the other, the returned
range is equal to the larger range.
</p></desc>
</function><function id="//xsdoc_ref/c/func/XSRange_Zero" lang="c"><name>XSRange_Zero</name>
<abstract><p>Creates a range with zero location and length
</p></abstract>
<returntype> XS_EXPORT XSRange</returntype>
<result><p>The range
</p></result>
<declaration><declaration_type>XS_EXPORT</declaration_type> <declaration_type>XSRange</declaration_type> <declaration_function>XSRange_Zero</declaration_function>(
    <declaration_param>void</declaration_param> );  </declaration>
<desc><p/></desc>
</function></functions>
<copyrightinfo>&#169; (c) 2010-2014 - Jean-David Gadina - www.xs-labs.com
</copyrightinfo>
<timestamp>Thursday, September 04, 2014</timestamp>
</header>