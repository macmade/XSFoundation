<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE header PUBLIC "-//Apple Computer//DTD HEADERDOC 1.6//EN" "/System/Library/DTDs/HeaderDoc-1.6.dtd">
<header id="//xsdoc_ref/doc/header/XSLog.h" lang="c" filename="XSLog.h" headerpath="/Users/macmade/Documents/Macmade/Development/GitHub/XSFoundation/XSFoundation/include/XS/Functions/XSLog.h"><name>XSLog.h</name>
<abstract><p>XSFoundation log functions
</p></abstract>
<attributes><attribute><name>Author</name><value>Jean-David Gadina - www.xs-labs.com</value></attribute>
</attributes>
<includes>
<include><hd_link logicalPath="//xsdoc_ref/doc/header/XSTypes.h">&lt;XS/XSTypes.h&gt;</hd_link></include>
</includes>
<desc><p>...
</p></desc>
<functions><function id="//xsdoc_ref/c/func/XSFatalErrorWithInfos" lang="c"><name>XSFatalErrorWithInfos</name>
<abstract><p>Logs a fatal message to the standard error output and aborts the program
</p></abstract>
<parameterlist>
<parameter><name>file</name><desc><p>The file in which the log occurs</p></desc></parameter>
<parameter><name>line</name><desc><p>The line number of the file in which the log occurs</p></desc></parameter>
<parameter><name>func</name><desc><p>The function in which the log occurs</p></desc></parameter>
<parameter><name>fmt</name><desc><p>The format string (printf like)</p></desc></parameter>
<parameter><name>...</name><desc><p>Arguments for the format</p></desc></parameter>
</parameterlist>
<parsedparameterlist>
<parsedparameter><type>const char *</type><name>file</name></parsedparameter>
<parsedparameter><type>int</type><name>line</name></parsedparameter>
<parsedparameter><type>const char *</type><name>func</name></parsedparameter>
<parsedparameter><type>const char *</type><name>fmt</name></parsedparameter>
<parsedparameter><type> ...</type><name>...</name></parsedparameter>
</parsedparameterlist>
<returntype> void</returntype>
<declaration><declaration_type>void</declaration_type> <declaration_function>XSFatalErrorWithInfos</declaration_function>(
    <declaration_keyword>const</declaration_keyword> <declaration_type>char</declaration_type> <declaration_type>*</declaration_type><declaration_param>file</declaration_param>,
    <declaration_type>int</declaration_type> <declaration_param>line</declaration_param>,
    <declaration_keyword>const</declaration_keyword> <declaration_type>char</declaration_type> <declaration_type>*</declaration_type><declaration_param>func</declaration_param>,
    <declaration_keyword>const</declaration_keyword> <declaration_type>char</declaration_type> <declaration_type>*</declaration_type><declaration_param>fmt</declaration_param>,
    ... ) <declaration_var>XS_NORETURN_ATTRIBUTE</declaration_var>;  </declaration>
<desc><p>Do not use this function directly. Use the XSFatalError macro
instead.
</p></desc>
</function><function id="//xsdoc_ref/c/func/XSGetLogLevel" lang="c"><name>XSGetLogLevel</name>
<abstract><p>Gets the log level for XSLog functions/macros
</p></abstract>
<attributelists><listattribute><name>See</name><list>
<item><name>XSLogLevel</name><value><hd_link logicalPath="XSLogLevel" isseealso="yes">XSLogLevel</hd_link></value></item></list></listattribute>
</attributelists>
<returntype> XSUInteger</returntype>
<result><p>The actual log level
</p></result>
<declaration><declaration_type>XSUInteger</declaration_type> <declaration_function>XSGetLogLevel</declaration_function>(
    <declaration_param>void</declaration_param> );  </declaration>
<desc><p/></desc>
</function><function id="//xsdoc_ref/c/func/XSLogEdgeInsetsWithInfos" lang="c"><name>XSLogEdgeInsetsWithInfos</name>
<abstract><p>Logs an edge insets structure to the standard error output
</p></abstract>
<parameterlist>
<parameter><name>e</name><desc><p>The edge insets structure</p></desc></parameter>
<parameter><name>file</name><desc><p>The file in which the log occurs</p></desc></parameter>
<parameter><name>line</name><desc><p>The line number of the file in which the log occurs</p></desc></parameter>
<parameter><name>func</name><desc><p>The function in which the log occurs</p></desc></parameter>
</parameterlist>
<parsedparameterlist>
<parsedparameter><type>XSEdgeInsets</type><name>e</name></parsedparameter>
<parsedparameter><type>const char *</type><name>file</name></parsedparameter>
<parsedparameter><type>int</type><name>line</name></parsedparameter>
<parsedparameter><type>const char *</type><name>func</name></parsedparameter>
</parsedparameterlist>
<returntype> void</returntype>
<declaration><declaration_type>void</declaration_type> <declaration_function>XSLogEdgeInsetsWithInfos</declaration_function>(
    <declaration_type>XSEdgeInsets</declaration_type> <declaration_param>e</declaration_param>,
    <declaration_keyword>const</declaration_keyword> <declaration_type>char</declaration_type> <declaration_type>*</declaration_type><declaration_param>file</declaration_param>,
    <declaration_type>int</declaration_type> <declaration_param>line</declaration_param>,
    <declaration_keyword>const</declaration_keyword> <declaration_type>char</declaration_type> <declaration_type>*</declaration_type><declaration_param>func</declaration_param> );  </declaration>
<desc><p>Do not use this function directly. Use the XSLogEdgeInsets macro
instead.
</p></desc>
</function><function id="//xsdoc_ref/c/func/XSLogPointWithInfos" lang="c"><name>XSLogPointWithInfos</name>
<abstract><p>Logs a point structure to the standard error output
</p></abstract>
<parameterlist>
<parameter><name>p</name><desc><p>The point structure</p></desc></parameter>
<parameter><name>file</name><desc><p>The file in which the log occurs</p></desc></parameter>
<parameter><name>line</name><desc><p>The line number of the file in which the log occurs</p></desc></parameter>
<parameter><name>func</name><desc><p>The function in which the log occurs</p></desc></parameter>
</parameterlist>
<parsedparameterlist>
<parsedparameter><type>XSPoint</type><name>p</name></parsedparameter>
<parsedparameter><type>const char *</type><name>file</name></parsedparameter>
<parsedparameter><type>int</type><name>line</name></parsedparameter>
<parsedparameter><type>const char *</type><name>func</name></parsedparameter>
</parsedparameterlist>
<returntype> void</returntype>
<declaration><declaration_type>void</declaration_type> <declaration_function>XSLogPointWithInfos</declaration_function>(
    <declaration_type>XSPoint</declaration_type> <declaration_param>p</declaration_param>,
    <declaration_keyword>const</declaration_keyword> <declaration_type>char</declaration_type> <declaration_type>*</declaration_type><declaration_param>file</declaration_param>,
    <declaration_type>int</declaration_type> <declaration_param>line</declaration_param>,
    <declaration_keyword>const</declaration_keyword> <declaration_type>char</declaration_type> <declaration_type>*</declaration_type><declaration_param>func</declaration_param> );  </declaration>
<desc><p>Do not use this function directly. Use the XSLogPoint macro
instead.
</p></desc>
</function><function id="//xsdoc_ref/c/func/XSLogRangeWithInfos" lang="c"><name>XSLogRangeWithInfos</name>
<abstract><p>Logs a range structure to the standard error output
</p></abstract>
<parameterlist>
<parameter><name>r</name><desc><p>The range structure</p></desc></parameter>
<parameter><name>file</name><desc><p>The file in which the log occurs</p></desc></parameter>
<parameter><name>line</name><desc><p>The line number of the file in which the log occurs</p></desc></parameter>
<parameter><name>func</name><desc><p>The function in which the log occurs</p></desc></parameter>
</parameterlist>
<parsedparameterlist>
<parsedparameter><type>XSRange</type><name>r</name></parsedparameter>
<parsedparameter><type>const char *</type><name>file</name></parsedparameter>
<parsedparameter><type>int</type><name>line</name></parsedparameter>
<parsedparameter><type>const char *</type><name>func</name></parsedparameter>
</parsedparameterlist>
<returntype> void</returntype>
<declaration><declaration_type>void</declaration_type> <declaration_function>XSLogRangeWithInfos</declaration_function>(
    <declaration_type>XSRange</declaration_type> <declaration_param>r</declaration_param>,
    <declaration_keyword>const</declaration_keyword> <declaration_type>char</declaration_type> <declaration_type>*</declaration_type><declaration_param>file</declaration_param>,
    <declaration_type>int</declaration_type> <declaration_param>line</declaration_param>,
    <declaration_keyword>const</declaration_keyword> <declaration_type>char</declaration_type> <declaration_type>*</declaration_type><declaration_param>func</declaration_param> );  </declaration>
<desc><p>Do not use this function directly. Use the XSLogRange macro
instead.
</p></desc>
</function><function id="//xsdoc_ref/c/func/XSLogRectWithInfos" lang="c"><name>XSLogRectWithInfos</name>
<abstract><p>Logs a rectangle structure to the standard error output
</p></abstract>
<parameterlist>
<parameter><name>r</name><desc><p>The rectangle structure</p></desc></parameter>
<parameter><name>file</name><desc><p>The file in which the log occurs</p></desc></parameter>
<parameter><name>line</name><desc><p>The line number of the file in which the log occurs</p></desc></parameter>
<parameter><name>func</name><desc><p>The function in which the log occurs</p></desc></parameter>
</parameterlist>
<parsedparameterlist>
<parsedparameter><type>XSRect</type><name>r</name></parsedparameter>
<parsedparameter><type>const char *</type><name>file</name></parsedparameter>
<parsedparameter><type>int</type><name>line</name></parsedparameter>
<parsedparameter><type>const char *</type><name>func</name></parsedparameter>
</parsedparameterlist>
<returntype> void</returntype>
<declaration><declaration_type>void</declaration_type> <declaration_function>XSLogRectWithInfos</declaration_function>(
    <declaration_type>XSRect</declaration_type> <declaration_param>r</declaration_param>,
    <declaration_keyword>const</declaration_keyword> <declaration_type>char</declaration_type> <declaration_type>*</declaration_type><declaration_param>file</declaration_param>,
    <declaration_type>int</declaration_type> <declaration_param>line</declaration_param>,
    <declaration_keyword>const</declaration_keyword> <declaration_type>char</declaration_type> <declaration_type>*</declaration_type><declaration_param>func</declaration_param> );  </declaration>
<desc><p>Do not use this function directly. Use the XSLogRect macro
instead.
</p></desc>
</function><function id="//xsdoc_ref/c/func/XSLogSizeWithInfos" lang="c"><name>XSLogSizeWithInfos</name>
<abstract><p>Logs a size structure to the standard error output
</p></abstract>
<parameterlist>
<parameter><name>s</name><desc><p>The size structure</p></desc></parameter>
<parameter><name>file</name><desc><p>The file in which the log occurs</p></desc></parameter>
<parameter><name>line</name><desc><p>The line number of the file in which the log occurs</p></desc></parameter>
<parameter><name>func</name><desc><p>The function in which the log occurs</p></desc></parameter>
</parameterlist>
<parsedparameterlist>
<parsedparameter><type>XSSize</type><name>s</name></parsedparameter>
<parsedparameter><type>const char *</type><name>file</name></parsedparameter>
<parsedparameter><type>int</type><name>line</name></parsedparameter>
<parsedparameter><type>const char *</type><name>func</name></parsedparameter>
</parsedparameterlist>
<returntype> void</returntype>
<declaration><declaration_type>void</declaration_type> <declaration_function>XSLogSizeWithInfos</declaration_function>(
    <declaration_type>XSSize</declaration_type> <declaration_param>s</declaration_param>,
    <declaration_keyword>const</declaration_keyword> <declaration_type>char</declaration_type> <declaration_type>*</declaration_type><declaration_param>file</declaration_param>,
    <declaration_type>int</declaration_type> <declaration_param>line</declaration_param>,
    <declaration_keyword>const</declaration_keyword> <declaration_type>char</declaration_type> <declaration_type>*</declaration_type><declaration_param>func</declaration_param> );  </declaration>
<desc><p>Do not use this function directly. Use the XSLogSize macro
instead.
</p></desc>
</function><function id="//xsdoc_ref/c/func/XSLogWithInfos" lang="c"><name>XSLogWithInfos</name>
<abstract><p>Logs a message to the standard error output
</p></abstract>
<parameterlist>
<parameter><name>file</name><desc><p>The file in which the log occurs</p></desc></parameter>
<parameter><name>line</name><desc><p>The line number of the file in which the log occurs</p></desc></parameter>
<parameter><name>func</name><desc><p>The function in which the log occurs</p></desc></parameter>
<parameter><name>fmt</name><desc><p>The format string (printf like)</p></desc></parameter>
<parameter><name>...</name><desc><p>Arguments for the format</p></desc></parameter>
</parameterlist>
<parsedparameterlist>
<parsedparameter><type>XSLogLevel</type><name>level</name></parsedparameter>
<parsedparameter><type>const char *</type><name>file</name></parsedparameter>
<parsedparameter><type>int</type><name>line</name></parsedparameter>
<parsedparameter><type>const char *</type><name>func</name></parsedparameter>
<parsedparameter><type>const char *</type><name>fmt</name></parsedparameter>
<parsedparameter><type> ...</type><name>...</name></parsedparameter>
</parsedparameterlist>
<returntype> void</returntype>
<declaration><declaration_type>void</declaration_type> <declaration_function>XSLogWithInfos</declaration_function>(
    <declaration_type>XSLogLevel</declaration_type> <declaration_param>level</declaration_param>,
    <declaration_keyword>const</declaration_keyword> <declaration_type>char</declaration_type> <declaration_type>*</declaration_type><declaration_param>file</declaration_param>,
    <declaration_type>int</declaration_type> <declaration_param>line</declaration_param>,
    <declaration_keyword>const</declaration_keyword> <declaration_type>char</declaration_type> <declaration_type>*</declaration_type><declaration_param>func</declaration_param>,
    <declaration_keyword>const</declaration_keyword> <declaration_type>char</declaration_type> <declaration_type>*</declaration_type><declaration_param>fmt</declaration_param>,
    ... );  </declaration>
<desc><p>Do not use this function directly. Use the XSLog... macros
instead.
</p></desc>
</function><function id="//xsdoc_ref/c/func/XSSetLogLevel" lang="c"><name>XSSetLogLevel</name>
<abstract><p>Sets the log level for XSLog functions/macros
</p></abstract>
<parameterlist>
<parameter><name>level</name><desc><p>The desired log level</p></desc></parameter>
</parameterlist>
<parsedparameterlist>
<parsedparameter><type>XSUInteger</type><name>level</name></parsedparameter>
</parsedparameterlist>
<attributelists><listattribute><name>See</name><list>
<item><name>XSLogLevel</name><value><hd_link logicalPath="XSLogLevel" isseealso="yes">XSLogLevel</hd_link></value></item></list></listattribute>
</attributelists>
<returntype> void</returntype>
<declaration><declaration_type>void</declaration_type> <declaration_function>XSSetLogLevel</declaration_function>(
    <declaration_type>XSUInteger</declaration_type> <declaration_param>level</declaration_param> );  </declaration>
<desc><p/></desc>
</function><function id="//xsdoc_ref/doc/title:func/XSShow" lang="c"><name>XSShow</name>
<abstract><p>Logs the description of an object to the console
</p></abstract>
<parameterlist>
<parameter><name>object</name><desc><p>The object to log</p></desc></parameter>
<parameter><name>file</name><desc><p>The file in which the log occurs</p></desc></parameter>
<parameter><name>line</name><desc><p>The line number of the file in which the log occurs</p></desc></parameter>
<parameter><name>func</name><desc><p>The function in which the log occurs</p></desc></parameter>
</parameterlist>
<parsedparameterlist>
<parsedparameter><type>XSObjectRef</type><name>object</name></parsedparameter>
<parsedparameter><type>const char *</type><name>file</name></parsedparameter>
<parsedparameter><type>int</type><name>line</name></parsedparameter>
<parsedparameter><type>const char *</type><name>func</name></parsedparameter>
</parsedparameterlist>
<returntype> void</returntype>
<declaration><declaration_type>void</declaration_type> <declaration_function>XSShowWithInfos</declaration_function>(
    <declaration_type>XSObjectRef</declaration_type> <declaration_param>object</declaration_param>,
    <declaration_keyword>const</declaration_keyword> <declaration_type>char</declaration_type> <declaration_type>*</declaration_type><declaration_param>file</declaration_param>,
    <declaration_type>int</declaration_type> <declaration_param>line</declaration_param>,
    <declaration_keyword>const</declaration_keyword> <declaration_type>char</declaration_type> <declaration_type>*</declaration_type><declaration_param>func</declaration_param> );  </declaration>
<desc><p>Do not use this function directly. Use the XSShow macro
instead.
</p></desc>
</function><function id="//xsdoc_ref/c/func/XSShowWithInfos" lang="c"><name>XSShowWithInfos</name>
<abstract><p>Logs the description of an object to the console
</p></abstract>
<parameterlist>
<parameter><name>object</name><desc><p>The object to log</p></desc></parameter>
<parameter><name>file</name><desc><p>The file in which the log occurs</p></desc></parameter>
<parameter><name>line</name><desc><p>The line number of the file in which the log occurs</p></desc></parameter>
<parameter><name>func</name><desc><p>The function in which the log occurs</p></desc></parameter>
</parameterlist>
<parsedparameterlist>
<parsedparameter><type>XSObjectRef</type><name>object</name></parsedparameter>
<parsedparameter><type>const char *</type><name>file</name></parsedparameter>
<parsedparameter><type>int</type><name>line</name></parsedparameter>
<parsedparameter><type>const char *</type><name>func</name></parsedparameter>
</parsedparameterlist>
<returntype> void</returntype>
<declaration><declaration_type>void</declaration_type> <declaration_function>XSShowWithInfos</declaration_function>(
    <declaration_type>XSObjectRef</declaration_type> <declaration_param>object</declaration_param>,
    <declaration_keyword>const</declaration_keyword> <declaration_type>char</declaration_type> <declaration_type>*</declaration_type><declaration_param>file</declaration_param>,
    <declaration_type>int</declaration_type> <declaration_param>line</declaration_param>,
    <declaration_keyword>const</declaration_keyword> <declaration_type>char</declaration_type> <declaration_type>*</declaration_type><declaration_param>func</declaration_param> );  </declaration>
<desc><p>Do not use this function directly. Use the XSShow macro
instead.
</p></desc>
</function><function id="//xsdoc_ref/c/func/XSVLogWithInfos" lang="c"><name>XSVLogWithInfos</name>
<abstract><p>Logs a message to the standard error output
</p></abstract>
<parameterlist>
<parameter><name>file</name><desc><p>The file in which the log occurs</p></desc></parameter>
<parameter><name>line</name><desc><p>The line number of the file in which the log occurs</p></desc></parameter>
<parameter><name>func</name><desc><p>The function in which the log occurs</p></desc></parameter>
<parameter><name>fmt</name><desc><p>The format string (printf like)</p></desc></parameter>
<parameter><name>args</name><desc><p>Arguments for the format</p></desc></parameter>
</parameterlist>
<parsedparameterlist>
<parsedparameter><type>XSLogLevel</type><name>level</name></parsedparameter>
<parsedparameter><type>const char *</type><name>file</name></parsedparameter>
<parsedparameter><type>int</type><name>line</name></parsedparameter>
<parsedparameter><type>const char *</type><name>func</name></parsedparameter>
<parsedparameter><type>const char *</type><name>fmt</name></parsedparameter>
<parsedparameter><type>va_list</type><name>args</name></parsedparameter>
</parsedparameterlist>
<returntype> void</returntype>
<declaration><declaration_type>void</declaration_type> <declaration_function>XSVLogWithInfos</declaration_function>(
    <declaration_type>XSLogLevel</declaration_type> <declaration_param>level</declaration_param>,
    <declaration_keyword>const</declaration_keyword> <declaration_type>char</declaration_type> <declaration_type>*</declaration_type><declaration_param>file</declaration_param>,
    <declaration_type>int</declaration_type> <declaration_param>line</declaration_param>,
    <declaration_keyword>const</declaration_keyword> <declaration_type>char</declaration_type> <declaration_type>*</declaration_type><declaration_param>func</declaration_param>,
    <declaration_keyword>const</declaration_keyword> <declaration_type>char</declaration_type> <declaration_type>*</declaration_type><declaration_param>fmt</declaration_param>,
    <declaration_type>va_list</declaration_type> <declaration_param>args</declaration_param> );  </declaration>
<desc><p>Do not use this function directly. Use the XSVLog... macros
instead.
</p></desc>
</function></functions>
<defines><pdefine id="//xsdoc_ref/c/macro/XSFatalError" definetype="function" lang="c"><name>XSFatalError</name>
<abstract><p>Issues a fatal error message and aborts the program
</p></abstract>
<parameterlist>
<parameter><name>...</name><desc><p>The error message with optional format arguments</p></desc></parameter>
</parameterlist>
<parsedparameterlist>
<parsedparameter><type></type><name>...</name></parsedparameter>
</parsedparameterlist>
<declaration><declaration_preprocessor>#define</declaration_preprocessor> <declaration_preprocessor>XSFatalError</declaration_preprocessor><declaration_preprocessor>(</declaration_preprocessor> <declaration_preprocessor>.</declaration_preprocessor><declaration_preprocessor>.</declaration_preprocessor><declaration_preprocessor>.</declaration_preprocessor> <declaration_preprocessor>)</declaration_preprocessor> <declaration_preprocessor>XSFatalErrorWithInfos</declaration_preprocessor><declaration_preprocessor>(</declaration_preprocessor> <declaration_preprocessor>__FILE__</declaration_preprocessor><declaration_preprocessor>,</declaration_preprocessor> <declaration_preprocessor>__LINE__</declaration_preprocessor><declaration_preprocessor>,</declaration_preprocessor> <declaration_preprocessor>__func__</declaration_preprocessor><declaration_preprocessor>,</declaration_preprocessor> <declaration_preprocessor>__VA_ARGS__</declaration_preprocessor> <declaration_preprocessor>)</declaration_preprocessor> </declaration>
</pdefine><pdefine id="//xsdoc_ref/c/macro/XSLog" definetype="function" lang="c"><name>XSLog</name>
<abstract><p>Logs a message (info level) to the standard error output
</p></abstract>
<parameterlist>
<parameter><name>...</name><desc><p>The format string (printf like) with optional format arguments for the format</p></desc></parameter>
</parameterlist>
<parsedparameterlist>
<parsedparameter><type></type><name>...</name></parsedparameter>
</parsedparameterlist>
<declaration><declaration_preprocessor>#define</declaration_preprocessor> <declaration_preprocessor>XSLog</declaration_preprocessor><declaration_preprocessor>(</declaration_preprocessor> <declaration_preprocessor>.</declaration_preprocessor><declaration_preprocessor>.</declaration_preprocessor><declaration_preprocessor>.</declaration_preprocessor> <declaration_preprocessor>)</declaration_preprocessor> <declaration_preprocessor>XSLogWithInfos</declaration_preprocessor><declaration_preprocessor>(</declaration_preprocessor> <declaration_preprocessor>XSLogLevelInfo</declaration_preprocessor><declaration_preprocessor>,</declaration_preprocessor> <declaration_preprocessor>__FILE__</declaration_preprocessor><declaration_preprocessor>,</declaration_preprocessor> <declaration_preprocessor>__LINE__</declaration_preprocessor><declaration_preprocessor>,</declaration_preprocessor> <declaration_preprocessor>__func__</declaration_preprocessor><declaration_preprocessor>,</declaration_preprocessor> <declaration_preprocessor>__VA_ARGS__</declaration_preprocessor> <declaration_preprocessor>)</declaration_preprocessor> </declaration>
</pdefine><pdefine id="//xsdoc_ref/c/macro/XSLogAlert" definetype="function" lang="c"><name>XSLogAlert</name>
<abstract><p>Logs a message (alert level) to the standard error output
</p></abstract>
<parameterlist>
<parameter><name>...</name><desc><p>The format string (printf like) with optional format arguments for the format</p></desc></parameter>
</parameterlist>
<parsedparameterlist>
<parsedparameter><type></type><name>...</name></parsedparameter>
</parsedparameterlist>
<declaration><declaration_preprocessor>#define</declaration_preprocessor> <declaration_preprocessor>XSLogAlert</declaration_preprocessor><declaration_preprocessor>(</declaration_preprocessor> <declaration_preprocessor>.</declaration_preprocessor><declaration_preprocessor>.</declaration_preprocessor><declaration_preprocessor>.</declaration_preprocessor> <declaration_preprocessor>)</declaration_preprocessor> <declaration_preprocessor>XSLogWithInfos</declaration_preprocessor><declaration_preprocessor>(</declaration_preprocessor> <declaration_preprocessor>XSLogLevelAlert</declaration_preprocessor><declaration_preprocessor>,</declaration_preprocessor> <declaration_preprocessor>__FILE__</declaration_preprocessor><declaration_preprocessor>,</declaration_preprocessor> <declaration_preprocessor>__LINE__</declaration_preprocessor><declaration_preprocessor>,</declaration_preprocessor> <declaration_preprocessor>__func__</declaration_preprocessor><declaration_preprocessor>,</declaration_preprocessor> <declaration_preprocessor>__VA_ARGS__</declaration_preprocessor> <declaration_preprocessor>)</declaration_preprocessor> </declaration>
</pdefine><pdefine id="//xsdoc_ref/c/macro/XSLogCritical" definetype="function" lang="c"><name>XSLogCritical</name>
<abstract><p>Logs a message (critical level) to the standard error output
</p></abstract>
<parameterlist>
<parameter><name>...</name><desc><p>The format string (printf like) with optional format arguments for the format</p></desc></parameter>
</parameterlist>
<parsedparameterlist>
<parsedparameter><type></type><name>...</name></parsedparameter>
</parsedparameterlist>
<declaration><declaration_preprocessor>#define</declaration_preprocessor> <declaration_preprocessor>XSLogCritical</declaration_preprocessor><declaration_preprocessor>(</declaration_preprocessor> <declaration_preprocessor>.</declaration_preprocessor><declaration_preprocessor>.</declaration_preprocessor><declaration_preprocessor>.</declaration_preprocessor> <declaration_preprocessor>)</declaration_preprocessor> <declaration_preprocessor>XSLogWithInfos</declaration_preprocessor><declaration_preprocessor>(</declaration_preprocessor> <declaration_preprocessor>XSLogLevelCritical</declaration_preprocessor><declaration_preprocessor>,</declaration_preprocessor> <declaration_preprocessor>__FILE__</declaration_preprocessor><declaration_preprocessor>,</declaration_preprocessor> <declaration_preprocessor>__LINE__</declaration_preprocessor><declaration_preprocessor>,</declaration_preprocessor> <declaration_preprocessor>__func__</declaration_preprocessor><declaration_preprocessor>,</declaration_preprocessor> <declaration_preprocessor>__VA_ARGS__</declaration_preprocessor> <declaration_preprocessor>)</declaration_preprocessor> </declaration>
</pdefine><pdefine id="//xsdoc_ref/c/macro/XSLogDebug" definetype="function" lang="c"><name>XSLogDebug</name>
<abstract><p>Logs a message (debug level) to the standard error output
</p></abstract>
<parameterlist>
<parameter><name>...</name><desc><p>The format string (printf like) with optional format arguments for the format</p></desc></parameter>
</parameterlist>
<parsedparameterlist>
<parsedparameter><type></type><name>...</name></parsedparameter>
</parsedparameterlist>
<declaration><declaration_preprocessor>#define</declaration_preprocessor> <declaration_preprocessor>XSLogDebug</declaration_preprocessor><declaration_preprocessor>(</declaration_preprocessor> <declaration_preprocessor>.</declaration_preprocessor><declaration_preprocessor>.</declaration_preprocessor><declaration_preprocessor>.</declaration_preprocessor> <declaration_preprocessor>)</declaration_preprocessor> <declaration_preprocessor>XSLogWithInfos</declaration_preprocessor><declaration_preprocessor>(</declaration_preprocessor> <declaration_preprocessor>XSLogLevelDebug</declaration_preprocessor><declaration_preprocessor>,</declaration_preprocessor> <declaration_preprocessor>__FILE__</declaration_preprocessor><declaration_preprocessor>,</declaration_preprocessor> <declaration_preprocessor>__LINE__</declaration_preprocessor><declaration_preprocessor>,</declaration_preprocessor> <declaration_preprocessor>__func__</declaration_preprocessor><declaration_preprocessor>,</declaration_preprocessor> <declaration_preprocessor>__VA_ARGS__</declaration_preprocessor> <declaration_preprocessor>)</declaration_preprocessor> </declaration>
</pdefine><pdefine id="//xsdoc_ref/c/macro/XSLogEdgeInsets" definetype="function" lang="c"><name>XSLogEdgeInsets</name>
<abstract><p>Logs an edge insets structure to the standard error output
</p></abstract>
<parameterlist>
<parameter><name>_e_</name><desc><p>The edge insets structure (XSEdgeInsets)</p></desc></parameter>
</parameterlist>
<parsedparameterlist>
<parsedparameter><type></type><name>_e_</name></parsedparameter>
</parsedparameterlist>
<attributelists><listattribute><name>See Also</name><list>
<item><name>XSLogEdgeInsetsWithInfos</name><value><hd_link logicalPath="//xsdoc_ref/doc/title:macro/XSLogEdgeInsetsWithInfos" isseealso="yes">XSLogEdgeInsetsWithInfos</hd_link></value></item></list></listattribute>
</attributelists>
<declaration><declaration_preprocessor>#define</declaration_preprocessor> <declaration_preprocessor>XSLogEdgeInsets</declaration_preprocessor><declaration_preprocessor>(</declaration_preprocessor> <declaration_preprocessor>_e_</declaration_preprocessor> <declaration_preprocessor>)</declaration_preprocessor> <declaration_preprocessor>XSLogEdgeInsetsWithInfos</declaration_preprocessor><declaration_preprocessor>(</declaration_preprocessor> <declaration_preprocessor>_e_</declaration_preprocessor><declaration_preprocessor>,</declaration_preprocessor> <declaration_preprocessor>__FILE__</declaration_preprocessor><declaration_preprocessor>,</declaration_preprocessor> <declaration_preprocessor>__LINE__</declaration_preprocessor><declaration_preprocessor>,</declaration_preprocessor> <declaration_preprocessor>__func__</declaration_preprocessor> <declaration_preprocessor>)</declaration_preprocessor> </declaration>
<autorelated>
<relateduid>//xsdoc_ref/doc/title:macro/XSLogEdgeInsetsWithInfos</relateduid>
</autorelated>
</pdefine><pdefine id="//xsdoc_ref/doc/title:macro/XSLogEdgeInsetsWithInfos" definetype="function" lang="c"><name>XSLogEdgeInsetsWithInfos</name>
<abstract><p>Logs an edge insets structure to the standard error output
</p></abstract>
<parameterlist>
<parameter><name>_e_</name><desc><p>The edge insets structure (XSEdgeInsets)</p></desc></parameter>
</parameterlist>
<parsedparameterlist>
<parsedparameter><type></type><name>_e_</name></parsedparameter>
</parsedparameterlist>
<attributelists><listattribute><name>See Also</name><list>
<item><name>XSLogEdgeInsets</name><value><hd_link logicalPath="//xsdoc_ref/c/macro/XSLogEdgeInsets" isseealso="yes">XSLogEdgeInsets</hd_link></value></item></list></listattribute>
</attributelists>
<declaration><declaration_preprocessor>#define</declaration_preprocessor> <declaration_preprocessor>XSLogEdgeInsets</declaration_preprocessor><declaration_preprocessor>(</declaration_preprocessor> <declaration_preprocessor>_e_</declaration_preprocessor> <declaration_preprocessor>)</declaration_preprocessor> <declaration_preprocessor>XSLogEdgeInsetsWithInfos</declaration_preprocessor><declaration_preprocessor>(</declaration_preprocessor> <declaration_preprocessor>_e_</declaration_preprocessor><declaration_preprocessor>,</declaration_preprocessor> <declaration_preprocessor>__FILE__</declaration_preprocessor><declaration_preprocessor>,</declaration_preprocessor> <declaration_preprocessor>__LINE__</declaration_preprocessor><declaration_preprocessor>,</declaration_preprocessor> <declaration_preprocessor>__func__</declaration_preprocessor> <declaration_preprocessor>)</declaration_preprocessor> </declaration>
<autorelated>
<relateduid>//xsdoc_ref/c/macro/XSLogEdgeInsets</relateduid>
</autorelated>
</pdefine><pdefine id="//xsdoc_ref/c/macro/XSLogEmergency" definetype="function" lang="c"><name>XSLogEmergency</name>
<abstract><p>Logs a message (emergency level) to the standard error output
</p></abstract>
<parameterlist>
<parameter><name>...</name><desc><p>The format string (printf like) with optional format arguments for the format</p></desc></parameter>
</parameterlist>
<parsedparameterlist>
<parsedparameter><type></type><name>...</name></parsedparameter>
</parsedparameterlist>
<declaration><declaration_preprocessor>#define</declaration_preprocessor> <declaration_preprocessor>XSLogEmergency</declaration_preprocessor><declaration_preprocessor>(</declaration_preprocessor> <declaration_preprocessor>.</declaration_preprocessor><declaration_preprocessor>.</declaration_preprocessor><declaration_preprocessor>.</declaration_preprocessor> <declaration_preprocessor>)</declaration_preprocessor> <declaration_preprocessor>XSLogWithInfos</declaration_preprocessor><declaration_preprocessor>(</declaration_preprocessor> <declaration_preprocessor>XSLogLevelEmergency</declaration_preprocessor><declaration_preprocessor>,</declaration_preprocessor> <declaration_preprocessor>__FILE__</declaration_preprocessor><declaration_preprocessor>,</declaration_preprocessor> <declaration_preprocessor>__LINE__</declaration_preprocessor><declaration_preprocessor>,</declaration_preprocessor> <declaration_preprocessor>__func__</declaration_preprocessor><declaration_preprocessor>,</declaration_preprocessor> <declaration_preprocessor>__VA_ARGS__</declaration_preprocessor> <declaration_preprocessor>)</declaration_preprocessor> </declaration>
</pdefine><pdefine id="//xsdoc_ref/c/macro/XSLogError" definetype="function" lang="c"><name>XSLogError</name>
<abstract><p>Logs a message (error level) to the standard error output
</p></abstract>
<parameterlist>
<parameter><name>...</name><desc><p>The format string (printf like) with optional format arguments for the format</p></desc></parameter>
</parameterlist>
<parsedparameterlist>
<parsedparameter><type></type><name>...</name></parsedparameter>
</parsedparameterlist>
<declaration><declaration_preprocessor>#define</declaration_preprocessor> <declaration_preprocessor>XSLogError</declaration_preprocessor><declaration_preprocessor>(</declaration_preprocessor> <declaration_preprocessor>.</declaration_preprocessor><declaration_preprocessor>.</declaration_preprocessor><declaration_preprocessor>.</declaration_preprocessor> <declaration_preprocessor>)</declaration_preprocessor> <declaration_preprocessor>XSLogWithInfos</declaration_preprocessor><declaration_preprocessor>(</declaration_preprocessor> <declaration_preprocessor>XSLogLevelError</declaration_preprocessor><declaration_preprocessor>,</declaration_preprocessor> <declaration_preprocessor>__FILE__</declaration_preprocessor><declaration_preprocessor>,</declaration_preprocessor> <declaration_preprocessor>__LINE__</declaration_preprocessor><declaration_preprocessor>,</declaration_preprocessor> <declaration_preprocessor>__func__</declaration_preprocessor><declaration_preprocessor>,</declaration_preprocessor> <declaration_preprocessor>__VA_ARGS__</declaration_preprocessor> <declaration_preprocessor>)</declaration_preprocessor> </declaration>
</pdefine><pdefine id="//xsdoc_ref/c/macro/XSLogInfo" definetype="function" lang="c"><name>XSLogInfo</name>
<abstract><p>Logs a message (info level) to the standard error output
</p></abstract>
<parameterlist>
<parameter><name>...</name><desc><p>The format string (printf like) with optional format arguments for the format</p></desc></parameter>
</parameterlist>
<parsedparameterlist>
<parsedparameter><type></type><name>...</name></parsedparameter>
</parsedparameterlist>
<declaration><declaration_preprocessor>#define</declaration_preprocessor> <declaration_preprocessor>XSLogInfo</declaration_preprocessor><declaration_preprocessor>(</declaration_preprocessor> <declaration_preprocessor>.</declaration_preprocessor><declaration_preprocessor>.</declaration_preprocessor><declaration_preprocessor>.</declaration_preprocessor> <declaration_preprocessor>)</declaration_preprocessor> <declaration_preprocessor>XSLogWithInfos</declaration_preprocessor><declaration_preprocessor>(</declaration_preprocessor> <declaration_preprocessor>XSLogLevelInfo</declaration_preprocessor><declaration_preprocessor>,</declaration_preprocessor> <declaration_preprocessor>__FILE__</declaration_preprocessor><declaration_preprocessor>,</declaration_preprocessor> <declaration_preprocessor>__LINE__</declaration_preprocessor><declaration_preprocessor>,</declaration_preprocessor> <declaration_preprocessor>__func__</declaration_preprocessor><declaration_preprocessor>,</declaration_preprocessor> <declaration_preprocessor>__VA_ARGS__</declaration_preprocessor> <declaration_preprocessor>)</declaration_preprocessor> </declaration>
</pdefine><pdefine id="//xsdoc_ref/c/macro/XSLogNotice" definetype="function" lang="c"><name>XSLogNotice</name>
<abstract><p>Logs a message (notice level) to the standard error output
</p></abstract>
<parameterlist>
<parameter><name>...</name><desc><p>The format string (printf like) with optional format arguments for the format</p></desc></parameter>
</parameterlist>
<parsedparameterlist>
<parsedparameter><type></type><name>...</name></parsedparameter>
</parsedparameterlist>
<declaration><declaration_preprocessor>#define</declaration_preprocessor> <declaration_preprocessor>XSLogNotice</declaration_preprocessor><declaration_preprocessor>(</declaration_preprocessor> <declaration_preprocessor>.</declaration_preprocessor><declaration_preprocessor>.</declaration_preprocessor><declaration_preprocessor>.</declaration_preprocessor> <declaration_preprocessor>)</declaration_preprocessor> <declaration_preprocessor>XSLogWithInfos</declaration_preprocessor><declaration_preprocessor>(</declaration_preprocessor> <declaration_preprocessor>XSLogLevelNotice</declaration_preprocessor><declaration_preprocessor>,</declaration_preprocessor> <declaration_preprocessor>__FILE__</declaration_preprocessor><declaration_preprocessor>,</declaration_preprocessor> <declaration_preprocessor>__LINE__</declaration_preprocessor><declaration_preprocessor>,</declaration_preprocessor> <declaration_preprocessor>__func__</declaration_preprocessor><declaration_preprocessor>,</declaration_preprocessor> <declaration_preprocessor>__VA_ARGS__</declaration_preprocessor> <declaration_preprocessor>)</declaration_preprocessor> </declaration>
</pdefine><pdefine id="//xsdoc_ref/c/macro/XSLogPoint" definetype="function" lang="c"><name>XSLogPoint</name>
<abstract><p>Logs a point structure to the standard error output
</p></abstract>
<parameterlist>
<parameter><name>_p_</name><desc><p>The point structure (XSPoint)</p></desc></parameter>
</parameterlist>
<parsedparameterlist>
<parsedparameter><type></type><name>_p_</name></parsedparameter>
</parsedparameterlist>
<attributelists><listattribute><name>See Also</name><list>
<item><name>XSLogPointWithInfos</name><value><hd_link logicalPath="//xsdoc_ref/doc/title:macro/XSLogPointWithInfos" isseealso="yes">XSLogPointWithInfos</hd_link></value></item></list></listattribute>
</attributelists>
<declaration><declaration_preprocessor>#define</declaration_preprocessor> <declaration_preprocessor>XSLogPoint</declaration_preprocessor><declaration_preprocessor>(</declaration_preprocessor> <declaration_preprocessor>_p_</declaration_preprocessor> <declaration_preprocessor>)</declaration_preprocessor> <declaration_preprocessor>XSLogPointWithInfos</declaration_preprocessor><declaration_preprocessor>(</declaration_preprocessor> <declaration_preprocessor>_p_</declaration_preprocessor><declaration_preprocessor>,</declaration_preprocessor> <declaration_preprocessor>__FILE__</declaration_preprocessor><declaration_preprocessor>,</declaration_preprocessor> <declaration_preprocessor>__LINE__</declaration_preprocessor><declaration_preprocessor>,</declaration_preprocessor> <declaration_preprocessor>__func__</declaration_preprocessor> <declaration_preprocessor>)</declaration_preprocessor> </declaration>
<autorelated>
<relateduid>//xsdoc_ref/doc/title:macro/XSLogPointWithInfos</relateduid>
</autorelated>
</pdefine><pdefine id="//xsdoc_ref/doc/title:macro/XSLogPointWithInfos" definetype="function" lang="c"><name>XSLogPointWithInfos</name>
<abstract><p>Logs a point structure to the standard error output
</p></abstract>
<parameterlist>
<parameter><name>_p_</name><desc><p>The point structure (XSPoint)</p></desc></parameter>
</parameterlist>
<parsedparameterlist>
<parsedparameter><type></type><name>_p_</name></parsedparameter>
</parsedparameterlist>
<attributelists><listattribute><name>See Also</name><list>
<item><name>XSLogPoint</name><value><hd_link logicalPath="//xsdoc_ref/c/macro/XSLogPoint" isseealso="yes">XSLogPoint</hd_link></value></item></list></listattribute>
</attributelists>
<declaration><declaration_preprocessor>#define</declaration_preprocessor> <declaration_preprocessor>XSLogPoint</declaration_preprocessor><declaration_preprocessor>(</declaration_preprocessor> <declaration_preprocessor>_p_</declaration_preprocessor> <declaration_preprocessor>)</declaration_preprocessor> <declaration_preprocessor>XSLogPointWithInfos</declaration_preprocessor><declaration_preprocessor>(</declaration_preprocessor> <declaration_preprocessor>_p_</declaration_preprocessor><declaration_preprocessor>,</declaration_preprocessor> <declaration_preprocessor>__FILE__</declaration_preprocessor><declaration_preprocessor>,</declaration_preprocessor> <declaration_preprocessor>__LINE__</declaration_preprocessor><declaration_preprocessor>,</declaration_preprocessor> <declaration_preprocessor>__func__</declaration_preprocessor> <declaration_preprocessor>)</declaration_preprocessor> </declaration>
<autorelated>
<relateduid>//xsdoc_ref/c/macro/XSLogPoint</relateduid>
</autorelated>
</pdefine><pdefine id="//xsdoc_ref/c/macro/XSLogRange" definetype="function" lang="c"><name>XSLogRange</name>
<abstract><p>Logs a range structure to the standard error output
</p></abstract>
<parameterlist>
<parameter><name>_r_</name><desc><p>The range structure (XSRange)</p></desc></parameter>
</parameterlist>
<parsedparameterlist>
<parsedparameter><type></type><name>_r_</name></parsedparameter>
</parsedparameterlist>
<attributelists><listattribute><name>See Also</name><list>
<item><name>XSLogRangeWithInfos</name><value><hd_link logicalPath="//xsdoc_ref/doc/title:macro/XSLogRangeWithInfos" isseealso="yes">XSLogRangeWithInfos</hd_link></value></item></list></listattribute>
</attributelists>
<declaration><declaration_preprocessor>#define</declaration_preprocessor> <declaration_preprocessor>XSLogRange</declaration_preprocessor><declaration_preprocessor>(</declaration_preprocessor> <declaration_preprocessor>_r_</declaration_preprocessor> <declaration_preprocessor>)</declaration_preprocessor> <declaration_preprocessor>XSLogRangeWithInfos</declaration_preprocessor><declaration_preprocessor>(</declaration_preprocessor> <declaration_preprocessor>_r_</declaration_preprocessor><declaration_preprocessor>,</declaration_preprocessor> <declaration_preprocessor>__FILE__</declaration_preprocessor><declaration_preprocessor>,</declaration_preprocessor> <declaration_preprocessor>__LINE__</declaration_preprocessor><declaration_preprocessor>,</declaration_preprocessor> <declaration_preprocessor>__func__</declaration_preprocessor> <declaration_preprocessor>)</declaration_preprocessor> </declaration>
<autorelated>
<relateduid>//xsdoc_ref/doc/title:macro/XSLogRangeWithInfos</relateduid>
</autorelated>
</pdefine><pdefine id="//xsdoc_ref/doc/title:macro/XSLogRangeWithInfos" definetype="function" lang="c"><name>XSLogRangeWithInfos</name>
<abstract><p>Logs a range structure to the standard error output
</p></abstract>
<parameterlist>
<parameter><name>_r_</name><desc><p>The range structure (XSRange)</p></desc></parameter>
</parameterlist>
<parsedparameterlist>
<parsedparameter><type></type><name>_r_</name></parsedparameter>
</parsedparameterlist>
<attributelists><listattribute><name>See Also</name><list>
<item><name>XSLogRange</name><value><hd_link logicalPath="//xsdoc_ref/c/macro/XSLogRange" isseealso="yes">XSLogRange</hd_link></value></item></list></listattribute>
</attributelists>
<declaration><declaration_preprocessor>#define</declaration_preprocessor> <declaration_preprocessor>XSLogRange</declaration_preprocessor><declaration_preprocessor>(</declaration_preprocessor> <declaration_preprocessor>_r_</declaration_preprocessor> <declaration_preprocessor>)</declaration_preprocessor> <declaration_preprocessor>XSLogRangeWithInfos</declaration_preprocessor><declaration_preprocessor>(</declaration_preprocessor> <declaration_preprocessor>_r_</declaration_preprocessor><declaration_preprocessor>,</declaration_preprocessor> <declaration_preprocessor>__FILE__</declaration_preprocessor><declaration_preprocessor>,</declaration_preprocessor> <declaration_preprocessor>__LINE__</declaration_preprocessor><declaration_preprocessor>,</declaration_preprocessor> <declaration_preprocessor>__func__</declaration_preprocessor> <declaration_preprocessor>)</declaration_preprocessor> </declaration>
<autorelated>
<relateduid>//xsdoc_ref/c/macro/XSLogRange</relateduid>
</autorelated>
</pdefine><pdefine id="//xsdoc_ref/c/macro/XSLogRect" definetype="function" lang="c"><name>XSLogRect</name>
<abstract><p>Logs a rectangle structure to the standard error output
</p></abstract>
<parameterlist>
<parameter><name>_r_</name><desc><p>The rectangle structure (XSRect)</p></desc></parameter>
</parameterlist>
<parsedparameterlist>
<parsedparameter><type></type><name>_r_</name></parsedparameter>
</parsedparameterlist>
<attributelists><listattribute><name>See Also</name><list>
<item><name>XSLogRectWithInfos</name><value><hd_link logicalPath="//xsdoc_ref/doc/title:macro/XSLogRectWithInfos" isseealso="yes">XSLogRectWithInfos</hd_link></value></item></list></listattribute>
</attributelists>
<declaration><declaration_preprocessor>#define</declaration_preprocessor> <declaration_preprocessor>XSLogRect</declaration_preprocessor><declaration_preprocessor>(</declaration_preprocessor> <declaration_preprocessor>_r_</declaration_preprocessor> <declaration_preprocessor>)</declaration_preprocessor> <declaration_preprocessor>XSLogRectWithInfos</declaration_preprocessor><declaration_preprocessor>(</declaration_preprocessor> <declaration_preprocessor>_r_</declaration_preprocessor><declaration_preprocessor>,</declaration_preprocessor> <declaration_preprocessor>__FILE__</declaration_preprocessor><declaration_preprocessor>,</declaration_preprocessor> <declaration_preprocessor>__LINE__</declaration_preprocessor><declaration_preprocessor>,</declaration_preprocessor> <declaration_preprocessor>__func__</declaration_preprocessor> <declaration_preprocessor>)</declaration_preprocessor> </declaration>
<autorelated>
<relateduid>//xsdoc_ref/doc/title:macro/XSLogRectWithInfos</relateduid>
</autorelated>
</pdefine><pdefine id="//xsdoc_ref/doc/title:macro/XSLogRectWithInfos" definetype="function" lang="c"><name>XSLogRectWithInfos</name>
<abstract><p>Logs a rectangle structure to the standard error output
</p></abstract>
<parameterlist>
<parameter><name>_r_</name><desc><p>The rectangle structure (XSRect)</p></desc></parameter>
</parameterlist>
<parsedparameterlist>
<parsedparameter><type></type><name>_r_</name></parsedparameter>
</parsedparameterlist>
<attributelists><listattribute><name>See Also</name><list>
<item><name>XSLogRect</name><value><hd_link logicalPath="//xsdoc_ref/c/macro/XSLogRect" isseealso="yes">XSLogRect</hd_link></value></item></list></listattribute>
</attributelists>
<declaration><declaration_preprocessor>#define</declaration_preprocessor> <declaration_preprocessor>XSLogRect</declaration_preprocessor><declaration_preprocessor>(</declaration_preprocessor> <declaration_preprocessor>_r_</declaration_preprocessor> <declaration_preprocessor>)</declaration_preprocessor> <declaration_preprocessor>XSLogRectWithInfos</declaration_preprocessor><declaration_preprocessor>(</declaration_preprocessor> <declaration_preprocessor>_r_</declaration_preprocessor><declaration_preprocessor>,</declaration_preprocessor> <declaration_preprocessor>__FILE__</declaration_preprocessor><declaration_preprocessor>,</declaration_preprocessor> <declaration_preprocessor>__LINE__</declaration_preprocessor><declaration_preprocessor>,</declaration_preprocessor> <declaration_preprocessor>__func__</declaration_preprocessor> <declaration_preprocessor>)</declaration_preprocessor> </declaration>
<autorelated>
<relateduid>//xsdoc_ref/c/macro/XSLogRect</relateduid>
</autorelated>
</pdefine><pdefine id="//xsdoc_ref/c/macro/XSLogSize" definetype="function" lang="c"><name>XSLogSize</name>
<abstract><p>Logs a size structure to the standard error output
</p></abstract>
<parameterlist>
<parameter><name>_s_</name><desc><p>The size structure (XSSize)</p></desc></parameter>
</parameterlist>
<parsedparameterlist>
<parsedparameter><type></type><name>_s_</name></parsedparameter>
</parsedparameterlist>
<attributelists><listattribute><name>See Also</name><list>
<item><name>XSLogSizeWithInfos</name><value><hd_link logicalPath="//xsdoc_ref/doc/title:macro/XSLogSizeWithInfos" isseealso="yes">XSLogSizeWithInfos</hd_link></value></item></list></listattribute>
</attributelists>
<declaration><declaration_preprocessor>#define</declaration_preprocessor> <declaration_preprocessor>XSLogSize</declaration_preprocessor><declaration_preprocessor>(</declaration_preprocessor> <declaration_preprocessor>_s_</declaration_preprocessor> <declaration_preprocessor>)</declaration_preprocessor> <declaration_preprocessor>XSLogSizeWithInfos</declaration_preprocessor><declaration_preprocessor>(</declaration_preprocessor> <declaration_preprocessor>_s_</declaration_preprocessor><declaration_preprocessor>,</declaration_preprocessor> <declaration_preprocessor>__FILE__</declaration_preprocessor><declaration_preprocessor>,</declaration_preprocessor> <declaration_preprocessor>__LINE__</declaration_preprocessor><declaration_preprocessor>,</declaration_preprocessor> <declaration_preprocessor>__func__</declaration_preprocessor> <declaration_preprocessor>)</declaration_preprocessor> </declaration>
<autorelated>
<relateduid>//xsdoc_ref/doc/title:macro/XSLogSizeWithInfos</relateduid>
</autorelated>
</pdefine><pdefine id="//xsdoc_ref/doc/title:macro/XSLogSizeWithInfos" definetype="function" lang="c"><name>XSLogSizeWithInfos</name>
<abstract><p>Logs a size structure to the standard error output
</p></abstract>
<parameterlist>
<parameter><name>_s_</name><desc><p>The size structure (XSSize)</p></desc></parameter>
</parameterlist>
<parsedparameterlist>
<parsedparameter><type></type><name>_s_</name></parsedparameter>
</parsedparameterlist>
<attributelists><listattribute><name>See Also</name><list>
<item><name>XSLogSize</name><value><hd_link logicalPath="//xsdoc_ref/c/macro/XSLogSize" isseealso="yes">XSLogSize</hd_link></value></item></list></listattribute>
</attributelists>
<declaration><declaration_preprocessor>#define</declaration_preprocessor> <declaration_preprocessor>XSLogSize</declaration_preprocessor><declaration_preprocessor>(</declaration_preprocessor> <declaration_preprocessor>_s_</declaration_preprocessor> <declaration_preprocessor>)</declaration_preprocessor> <declaration_preprocessor>XSLogSizeWithInfos</declaration_preprocessor><declaration_preprocessor>(</declaration_preprocessor> <declaration_preprocessor>_s_</declaration_preprocessor><declaration_preprocessor>,</declaration_preprocessor> <declaration_preprocessor>__FILE__</declaration_preprocessor><declaration_preprocessor>,</declaration_preprocessor> <declaration_preprocessor>__LINE__</declaration_preprocessor><declaration_preprocessor>,</declaration_preprocessor> <declaration_preprocessor>__func__</declaration_preprocessor> <declaration_preprocessor>)</declaration_preprocessor> </declaration>
<autorelated>
<relateduid>//xsdoc_ref/c/macro/XSLogSize</relateduid>
</autorelated>
</pdefine><pdefine id="//xsdoc_ref/c/macro/XSLogWarning" definetype="function" lang="c"><name>XSLogWarning</name>
<abstract><p>Logs a message (warning level) to the standard error output
</p></abstract>
<parameterlist>
<parameter><name>...</name><desc><p>The format string (printf like) with optional format arguments for the format</p></desc></parameter>
</parameterlist>
<parsedparameterlist>
<parsedparameter><type></type><name>...</name></parsedparameter>
</parsedparameterlist>
<declaration><declaration_preprocessor>#define</declaration_preprocessor> <declaration_preprocessor>XSLogWarning</declaration_preprocessor><declaration_preprocessor>(</declaration_preprocessor> <declaration_preprocessor>.</declaration_preprocessor><declaration_preprocessor>.</declaration_preprocessor><declaration_preprocessor>.</declaration_preprocessor> <declaration_preprocessor>)</declaration_preprocessor> <declaration_preprocessor>XSLogWithInfos</declaration_preprocessor><declaration_preprocessor>(</declaration_preprocessor> <declaration_preprocessor>XSLogLevelWarning</declaration_preprocessor><declaration_preprocessor>,</declaration_preprocessor> <declaration_preprocessor>__FILE__</declaration_preprocessor><declaration_preprocessor>,</declaration_preprocessor> <declaration_preprocessor>__LINE__</declaration_preprocessor><declaration_preprocessor>,</declaration_preprocessor> <declaration_preprocessor>__func__</declaration_preprocessor><declaration_preprocessor>,</declaration_preprocessor> <declaration_preprocessor>__VA_ARGS__</declaration_preprocessor> <declaration_preprocessor>)</declaration_preprocessor> </declaration>
</pdefine><pdefine id="//xsdoc_ref/c/macro/XSShow" definetype="function" lang="c"><name>XSShow</name>
<abstract><p>Logs the description of an object to the console
</p></abstract>
<parameterlist>
<parameter><name>_obj_</name><desc><p>The object to log</p></desc></parameter>
</parameterlist>
<parsedparameterlist>
<parsedparameter><type></type><name>_obj_</name></parsedparameter>
</parsedparameterlist>
<declaration><declaration_preprocessor>#define</declaration_preprocessor> <declaration_preprocessor>XSShow</declaration_preprocessor><declaration_preprocessor>(</declaration_preprocessor> <declaration_preprocessor>_obj_</declaration_preprocessor> <declaration_preprocessor>)</declaration_preprocessor> <declaration_preprocessor>XSShowWithInfos</declaration_preprocessor><declaration_preprocessor>(</declaration_preprocessor> <declaration_preprocessor>_obj_</declaration_preprocessor><declaration_preprocessor>,</declaration_preprocessor> <declaration_preprocessor>__FILE__</declaration_preprocessor><declaration_preprocessor>,</declaration_preprocessor> <declaration_preprocessor>__LINE__</declaration_preprocessor><declaration_preprocessor>,</declaration_preprocessor> <declaration_preprocessor>__func__</declaration_preprocessor> <declaration_preprocessor>)</declaration_preprocessor> </declaration>
</pdefine><pdefine id="//xsdoc_ref/c/macro/XSVLog" definetype="function" lang="c"><name>XSVLog</name>
<abstract><p>Logs a message (info level) to the standard error output
</p></abstract>
<parameterlist>
<parameter><name>_fmt_</name><desc><p>The format string (printf like)</p></desc></parameter>
<parameter><name>_args_</name><desc><p>Arguments for the format (va_list)</p></desc></parameter>
</parameterlist>
<parsedparameterlist>
<parsedparameter><type></type><name>_fmt_</name></parsedparameter>
<parsedparameter><type></type><name>_args_</name></parsedparameter>
</parsedparameterlist>
<declaration><declaration_preprocessor>#define</declaration_preprocessor> <declaration_preprocessor>XSVLog</declaration_preprocessor><declaration_preprocessor>(</declaration_preprocessor> <declaration_preprocessor>_fmt_</declaration_preprocessor><declaration_preprocessor>,</declaration_preprocessor> <declaration_preprocessor>_args_</declaration_preprocessor> <declaration_preprocessor>)</declaration_preprocessor> <declaration_preprocessor>XSLogWithInfos</declaration_preprocessor><declaration_preprocessor>(</declaration_preprocessor> <declaration_preprocessor>XSLogLevelInfo</declaration_preprocessor><declaration_preprocessor>,</declaration_preprocessor> <declaration_preprocessor>__FILE__</declaration_preprocessor><declaration_preprocessor>,</declaration_preprocessor> <declaration_preprocessor>__LINE__</declaration_preprocessor><declaration_preprocessor>,</declaration_preprocessor> <declaration_preprocessor>__func__</declaration_preprocessor><declaration_preprocessor>,</declaration_preprocessor> <declaration_preprocessor>_fmt_</declaration_preprocessor><declaration_preprocessor>,</declaration_preprocessor> <declaration_preprocessor>_args_</declaration_preprocessor> <declaration_preprocessor>)</declaration_preprocessor> </declaration>
</pdefine><pdefine id="//xsdoc_ref/c/macro/XSVLogAlert" definetype="function" lang="c"><name>XSVLogAlert</name>
<abstract><p>Logs a message (alert level) to the standard error output
</p></abstract>
<parameterlist>
<parameter><name>_fmt_</name><desc><p>The format string (printf like)</p></desc></parameter>
<parameter><name>_args_</name><desc><p>Arguments for the format (va_list)</p></desc></parameter>
</parameterlist>
<parsedparameterlist>
<parsedparameter><type></type><name>_fmt_</name></parsedparameter>
<parsedparameter><type></type><name>_args_</name></parsedparameter>
</parsedparameterlist>
<declaration><declaration_preprocessor>#define</declaration_preprocessor> <declaration_preprocessor>XSVLogAlert</declaration_preprocessor><declaration_preprocessor>(</declaration_preprocessor> <declaration_preprocessor>_fmt_</declaration_preprocessor><declaration_preprocessor>,</declaration_preprocessor> <declaration_preprocessor>_args_</declaration_preprocessor> <declaration_preprocessor>)</declaration_preprocessor> <declaration_preprocessor>XSLogWithInfos</declaration_preprocessor><declaration_preprocessor>(</declaration_preprocessor> <declaration_preprocessor>XSLogLevelAlert</declaration_preprocessor><declaration_preprocessor>,</declaration_preprocessor> <declaration_preprocessor>__FILE__</declaration_preprocessor><declaration_preprocessor>,</declaration_preprocessor> <declaration_preprocessor>__LINE__</declaration_preprocessor><declaration_preprocessor>,</declaration_preprocessor> <declaration_preprocessor>__func__</declaration_preprocessor><declaration_preprocessor>,</declaration_preprocessor> <declaration_preprocessor>_fmt_</declaration_preprocessor><declaration_preprocessor>,</declaration_preprocessor> <declaration_preprocessor>_args_</declaration_preprocessor> <declaration_preprocessor>)</declaration_preprocessor> </declaration>
</pdefine><pdefine id="//xsdoc_ref/c/macro/XSVLogCritical" definetype="function" lang="c"><name>XSVLogCritical</name>
<abstract><p>Logs a message (critical level) to the standard error output
</p></abstract>
<parameterlist>
<parameter><name>_fmt_</name><desc><p>The format string (printf like)</p></desc></parameter>
<parameter><name>_args_</name><desc><p>Arguments for the format (va_list)</p></desc></parameter>
</parameterlist>
<parsedparameterlist>
<parsedparameter><type></type><name>_fmt_</name></parsedparameter>
<parsedparameter><type></type><name>_args_</name></parsedparameter>
</parsedparameterlist>
<declaration><declaration_preprocessor>#define</declaration_preprocessor> <declaration_preprocessor>XSVLogCritical</declaration_preprocessor><declaration_preprocessor>(</declaration_preprocessor> <declaration_preprocessor>_fmt_</declaration_preprocessor><declaration_preprocessor>,</declaration_preprocessor> <declaration_preprocessor>_args_</declaration_preprocessor> <declaration_preprocessor>)</declaration_preprocessor> <declaration_preprocessor>XSLogWithInfos</declaration_preprocessor><declaration_preprocessor>(</declaration_preprocessor> <declaration_preprocessor>XSLogLevelCritical</declaration_preprocessor><declaration_preprocessor>,</declaration_preprocessor> <declaration_preprocessor>__FILE__</declaration_preprocessor><declaration_preprocessor>,</declaration_preprocessor> <declaration_preprocessor>__LINE__</declaration_preprocessor><declaration_preprocessor>,</declaration_preprocessor> <declaration_preprocessor>__func__</declaration_preprocessor><declaration_preprocessor>,</declaration_preprocessor> <declaration_preprocessor>_fmt_</declaration_preprocessor><declaration_preprocessor>,</declaration_preprocessor> <declaration_preprocessor>_args_</declaration_preprocessor> <declaration_preprocessor>)</declaration_preprocessor> </declaration>
</pdefine><pdefine id="//xsdoc_ref/c/macro/XSVLogDebug" definetype="function" lang="c"><name>XSVLogDebug</name>
<abstract><p>Logs a message (debug level) to the standard error output
</p></abstract>
<parameterlist>
<parameter><name>_fmt_</name><desc><p>The format string (printf like)</p></desc></parameter>
<parameter><name>_args_</name><desc><p>Arguments for the format (va_list)</p></desc></parameter>
</parameterlist>
<parsedparameterlist>
<parsedparameter><type></type><name>_fmt_</name></parsedparameter>
<parsedparameter><type></type><name>_args_</name></parsedparameter>
</parsedparameterlist>
<declaration><declaration_preprocessor>#define</declaration_preprocessor> <declaration_preprocessor>XSVLogDebug</declaration_preprocessor><declaration_preprocessor>(</declaration_preprocessor> <declaration_preprocessor>_fmt_</declaration_preprocessor><declaration_preprocessor>,</declaration_preprocessor> <declaration_preprocessor>_args_</declaration_preprocessor> <declaration_preprocessor>)</declaration_preprocessor> <declaration_preprocessor>XSLogWithInfos</declaration_preprocessor><declaration_preprocessor>(</declaration_preprocessor> <declaration_preprocessor>XSLogLevelDebug</declaration_preprocessor><declaration_preprocessor>,</declaration_preprocessor> <declaration_preprocessor>__FILE__</declaration_preprocessor><declaration_preprocessor>,</declaration_preprocessor> <declaration_preprocessor>__LINE__</declaration_preprocessor><declaration_preprocessor>,</declaration_preprocessor> <declaration_preprocessor>__func__</declaration_preprocessor><declaration_preprocessor>,</declaration_preprocessor> <declaration_preprocessor>_fmt_</declaration_preprocessor><declaration_preprocessor>,</declaration_preprocessor> <declaration_preprocessor>_args_</declaration_preprocessor> <declaration_preprocessor>)</declaration_preprocessor> </declaration>
</pdefine><pdefine id="//xsdoc_ref/c/macro/XSVLogEmergency" definetype="function" lang="c"><name>XSVLogEmergency</name>
<abstract><p>Logs a message (emergency level) to the standard error output
</p></abstract>
<parameterlist>
<parameter><name>_fmt_</name><desc><p>The format string (printf like)</p></desc></parameter>
<parameter><name>_args_</name><desc><p>Arguments for the format (va_list)</p></desc></parameter>
</parameterlist>
<parsedparameterlist>
<parsedparameter><type></type><name>_fmt_</name></parsedparameter>
<parsedparameter><type></type><name>_args_</name></parsedparameter>
</parsedparameterlist>
<declaration><declaration_preprocessor>#define</declaration_preprocessor> <declaration_preprocessor>XSVLogEmergency</declaration_preprocessor><declaration_preprocessor>(</declaration_preprocessor> <declaration_preprocessor>_fmt_</declaration_preprocessor><declaration_preprocessor>,</declaration_preprocessor> <declaration_preprocessor>_args_</declaration_preprocessor> <declaration_preprocessor>)</declaration_preprocessor> <declaration_preprocessor>XSLogWithInfos</declaration_preprocessor><declaration_preprocessor>(</declaration_preprocessor> <declaration_preprocessor>XSLogLevelEmergency</declaration_preprocessor><declaration_preprocessor>,</declaration_preprocessor> <declaration_preprocessor>__FILE__</declaration_preprocessor><declaration_preprocessor>,</declaration_preprocessor> <declaration_preprocessor>__LINE__</declaration_preprocessor><declaration_preprocessor>,</declaration_preprocessor> <declaration_preprocessor>__func__</declaration_preprocessor><declaration_preprocessor>,</declaration_preprocessor> <declaration_preprocessor>_fmt_</declaration_preprocessor><declaration_preprocessor>,</declaration_preprocessor> <declaration_preprocessor>_args_</declaration_preprocessor> <declaration_preprocessor>)</declaration_preprocessor> </declaration>
</pdefine><pdefine id="//xsdoc_ref/c/macro/XSVLogError" definetype="function" lang="c"><name>XSVLogError</name>
<abstract><p>Logs a message (error level) to the standard error output
</p></abstract>
<parameterlist>
<parameter><name>_fmt_</name><desc><p>The format string (printf like)</p></desc></parameter>
<parameter><name>_args_</name><desc><p>Arguments for the format (va_list)</p></desc></parameter>
</parameterlist>
<parsedparameterlist>
<parsedparameter><type></type><name>_fmt_</name></parsedparameter>
<parsedparameter><type></type><name>_args_</name></parsedparameter>
</parsedparameterlist>
<declaration><declaration_preprocessor>#define</declaration_preprocessor> <declaration_preprocessor>XSVLogError</declaration_preprocessor><declaration_preprocessor>(</declaration_preprocessor> <declaration_preprocessor>_fmt_</declaration_preprocessor><declaration_preprocessor>,</declaration_preprocessor> <declaration_preprocessor>_args_</declaration_preprocessor> <declaration_preprocessor>)</declaration_preprocessor> <declaration_preprocessor>XSLogWithInfos</declaration_preprocessor><declaration_preprocessor>(</declaration_preprocessor> <declaration_preprocessor>XSLogLevelError</declaration_preprocessor><declaration_preprocessor>,</declaration_preprocessor> <declaration_preprocessor>__FILE__</declaration_preprocessor><declaration_preprocessor>,</declaration_preprocessor> <declaration_preprocessor>__LINE__</declaration_preprocessor><declaration_preprocessor>,</declaration_preprocessor> <declaration_preprocessor>__func__</declaration_preprocessor><declaration_preprocessor>,</declaration_preprocessor> <declaration_preprocessor>_fmt_</declaration_preprocessor><declaration_preprocessor>,</declaration_preprocessor> <declaration_preprocessor>_args_</declaration_preprocessor> <declaration_preprocessor>)</declaration_preprocessor> </declaration>
</pdefine><pdefine id="//xsdoc_ref/c/macro/XSVLogInfo" definetype="function" lang="c"><name>XSVLogInfo</name>
<abstract><p>Logs a message (info level) to the standard error output
</p></abstract>
<parameterlist>
<parameter><name>_fmt_</name><desc><p>The format string (printf like)</p></desc></parameter>
<parameter><name>_args_</name><desc><p>Arguments for the format (va_list)</p></desc></parameter>
</parameterlist>
<parsedparameterlist>
<parsedparameter><type></type><name>_fmt_</name></parsedparameter>
<parsedparameter><type></type><name>_args_</name></parsedparameter>
</parsedparameterlist>
<declaration><declaration_preprocessor>#define</declaration_preprocessor> <declaration_preprocessor>XSVLogInfo</declaration_preprocessor><declaration_preprocessor>(</declaration_preprocessor> <declaration_preprocessor>_fmt_</declaration_preprocessor><declaration_preprocessor>,</declaration_preprocessor> <declaration_preprocessor>_args_</declaration_preprocessor> <declaration_preprocessor>)</declaration_preprocessor> <declaration_preprocessor>XSLogWithInfos</declaration_preprocessor><declaration_preprocessor>(</declaration_preprocessor> <declaration_preprocessor>XSLogLevelInfo</declaration_preprocessor><declaration_preprocessor>,</declaration_preprocessor> <declaration_preprocessor>__FILE__</declaration_preprocessor><declaration_preprocessor>,</declaration_preprocessor> <declaration_preprocessor>__LINE__</declaration_preprocessor><declaration_preprocessor>,</declaration_preprocessor> <declaration_preprocessor>__func__</declaration_preprocessor><declaration_preprocessor>,</declaration_preprocessor> <declaration_preprocessor>_fmt_</declaration_preprocessor><declaration_preprocessor>,</declaration_preprocessor> <declaration_preprocessor>_args_</declaration_preprocessor> <declaration_preprocessor>)</declaration_preprocessor> </declaration>
</pdefine><pdefine id="//xsdoc_ref/c/macro/XSVLogNotice" definetype="function" lang="c"><name>XSVLogNotice</name>
<abstract><p>Logs a message (notice level) to the standard error output
</p></abstract>
<parameterlist>
<parameter><name>_fmt_</name><desc><p>The format string (printf like)</p></desc></parameter>
<parameter><name>_args_</name><desc><p>Arguments for the format (va_list)</p></desc></parameter>
</parameterlist>
<parsedparameterlist>
<parsedparameter><type></type><name>_fmt_</name></parsedparameter>
<parsedparameter><type></type><name>_args_</name></parsedparameter>
</parsedparameterlist>
<declaration><declaration_preprocessor>#define</declaration_preprocessor> <declaration_preprocessor>XSVLogNotice</declaration_preprocessor><declaration_preprocessor>(</declaration_preprocessor> <declaration_preprocessor>_fmt_</declaration_preprocessor><declaration_preprocessor>,</declaration_preprocessor> <declaration_preprocessor>_args_</declaration_preprocessor> <declaration_preprocessor>)</declaration_preprocessor> <declaration_preprocessor>XSLogWithInfos</declaration_preprocessor><declaration_preprocessor>(</declaration_preprocessor> <declaration_preprocessor>XSLogLevelNotice</declaration_preprocessor><declaration_preprocessor>,</declaration_preprocessor> <declaration_preprocessor>__FILE__</declaration_preprocessor><declaration_preprocessor>,</declaration_preprocessor> <declaration_preprocessor>__LINE__</declaration_preprocessor><declaration_preprocessor>,</declaration_preprocessor> <declaration_preprocessor>__func__</declaration_preprocessor><declaration_preprocessor>,</declaration_preprocessor> <declaration_preprocessor>_fmt_</declaration_preprocessor><declaration_preprocessor>,</declaration_preprocessor> <declaration_preprocessor>_args_</declaration_preprocessor> <declaration_preprocessor>)</declaration_preprocessor> </declaration>
</pdefine><pdefine id="//xsdoc_ref/c/macro/XSVLogWarning" definetype="function" lang="c"><name>XSVLogWarning</name>
<abstract><p>Logs a message (warning level) to the standard error output
</p></abstract>
<parameterlist>
<parameter><name>_fmt_</name><desc><p>The format string (printf like)</p></desc></parameter>
<parameter><name>_args_</name><desc><p>Arguments for the format (va_list)</p></desc></parameter>
</parameterlist>
<parsedparameterlist>
<parsedparameter><type></type><name>_fmt_</name></parsedparameter>
<parsedparameter><type></type><name>_args_</name></parsedparameter>
</parsedparameterlist>
<declaration><declaration_preprocessor>#define</declaration_preprocessor> <declaration_preprocessor>XSVLogWarning</declaration_preprocessor><declaration_preprocessor>(</declaration_preprocessor> <declaration_preprocessor>_fmt_</declaration_preprocessor><declaration_preprocessor>,</declaration_preprocessor> <declaration_preprocessor>_args_</declaration_preprocessor> <declaration_preprocessor>)</declaration_preprocessor> <declaration_preprocessor>XSLogWithInfos</declaration_preprocessor><declaration_preprocessor>(</declaration_preprocessor> <declaration_preprocessor>XSLogLevelWarning</declaration_preprocessor><declaration_preprocessor>,</declaration_preprocessor> <declaration_preprocessor>__FILE__</declaration_preprocessor><declaration_preprocessor>,</declaration_preprocessor> <declaration_preprocessor>__LINE__</declaration_preprocessor><declaration_preprocessor>,</declaration_preprocessor> <declaration_preprocessor>__func__</declaration_preprocessor><declaration_preprocessor>,</declaration_preprocessor> <declaration_preprocessor>_fmt_</declaration_preprocessor><declaration_preprocessor>,</declaration_preprocessor> <declaration_preprocessor>_args_</declaration_preprocessor> <declaration_preprocessor>)</declaration_preprocessor> </declaration>
</pdefine></defines><copyrightinfo>&#169; (c) 2010-2014 - Jean-David Gadina - www.xs-labs.com
</copyrightinfo>
<timestamp>Thursday, September 04, 2014</timestamp>
</header>