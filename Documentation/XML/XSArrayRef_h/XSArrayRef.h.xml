<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE header PUBLIC "-//Apple Computer//DTD HEADERDOC 1.6//EN" "/System/Library/DTDs/HeaderDoc-1.6.dtd">
<header id="//xsdoc_ref/doc/header/XSArrayRef.h" lang="c" filename="XSArrayRef.h" headerpath="/Users/macmade/Documents/Macmade/Development/GitHub/XSFoundation/XSFoundation/include/XS/Classes/XSArrayRef.h"><name>XSArrayRef.h</name>
<abstract><p>XSArray class
</p></abstract>
<attributes><attribute><name>Author</name><value>Jean-David Gadina - www.xs-labs.com</value></attribute>
</attributes>
<includes>
<include><hd_link logicalPath="//xsdoc_ref/doc/header/XSTypes.h">&lt;XS/XSTypes.h&gt;</hd_link></include>
<include><hd_link logicalPath="//xsdoc_ref/doc/header/XSMacros.h">&lt;XS/XSMacros.h&gt;</hd_link></include>
</includes>
<desc><p>...
</p></desc>
<functions><function id="//xsdoc_ref/c/func/XSArray_AddObject" lang="c"><name>XSArray_AddObject</name>
<abstract><p>Adds an object in an array
</p></abstract>
<parameterlist>
<parameter><name>array</name><desc><p>The array</p></desc></parameter>
<parameter><name>object</name><desc><p>The object (cannot be NULL)</p></desc></parameter>
</parameterlist>
<parsedparameterlist>
<parsedparameter><type>XSMutableArrayRef</type><name>array</name></parsedparameter>
<parsedparameter><type>XSObjectRef</type><name>object</name></parsedparameter>
</parsedparameterlist>
<returntype> XS_EXPORT void</returntype>
<declaration><declaration_type>XS_EXPORT</declaration_type> <declaration_type>void</declaration_type> <declaration_function>XSArray_AddObject</declaration_function>(
    <declaration_type>XSMutableArrayRef</declaration_type> <declaration_param>array</declaration_param>,
    <declaration_type>XSObjectRef</declaration_type> <declaration_param>object</declaration_param> );  </declaration>
<desc><p>An error will be produced if the array is not mutable
</p></desc>
</function><function id="//xsdoc_ref/c/func/XSArray_AppendArray" lang="c"><name>XSArray_AppendArray</name>
<abstract><p>Appends values from an array to an array
</p></abstract>
<parameterlist>
<parameter><name>array</name><desc><p>The array</p></desc></parameter>
<parameter><name>objects</name><desc><p>The array with the objects to append</p></desc></parameter>
</parameterlist>
<parsedparameterlist>
<parsedparameter><type>XSMutableArrayRef</type><name>array</name></parsedparameter>
<parsedparameter><type>XSArrayRef</type><name>objects</name></parsedparameter>
</parsedparameterlist>
<returntype> XS_EXPORT void</returntype>
<declaration><declaration_type>XS_EXPORT</declaration_type> <declaration_type>void</declaration_type> <declaration_function>XSArray_AppendArray</declaration_function>(
    <declaration_type>XSMutableArrayRef</declaration_type> <declaration_param>array</declaration_param>,
    <declaration_type>XSArrayRef</declaration_type> <declaration_param>objects</declaration_param> );  </declaration>
<desc><p>An error will be produced if the array is not mutable
</p></desc>
</function><function id="//xsdoc_ref/c/func/XSArray_ApplyFunction" lang="c"><name>XSArray_ApplyFunction</name>
<abstract><p>Applies a function for each element of an array
</p></abstract>
<parameterlist>
<parameter><name>array</name><desc><p>The array</p></desc></parameter>
<parameter><name>function</name><desc><p>The function to apply</p></desc></parameter>
</parameterlist>
<parsedparameterlist>
<parsedparameter><type>XSArrayRef</type><name>array</name></parsedparameter>
<parsedparameter><type>XSArray_ApplierFunction</type><name>function</name></parsedparameter>
</parsedparameterlist>
<attributelists><listattribute><name>See</name><list>
<item><name>XSArray_ApplierFunction</name><value><hd_link logicalPath="XSArray_ApplierFunction" isseealso="yes">XSArray_ApplierFunction</hd_link></value></item></list></listattribute>
</attributelists>
<returntype> XS_EXPORT void</returntype>
<declaration><declaration_type>XS_EXPORT</declaration_type> <declaration_type>void</declaration_type> <declaration_function>XSArray_ApplyFunction</declaration_function>(
    <declaration_type>XSArrayRef</declaration_type> <declaration_param>array</declaration_param>,
    <declaration_type>XSArray_ApplierFunction</declaration_type> <declaration_param>function</declaration_param> );  </declaration>
<desc><p>The function will be called with each object contained in the array
</p></desc>
</function><function id="//xsdoc_ref/c/func/XSArray_ApplyMethod" lang="c"><name>XSArray_ApplyMethod</name>
<abstract><p>Applies a method for each element of an array
</p></abstract>
<parameterlist>
<parameter><name>array</name><desc><p>The array</p></desc></parameter>
<parameter><name>object</name><desc><p>The object on which to call the method</p></desc></parameter>
<parameter><name>method</name><desc><p>The function to apply</p></desc></parameter>
</parameterlist>
<parsedparameterlist>
<parsedparameter><type>XSArrayRef</type><name>array</name></parsedparameter>
<parsedparameter><type>XSObjectRef</type><name>object</name></parsedparameter>
<parsedparameter><type>XSArray_ApplierMethod</type><name>method</name></parsedparameter>
</parsedparameterlist>
<attributelists><listattribute><name>See</name><list>
<item><name>XSArray_ApplierMethod</name><value><hd_link logicalPath="XSArray_ApplierMethod" isseealso="yes">XSArray_ApplierMethod</hd_link></value></item></list></listattribute>
</attributelists>
<returntype> XS_EXPORT void</returntype>
<declaration><declaration_type>XS_EXPORT</declaration_type> <declaration_type>void</declaration_type> <declaration_function>XSArray_ApplyMethod</declaration_function>(
    <declaration_type>XSArrayRef</declaration_type> <declaration_param>array</declaration_param>,
    <declaration_type>XSObjectRef</declaration_type> <declaration_param>object</declaration_param>,
    <declaration_type>XSArray_ApplierMethod</declaration_type> <declaration_param>method</declaration_param> );  </declaration>
<desc><p>The method will be called with each object contained in the array
</p></desc>
</function><function id="//xsdoc_ref/c/func/XSArray_Array" lang="c"><name>XSArray_Array</name>
<abstract><p>Gets an empty array
</p></abstract>
<returntype> XS_EXPORT XSStatic XSAutoreleased XSArrayRef</returntype>
<result><p>An empty immutable array
</p></result>
<declaration><declaration_type>XS_EXPORT</declaration_type> <declaration_type>XSStatic</declaration_type> <declaration_type>XSAutoreleased</declaration_type> <declaration_type>XSArrayRef</declaration_type> <declaration_function>XSArray_Array</declaration_function>(
    <declaration_param>void</declaration_param> );  </declaration>
<desc><p/></desc>
</function><function id="//xsdoc_ref/c/func/XSArray_ArrayWithArray" lang="c"><name>XSArray_ArrayWithArray</name>
<abstract><p>Gets an array from another array
</p></abstract>
<parameterlist>
<parameter><name>array</name><desc><p>The array</p></desc></parameter>
</parameterlist>
<parsedparameterlist>
<parsedparameter><type>XSArrayRef</type><name>array</name></parsedparameter>
</parsedparameterlist>
<returntype> XS_EXPORT XSStatic XSAutoreleased XSArrayRef</returntype>
<result><p>An immutable array based on the given array
</p></result>
<declaration><declaration_type>XS_EXPORT</declaration_type> <declaration_type>XSStatic</declaration_type> <declaration_type>XSAutoreleased</declaration_type> <declaration_type>XSArrayRef</declaration_type> <declaration_function>XSArray_ArrayWithArray</declaration_function>(
    <declaration_type>XSArrayRef</declaration_type> <declaration_param>array</declaration_param> );  </declaration>
<desc><p/></desc>
</function><function id="//xsdoc_ref/c/func/XSArray_ArrayWithObjects" lang="c"><name>XSArray_ArrayWithObjects</name>
<abstract><p>Gets an array filled with objects
</p></abstract>
<parameterlist>
<parameter><name>firstObject</name><desc><p>The first object to add</p></desc></parameter>
<parameter><name>...</name><desc><p>Additional objects to add, terminated by NULL</p></desc></parameter>
</parameterlist>
<parsedparameterlist>
<parsedparameter><type>XSObjectRef</type><name>firstObject</name></parsedparameter>
<parsedparameter><type> ...</type><name>...</name></parsedparameter>
</parsedparameterlist>
<returntype> XS_EXPORT XSStatic XSAutoreleased XSArrayRef</returntype>
<result><p>An immutable array containing the specified objects
</p></result>
<declaration><declaration_type>XS_EXPORT</declaration_type> <declaration_type>XSStatic</declaration_type> <declaration_type>XSAutoreleased</declaration_type> <declaration_type>XSArrayRef</declaration_type> <declaration_function>XSArray_ArrayWithObjects</declaration_function>(
    <declaration_type>XSObjectRef</declaration_type> <declaration_param>firstObject</declaration_param>,
    ... );  </declaration>
<desc><p/></desc>
</function><function id="//xsdoc_ref/c/func/XSArray_ContainsObject" lang="c"><name>XSArray_ContainsObject</name>
<abstract><p>Checks if a specific object is present in an array
</p></abstract>
<parameterlist>
<parameter><name>array</name><desc><p>The array</p></desc></parameter>
</parameterlist>
<parsedparameterlist>
<parsedparameter><type>XSArrayRef</type><name>array</name></parsedparameter>
<parsedparameter><type>XSObjectRef</type><name>object</name></parsedparameter>
</parsedparameterlist>
<returntype> XS_EXPORT bool</returntype>
<result><p>True if the array contains the object, otherwise false
</p></result>
<declaration><declaration_type>XS_EXPORT</declaration_type> <declaration_type>bool</declaration_type> <declaration_function>XSArray_ContainsObject</declaration_function>(
    <declaration_type>XSArrayRef</declaration_type> <declaration_param>array</declaration_param>,
    <declaration_type>XSObjectRef</declaration_type> <declaration_param>object</declaration_param> );  </declaration>
<desc><p/></desc>
</function><function id="//xsdoc_ref/c/func/XSArray_Create" lang="c"><name>XSArray_Create</name>
<abstract><p>Creates an empty array
</p></abstract>
<returntype> XS_EXPORT XSStatic XSArrayRef</returntype>
<result><p>An empty immutable array
</p></result>
<declaration><declaration_type>XS_EXPORT</declaration_type> <declaration_type>XSStatic</declaration_type> <declaration_type>XSArrayRef</declaration_type> <declaration_function>XSArray_Create</declaration_function>(
    <declaration_param>void</declaration_param> );  </declaration>
<desc><p/></desc>
</function><function id="//xsdoc_ref/c/func/XSArray_CreateMutable" lang="c"><name>XSArray_CreateMutable</name>
<abstract><p>Creates an empty mutable array
</p></abstract>
<returntype> XS_EXPORT XSStatic XSMutableArrayRef</returntype>
<result><p>An empty mutable array
</p></result>
<declaration><declaration_type>XS_EXPORT</declaration_type> <declaration_type>XSStatic</declaration_type> <declaration_type>XSMutableArrayRef</declaration_type> <declaration_function>XSArray_CreateMutable</declaration_function>(
    <declaration_param>void</declaration_param> );  </declaration>
<desc><p/></desc>
</function><function id="//xsdoc_ref/c/func/XSArray_CreateMutableCopy" lang="c"><name>XSArray_CreateMutableCopy</name>
<abstract><p>Creates a mutable copy of an array
</p></abstract>
<parameterlist>
<parameter><name>array</name><desc><p>The array</p></desc></parameter>
</parameterlist>
<parsedparameterlist>
<parsedparameter><type>XSArrayRef</type><name>array</name></parsedparameter>
</parsedparameterlist>
<returntype> XS_EXPORT XSMutableArrayRef</returntype>
<result><p>The mutable copy of the array
</p></result>
<declaration><declaration_type>XS_EXPORT</declaration_type> <declaration_type>XSMutableArrayRef</declaration_type> <declaration_function>XSArray_CreateMutableCopy</declaration_function>(
    <declaration_type>XSArrayRef</declaration_type> <declaration_param>array</declaration_param> );  </declaration>
<desc><p/></desc>
</function><function id="//xsdoc_ref/c/func/XSArray_CreateWithArray" lang="c"><name>XSArray_CreateWithArray</name>
<abstract><p>Creates an array from another array
</p></abstract>
<parameterlist>
<parameter><name>array</name><desc><p>The array</p></desc></parameter>
</parameterlist>
<parsedparameterlist>
<parsedparameter><type>XSArrayRef</type><name>array</name></parsedparameter>
</parsedparameterlist>
<returntype> XS_EXPORT XSStatic XSArrayRef</returntype>
<result><p>An immutable array based on the given array
</p></result>
<declaration><declaration_type>XS_EXPORT</declaration_type> <declaration_type>XSStatic</declaration_type> <declaration_type>XSArrayRef</declaration_type> <declaration_function>XSArray_CreateWithArray</declaration_function>(
    <declaration_type>XSArrayRef</declaration_type> <declaration_param>array</declaration_param> );  </declaration>
<desc><p/></desc>
</function><function id="//xsdoc_ref/c/func/XSArray_CreateWithObjects" lang="c"><name>XSArray_CreateWithObjects</name>
<abstract><p>Creates an array filled with objects
</p></abstract>
<parameterlist>
<parameter><name>firstObject</name><desc><p>The first object to add</p></desc></parameter>
<parameter><name>...</name><desc><p>Additional objects to add, terminated by NULL</p></desc></parameter>
</parameterlist>
<parsedparameterlist>
<parsedparameter><type>XSObjectRef</type><name>firstObject</name></parsedparameter>
<parsedparameter><type> ...</type><name>...</name></parsedparameter>
</parsedparameterlist>
<returntype> XS_EXPORT XSStatic XSArrayRef</returntype>
<result><p>An immutable array containing the specified objects
</p></result>
<declaration><declaration_type>XS_EXPORT</declaration_type> <declaration_type>XSStatic</declaration_type> <declaration_type>XSArrayRef</declaration_type> <declaration_function>XSArray_CreateWithObjects</declaration_function>(
    <declaration_type>XSObjectRef</declaration_type> <declaration_param>firstObject</declaration_param>,
    ... );  </declaration>
<desc><p/></desc>
</function><function id="//xsdoc_ref/c/func/XSArray_FilterWithFunction" lang="c"><name>XSArray_FilterWithFunction</name>
<abstract><p>Filters an array using a function
</p></abstract>
<parameterlist>
<parameter><name>array</name><desc><p>The array</p></desc></parameter>
<parameter><name>function</name><desc><p>The function used to filter the array</p></desc></parameter>
</parameterlist>
<parsedparameterlist>
<parsedparameter><type>XSMutableArrayRef</type><name>array</name></parsedparameter>
<parsedparameter><type>XSArray_FilterFunction</type><name>function</name></parsedparameter>
</parsedparameterlist>
<attributelists><listattribute><name>See</name><list>
<item><name>XSArray_FilterFunction</name><value><hd_link logicalPath="XSArray_FilterFunction" isseealso="yes">XSArray_FilterFunction</hd_link></value></item></list></listattribute>
</attributelists>
<returntype> XS_EXPORT void</returntype>
<declaration><declaration_type>XS_EXPORT</declaration_type> <declaration_type>void</declaration_type> <declaration_function>XSArray_FilterWithFunction</declaration_function>(
    <declaration_type>XSMutableArrayRef</declaration_type> <declaration_param>array</declaration_param>,
    <declaration_type>XSArray_FilterFunction</declaration_type> <declaration_param>function</declaration_param> );  </declaration>
<desc><p>The function will be called with each object contained in the array.
An error will be produced if the array is not mutable.
</p></desc>
</function><function id="//xsdoc_ref/c/func/XSArray_FilterWithMethod" lang="c"><name>XSArray_FilterWithMethod</name>
<abstract><p>Filters an array using a method
</p></abstract>
<parameterlist>
<parameter><name>array</name><desc><p>The array</p></desc></parameter>
<parameter><name>object</name><desc><p>The object on which to call the method</p></desc></parameter>
<parameter><name>method</name><desc><p>The function used to filter the array</p></desc></parameter>
</parameterlist>
<parsedparameterlist>
<parsedparameter><type>XSMutableArrayRef</type><name>array</name></parsedparameter>
<parsedparameter><type>XSObjectRef</type><name>object</name></parsedparameter>
<parsedparameter><type>XSArray_FilterMethod</type><name>method</name></parsedparameter>
</parsedparameterlist>
<attributelists><listattribute><name>See</name><list>
<item><name>XSArray_FilterMethod</name><value><hd_link logicalPath="XSArray_FilterMethod" isseealso="yes">XSArray_FilterMethod</hd_link></value></item></list></listattribute>
</attributelists>
<returntype> XS_EXPORT void</returntype>
<declaration><declaration_type>XS_EXPORT</declaration_type> <declaration_type>void</declaration_type> <declaration_function>XSArray_FilterWithMethod</declaration_function>(
    <declaration_type>XSMutableArrayRef</declaration_type> <declaration_param>array</declaration_param>,
    <declaration_type>XSObjectRef</declaration_type> <declaration_param>object</declaration_param>,
    <declaration_type>XSArray_FilterMethod</declaration_type> <declaration_param>method</declaration_param> );  </declaration>
<desc><p>The method will be called with each object contained in the array.
An error will be produced if the array is not mutable.
</p></desc>
</function><function id="//xsdoc_ref/c/func/XSArray_GetClassID" lang="c"><name>XSArray_GetClassID</name>
<abstract><p>Gets the class ID for XSArray
</p></abstract>
<returntype> XS_EXPORT XSStatic XSClassID</returntype>
<result><p>The class ID for XSArray
</p></result>
<declaration><declaration_type>XS_EXPORT</declaration_type> <declaration_type>XSStatic</declaration_type> <declaration_type>XSClassID</declaration_type> <declaration_function>XSArray_GetClassID</declaration_function>(
    <declaration_param>void</declaration_param> );  </declaration>
<desc><p/></desc>
</function><function id="//xsdoc_ref/c/func/XSArray_GetCount" lang="c"><name>XSArray_GetCount</name>
<abstract><p>Gets the number of values in an array
</p></abstract>
<parameterlist>
<parameter><name>array</name><desc><p>The array</p></desc></parameter>
</parameterlist>
<parsedparameterlist>
<parsedparameter><type>XSArrayRef</type><name>array</name></parsedparameter>
</parsedparameterlist>
<returntype> XS_EXPORT XSUInteger</returntype>
<result><p>The number of values in an array
</p></result>
<declaration><declaration_type>XS_EXPORT</declaration_type> <declaration_type>XSUInteger</declaration_type> <declaration_function>XSArray_GetCount</declaration_function>(
    <declaration_type>XSArrayRef</declaration_type> <declaration_param>array</declaration_param> );  </declaration>
<desc><p/></desc>
</function><function id="//xsdoc_ref/c/func/XSArray_GetCountOfObject" lang="c"><name>XSArray_GetCountOfObject</name>
<abstract><p>Gets the number of time a specific object is present in an array
</p></abstract>
<parameterlist>
<parameter><name>array</name><desc><p>The array</p></desc></parameter>
<parameter><name>object</name><desc><p>The object</p></desc></parameter>
</parameterlist>
<parsedparameterlist>
<parsedparameter><type>XSArrayRef</type><name>array</name></parsedparameter>
<parsedparameter><type>XSObjectRef</type><name>object</name></parsedparameter>
</parsedparameterlist>
<returntype> XS_EXPORT XSUInteger</returntype>
<result><p>The number of time the object is present in the array
</p></result>
<declaration><declaration_type>XS_EXPORT</declaration_type> <declaration_type>XSUInteger</declaration_type> <declaration_function>XSArray_GetCountOfObject</declaration_function>(
    <declaration_type>XSArrayRef</declaration_type> <declaration_param>array</declaration_param>,
    <declaration_type>XSObjectRef</declaration_type> <declaration_param>object</declaration_param> );  </declaration>
<desc><p/></desc>
</function><function id="//xsdoc_ref/c/func/XSArray_GetFirstIndexOfObject" lang="c"><name>XSArray_GetFirstIndexOfObject</name>
<abstract><p>Gets the first index of an object in an array
</p></abstract>
<parameterlist>
<parameter><name>array</name><desc><p>The array</p></desc></parameter>
<parameter><name>object</name><desc><p>The object</p></desc></parameter>
</parameterlist>
<parsedparameterlist>
<parsedparameter><type>XSArrayRef</type><name>array</name></parsedparameter>
<parsedparameter><type>XSObjectRef</type><name>object</name></parsedparameter>
</parsedparameterlist>
<returntype> XS_EXPORT XSUInteger</returntype>
<result><p>The first index of the object, or XSNotFound
</p></result>
<declaration><declaration_type>XS_EXPORT</declaration_type> <declaration_type>XSUInteger</declaration_type> <declaration_function>XSArray_GetFirstIndexOfObject</declaration_function>(
    <declaration_type>XSArrayRef</declaration_type> <declaration_param>array</declaration_param>,
    <declaration_type>XSObjectRef</declaration_type> <declaration_param>object</declaration_param> );  </declaration>
<desc><p/></desc>
</function><function id="//xsdoc_ref/c/func/XSArray_GetLastIndexOfObject" lang="c"><name>XSArray_GetLastIndexOfObject</name>
<abstract><p>Gets the last index of an object in an array
</p></abstract>
<parameterlist>
<parameter><name>array</name><desc><p>The array</p></desc></parameter>
<parameter><name>object</name><desc><p>The object</p></desc></parameter>
</parameterlist>
<parsedparameterlist>
<parsedparameter><type>XSArrayRef</type><name>array</name></parsedparameter>
<parsedparameter><type>XSObjectRef</type><name>object</name></parsedparameter>
</parsedparameterlist>
<returntype> XS_EXPORT XSUInteger</returntype>
<result><p>The last index of the object, or XSNotFound
</p></result>
<declaration><declaration_type>XS_EXPORT</declaration_type> <declaration_type>XSUInteger</declaration_type> <declaration_function>XSArray_GetLastIndexOfObject</declaration_function>(
    <declaration_type>XSArrayRef</declaration_type> <declaration_param>array</declaration_param>,
    <declaration_type>XSObjectRef</declaration_type> <declaration_param>object</declaration_param> );  </declaration>
<desc><p/></desc>
</function><function id="//xsdoc_ref/c/func/XSArray_GetLastObject" lang="c"><name>XSArray_GetLastObject</name>
<abstract><p>Gets the last object in the array
</p></abstract>
<parameterlist>
<parameter><name>array</name><desc><p>The array</p></desc></parameter>
</parameterlist>
<parsedparameterlist>
<parsedparameter><type>XSArrayRef</type><name>array</name></parsedparameter>
</parsedparameterlist>
<returntype> XS_EXPORT XSObjectRef</returntype>
<result><p>The last object, or NULL if the array is empty
</p></result>
<declaration><declaration_type>XS_EXPORT</declaration_type> <declaration_type>XSObjectRef</declaration_type> <declaration_function>XSArray_GetLastObject</declaration_function>(
    <declaration_type>XSArrayRef</declaration_type> <declaration_param>array</declaration_param> );  </declaration>
<desc><p/></desc>
</function><function id="//xsdoc_ref/c/func/XSArray_GetObjectAtIndex" lang="c"><name>XSArray_GetObjectAtIndex</name>
<abstract><p>Gets an object from an array at a specific index
</p></abstract>
<parameterlist>
<parameter><name>array</name><desc><p>The array</p></desc></parameter>
<parameter><name>index</name><desc><p>The index</p></desc></parameter>
</parameterlist>
<parsedparameterlist>
<parsedparameter><type>XSArrayRef</type><name>array</name></parsedparameter>
<parsedparameter><type>XSUInteger</type><name>index</name></parsedparameter>
</parsedparameterlist>
<returntype> XS_EXPORT XSObjectRef</returntype>
<result><p>The object, or NULL if the index does not exist
</p></result>
<declaration><declaration_type>XS_EXPORT</declaration_type> <declaration_type>XSObjectRef</declaration_type> <declaration_function>XSArray_GetObjectAtIndex</declaration_function>(
    <declaration_type>XSArrayRef</declaration_type> <declaration_param>array</declaration_param>,
    <declaration_type>XSUInteger</declaration_type> <declaration_param>index</declaration_param> );  </declaration>
<desc><p/></desc>
</function><function id="//xsdoc_ref/c/func/XSArray_InsertObjectAtIndex" lang="c"><name>XSArray_InsertObjectAtIndex</name>
<abstract><p>Inserts an object at a specific index in an array
</p></abstract>
<parameterlist>
<parameter><name>array</name><desc><p>The array</p></desc></parameter>
<parameter><name>index</name><desc><p>The index</p></desc></parameter>
<parameter><name>object</name><desc><p>The object (cannot be NULL)</p></desc></parameter>
</parameterlist>
<parsedparameterlist>
<parsedparameter><type>XSMutableArrayRef</type><name>array</name></parsedparameter>
<parsedparameter><type>XSUInteger</type><name>index</name></parsedparameter>
<parsedparameter><type>XSObjectRef</type><name>object</name></parsedparameter>
</parsedparameterlist>
<returntype> XS_EXPORT void</returntype>
<declaration><declaration_type>XS_EXPORT</declaration_type> <declaration_type>void</declaration_type> <declaration_function>XSArray_InsertObjectAtIndex</declaration_function>(
    <declaration_type>XSMutableArrayRef</declaration_type> <declaration_param>array</declaration_param>,
    <declaration_type>XSUInteger</declaration_type> <declaration_param>index</declaration_param>,
    <declaration_type>XSObjectRef</declaration_type> <declaration_param>object</declaration_param> );  </declaration>
<desc><p>An error will be produced if the array is not mutable
</p></desc>
</function><function id="//xsdoc_ref/c/func/XSArray_IsMutable" lang="c"><name>XSArray_IsMutable</name>
<abstract><p>Checks if an array is mutable
</p></abstract>
<parameterlist>
<parameter><name>array</name><desc><p>The array</p></desc></parameter>
</parameterlist>
<parsedparameterlist>
<parsedparameter><type>XSArrayRef</type><name>array</name></parsedparameter>
</parsedparameterlist>
<returntype> XS_EXPORT bool</returntype>
<result><p>True if the array is mutable, otherwise false
</p></result>
<declaration><declaration_type>XS_EXPORT</declaration_type> <declaration_type>bool</declaration_type> <declaration_function>XSArray_IsMutable</declaration_function>(
    <declaration_type>XSArrayRef</declaration_type> <declaration_param>array</declaration_param> );  </declaration>
<desc><p/></desc>
</function><function id="//xsdoc_ref/c/func/XSArray_MutableArray" lang="c"><name>XSArray_MutableArray</name>
<abstract><p>Gets an empty mutable array
</p></abstract>
<returntype> XS_EXPORT XSStatic XSAutoreleased XSMutableArrayRef</returntype>
<result><p>An empty mutable array
</p></result>
<declaration><declaration_type>XS_EXPORT</declaration_type> <declaration_type>XSStatic</declaration_type> <declaration_type>XSAutoreleased</declaration_type> <declaration_type>XSMutableArrayRef</declaration_type> <declaration_function>XSArray_MutableArray</declaration_function>(
    <declaration_param>void</declaration_param> );  </declaration>
<desc><p/></desc>
</function><function id="//xsdoc_ref/c/func/XSArray_RemoveAllObjects" lang="c"><name>XSArray_RemoveAllObjects</name>
<abstract><p>Removes all objects from an array
</p></abstract>
<parameterlist>
<parameter><name>array</name><desc><p>The array</p></desc></parameter>
</parameterlist>
<parsedparameterlist>
<parsedparameter><type>XSMutableArrayRef</type><name>array</name></parsedparameter>
</parsedparameterlist>
<returntype> XS_EXPORT void</returntype>
<declaration><declaration_type>XS_EXPORT</declaration_type> <declaration_type>void</declaration_type> <declaration_function>XSArray_RemoveAllObjects</declaration_function>(
    <declaration_type>XSMutableArrayRef</declaration_type> <declaration_param>array</declaration_param> );  </declaration>
<desc><p>An error will be produced if the array is not mutable
</p></desc>
</function><function id="//xsdoc_ref/c/func/XSArray_RemoveLastObject" lang="c"><name>XSArray_RemoveLastObject</name>
<abstract><p>Removes the last object in an array
</p></abstract>
<parameterlist>
<parameter><name>array</name><desc><p>The array</p></desc></parameter>
</parameterlist>
<parsedparameterlist>
<parsedparameter><type>XSMutableArrayRef</type><name>array</name></parsedparameter>
</parsedparameterlist>
<returntype> XS_EXPORT void</returntype>
<declaration><declaration_type>XS_EXPORT</declaration_type> <declaration_type>void</declaration_type> <declaration_function>XSArray_RemoveLastObject</declaration_function>(
    <declaration_type>XSMutableArrayRef</declaration_type> <declaration_param>array</declaration_param> );  </declaration>
<desc><p>An error will be produced if the array is not mutable
</p></desc>
</function><function id="//xsdoc_ref/c/func/XSArray_RemoveObject" lang="c"><name>XSArray_RemoveObject</name>
<abstract><p>Removes all occurences of a specific object in an array
</p></abstract>
<parameterlist>
<parameter><name>array</name><desc><p>The array</p></desc></parameter>
<parameter><name>object</name><desc><p>The object to remove</p></desc></parameter>
</parameterlist>
<parsedparameterlist>
<parsedparameter><type>XSMutableArrayRef</type><name>array</name></parsedparameter>
<parsedparameter><type>XSObjectRef</type><name>object</name></parsedparameter>
</parsedparameterlist>
<returntype> XS_EXPORT void</returntype>
<declaration><declaration_type>XS_EXPORT</declaration_type> <declaration_type>void</declaration_type> <declaration_function>XSArray_RemoveObject</declaration_function>(
    <declaration_type>XSMutableArrayRef</declaration_type> <declaration_param>array</declaration_param>,
    <declaration_type>XSObjectRef</declaration_type> <declaration_param>object</declaration_param> );  </declaration>
<desc><p>An error will be produced if the array is not mutable
</p></desc>
</function><function id="//xsdoc_ref/c/func/XSArray_RemoveObjectAtIndex" lang="c"><name>XSArray_RemoveObjectAtIndex</name>
<abstract><p>Removes the object at a specific index in an array
</p></abstract>
<parameterlist>
<parameter><name>array</name><desc><p>The array</p></desc></parameter>
<parameter><name>index</name><desc><p>The index</p></desc></parameter>
</parameterlist>
<parsedparameterlist>
<parsedparameter><type>XSMutableArrayRef</type><name>array</name></parsedparameter>
<parsedparameter><type>XSUInteger</type><name>index</name></parsedparameter>
</parsedparameterlist>
<returntype> XS_EXPORT void</returntype>
<declaration><declaration_type>XS_EXPORT</declaration_type> <declaration_type>void</declaration_type> <declaration_function>XSArray_RemoveObjectAtIndex</declaration_function>(
    <declaration_type>XSMutableArrayRef</declaration_type> <declaration_param>array</declaration_param>,
    <declaration_type>XSUInteger</declaration_type> <declaration_param>index</declaration_param> );  </declaration>
<desc><p>An error will be produced if the array is not mutable
</p></desc>
</function><function id="//xsdoc_ref/c/func/XSArray_RemoveObjectsInArray" lang="c"><name>XSArray_RemoveObjectsInArray</name>
<abstract><p>Removes all occurences of the objects contained in an array from an array
</p></abstract>
<parameterlist>
<parameter><name>array</name><desc><p>The array</p></desc></parameter>
<parameter><name>objects</name><desc><p>The array with the objects to remove</p></desc></parameter>
</parameterlist>
<parsedparameterlist>
<parsedparameter><type>XSMutableArrayRef</type><name>array</name></parsedparameter>
<parsedparameter><type>XSArrayRef</type><name>objects</name></parsedparameter>
</parsedparameterlist>
<returntype> XS_EXPORT void</returntype>
<declaration><declaration_type>XS_EXPORT</declaration_type> <declaration_type>void</declaration_type> <declaration_function>XSArray_RemoveObjectsInArray</declaration_function>(
    <declaration_type>XSMutableArrayRef</declaration_type> <declaration_param>array</declaration_param>,
    <declaration_type>XSArrayRef</declaration_type> <declaration_param>objects</declaration_param> );  </declaration>
<desc><p>An error will be produced if the array is not mutable
</p></desc>
</function><function id="//xsdoc_ref/c/func/XSArray_RemoveObjectsInRange" lang="c"><name>XSArray_RemoveObjectsInRange</name>
<abstract><p>Removes objects at a specific range from an array
</p></abstract>
<parameterlist>
<parameter><name>array</name><desc><p>The array</p></desc></parameter>
<parameter><name>range</name><desc><p>The range</p></desc></parameter>
</parameterlist>
<parsedparameterlist>
<parsedparameter><type>XSMutableArrayRef</type><name>array</name></parsedparameter>
<parsedparameter><type>XSRange</type><name>range</name></parsedparameter>
</parsedparameterlist>
<returntype> XS_EXPORT void</returntype>
<declaration><declaration_type>XS_EXPORT</declaration_type> <declaration_type>void</declaration_type> <declaration_function>XSArray_RemoveObjectsInRange</declaration_function>(
    <declaration_type>XSMutableArrayRef</declaration_type> <declaration_param>array</declaration_param>,
    <declaration_type>XSRange</declaration_type> <declaration_param>range</declaration_param> );  </declaration>
<desc><p>An error will be produced if the array is not mutable
</p></desc>
</function><function id="//xsdoc_ref/c/func/XSArray_ReplaceObjectAtIndex" lang="c"><name>XSArray_ReplaceObjectAtIndex</name>
<abstract><p>Replaces an object at a specific index in the array
</p></abstract>
<parameterlist>
<parameter><name>array</name><desc><p>The array</p></desc></parameter>
<parameter><name>index</name><desc><p>The index</p></desc></parameter>
<parameter><name>newObject</name><desc><p>The new object (cannot be NULL)</p></desc></parameter>
</parameterlist>
<parsedparameterlist>
<parsedparameter><type>XSMutableArrayRef</type><name>array</name></parsedparameter>
<parsedparameter><type>XSUInteger</type><name>index</name></parsedparameter>
<parsedparameter><type>XSObjectRef</type><name>newObject</name></parsedparameter>
</parsedparameterlist>
<returntype> XS_EXPORT void</returntype>
<declaration><declaration_type>XS_EXPORT</declaration_type> <declaration_type>void</declaration_type> <declaration_function>XSArray_ReplaceObjectAtIndex</declaration_function>(
    <declaration_type>XSMutableArrayRef</declaration_type> <declaration_param>array</declaration_param>,
    <declaration_type>XSUInteger</declaration_type> <declaration_param>index</declaration_param>,
    <declaration_type>XSObjectRef</declaration_type> <declaration_param>newObject</declaration_param> );  </declaration>
<desc><p>An error will be produced if the array is not mutable
</p></desc>
</function><function id="//xsdoc_ref/c/func/XSArray_SortWithFunction" lang="c"><name>XSArray_SortWithFunction</name>
<abstract><p>Sorts an array using a function
</p></abstract>
<parameterlist>
<parameter><name>array</name><desc><p>The array</p></desc></parameter>
<parameter><name>function</name><desc><p>The function used to sort the array</p></desc></parameter>
</parameterlist>
<parsedparameterlist>
<parsedparameter><type>XSMutableArrayRef</type><name>array</name></parsedparameter>
<parsedparameter><type>XSArray_SortFunction</type><name>function</name></parsedparameter>
</parsedparameterlist>
<attributelists><listattribute><name>See</name><list>
<item><name>XSArray_SortFunction</name><value><hd_link logicalPath="XSArray_SortFunction" isseealso="yes">XSArray_SortFunction</hd_link></value></item></list></listattribute>
</attributelists>
<returntype> XS_EXPORT void</returntype>
<declaration><declaration_type>XS_EXPORT</declaration_type> <declaration_type>void</declaration_type> <declaration_function>XSArray_SortWithFunction</declaration_function>(
    <declaration_type>XSMutableArrayRef</declaration_type> <declaration_param>array</declaration_param>,
    <declaration_type>XSArray_SortFunction</declaration_type> <declaration_param>function</declaration_param> );  </declaration>
<desc><p>The function will be called with each object contained in the array.
An error will be produced if the array is not mutable.
</p></desc>
</function><function id="//xsdoc_ref/c/func/XSArray_SortWithMethod" lang="c"><name>XSArray_SortWithMethod</name>
<abstract><p>Sorts an array using a method
</p></abstract>
<parameterlist>
<parameter><name>array</name><desc><p>The array</p></desc></parameter>
<parameter><name>object</name><desc><p>The object on which to call the method</p></desc></parameter>
<parameter><name>method</name><desc><p>The method used to sort the array</p></desc></parameter>
</parameterlist>
<parsedparameterlist>
<parsedparameter><type>XSMutableArrayRef</type><name>array</name></parsedparameter>
<parsedparameter><type>XSObjectRef</type><name>object</name></parsedparameter>
<parsedparameter><type>XSArray_SortMethod</type><name>method</name></parsedparameter>
</parsedparameterlist>
<attributelists><listattribute><name>See</name><list>
<item><name>XSArray_SortMethod</name><value><hd_link logicalPath="XSArray_SortMethod" isseealso="yes">XSArray_SortMethod</hd_link></value></item></list></listattribute>
</attributelists>
<returntype> XS_EXPORT void</returntype>
<declaration><declaration_type>XS_EXPORT</declaration_type> <declaration_type>void</declaration_type> <declaration_function>XSArray_SortWithMethod</declaration_function>(
    <declaration_type>XSMutableArrayRef</declaration_type> <declaration_param>array</declaration_param>,
    <declaration_type>XSObjectRef</declaration_type> <declaration_param>object</declaration_param>,
    <declaration_type>XSArray_SortMethod</declaration_type> <declaration_param>method</declaration_param> );  </declaration>
<desc><p>The method will be called with each object contained in the array.
An error will be produced if the array is not mutable.
</p></desc>
</function></functions>
<typedefs><typedef id="//xsdoc_ref/c/tdef/XSArray_ApplierFunction" lang="c" type="funcPtr"><name>XSArray_ApplierFunction</name>
<abstract><p>A function used to iterate objects in an array
</p></abstract>
<parameterlist>
<parameter><name>value</name><desc><p>The array's value</p></desc></parameter>
<parameter><name>index</name><desc><p>The index of the array's value</p></desc></parameter>
<parameter><name>stop</name><desc><p>If true, stops the iteration</p></desc></parameter>
</parameterlist>
<parsedparameterlist>
<parsedparameter><type>XSObjectRef</type><name>value</name></parsedparameter>
<parsedparameter><type>XSUInteger</type><name>index</name></parsedparameter>
<parsedparameter><type>bool *</type><name>stop</name></parsedparameter>
</parsedparameterlist>
<declaration><declaration_keyword>typedef</declaration_keyword> <declaration_type>void</declaration_type> ( <declaration_type>*</declaration_type><declaration_function>XSArray_ApplierFunction</declaration_function> )(
    <declaration_type>XSObjectRef</declaration_type> <declaration_param>value</declaration_param>,
    <declaration_type>XSUInteger</declaration_type> <declaration_param>index</declaration_param>,
    <declaration_type>bool</declaration_type> <declaration_type>*</declaration_type><declaration_param>stop</declaration_param> );  </declaration>
<desc><p/></desc>
</typedef><typedef id="//xsdoc_ref/c/tdef/XSArray_ApplierMethod" lang="c" type="funcPtr"><name>XSArray_ApplierMethod</name>
<abstract><p>A method used to iterate objects in an array
</p></abstract>
<parameterlist>
<parameter><name>object</name><desc><p>The receiver object</p></desc></parameter>
<parameter><name>value</name><desc><p>The array's value</p></desc></parameter>
<parameter><name>index</name><desc><p>The index of the array's value</p></desc></parameter>
<parameter><name>stop</name><desc><p>If true, stops the iteration</p></desc></parameter>
</parameterlist>
<parsedparameterlist>
<parsedparameter><type>XSObjectRef</type><name>object</name></parsedparameter>
<parsedparameter><type>XSObjectRef</type><name>value</name></parsedparameter>
<parsedparameter><type>XSUInteger</type><name>index</name></parsedparameter>
<parsedparameter><type>bool *</type><name>stop</name></parsedparameter>
</parsedparameterlist>
<declaration><declaration_keyword>typedef</declaration_keyword> <declaration_type>void</declaration_type> ( <declaration_type>*</declaration_type><declaration_function>XSArray_ApplierMethod</declaration_function> )(
    <declaration_type>XSObjectRef</declaration_type> <declaration_param>object</declaration_param>,
    <declaration_type>XSObjectRef</declaration_type> <declaration_param>value</declaration_param>,
    <declaration_type>XSUInteger</declaration_type> <declaration_param>index</declaration_param>,
    <declaration_type>bool</declaration_type> <declaration_type>*</declaration_type><declaration_param>stop</declaration_param> );  </declaration>
<desc><p/></desc>
</typedef><typedef id="//xsdoc_ref/c/tdef/XSArray_FilterFunction" lang="c" type="funcPtr"><name>XSArray_FilterFunction</name>
<abstract><p>A function used to filter objects in an array
</p></abstract>
<parameterlist>
<parameter><name>value</name><desc><p>The array's value</p></desc></parameter>
<parameter><name>index</name><desc><p>The index of the array's value</p></desc></parameter>
<parameter><name>stop</name><desc><p>If true, stops the iteration</p></desc></parameter>
</parameterlist>
<parsedparameterlist>
<parsedparameter><type>XSObjectRef</type><name>value</name></parsedparameter>
<parsedparameter><type>XSUInteger</type><name>index</name></parsedparameter>
<parsedparameter><type>bool *</type><name>stop</name></parsedparameter>
</parsedparameterlist>
<result><p>True if the object must be kept in the array, otherwise false
</p></result>
<declaration><declaration_keyword>typedef</declaration_keyword> <declaration_type>bool</declaration_type> ( <declaration_type>*</declaration_type><declaration_function>XSArray_FilterFunction</declaration_function> )(
    <declaration_type>XSObjectRef</declaration_type> <declaration_param>value</declaration_param>,
    <declaration_type>XSUInteger</declaration_type> <declaration_param>index</declaration_param>,
    <declaration_type>bool</declaration_type> <declaration_type>*</declaration_type><declaration_param>stop</declaration_param> );  </declaration>
<desc><p/></desc>
</typedef><typedef id="//xsdoc_ref/c/tdef/XSArray_FilterMethod" lang="c" type="funcPtr"><name>XSArray_FilterMethod</name>
<abstract><p>A method used to filter objects in an array
</p></abstract>
<parameterlist>
<parameter><name>object</name><desc><p>The receiver object</p></desc></parameter>
<parameter><name>value</name><desc><p>The array's value</p></desc></parameter>
<parameter><name>index</name><desc><p>The index of the array's value</p></desc></parameter>
<parameter><name>stop</name><desc><p>If true, stops the iteration</p></desc></parameter>
</parameterlist>
<parsedparameterlist>
<parsedparameter><type>XSObjectRef</type><name>object</name></parsedparameter>
<parsedparameter><type>XSObjectRef</type><name>value</name></parsedparameter>
<parsedparameter><type>XSUInteger</type><name>index</name></parsedparameter>
<parsedparameter><type>bool *</type><name>stop</name></parsedparameter>
</parsedparameterlist>
<result><p>True if the object must be kept in the array, otherwise false
</p></result>
<declaration><declaration_keyword>typedef</declaration_keyword> <declaration_type>bool</declaration_type> ( <declaration_type>*</declaration_type><declaration_function>XSArray_FilterMethod</declaration_function> )(
    <declaration_type>XSObjectRef</declaration_type> <declaration_param>object</declaration_param>,
    <declaration_type>XSObjectRef</declaration_type> <declaration_param>value</declaration_param>,
    <declaration_type>XSUInteger</declaration_type> <declaration_param>index</declaration_param>,
    <declaration_type>bool</declaration_type> <declaration_type>*</declaration_type><declaration_param>stop</declaration_param> );  </declaration>
<desc><p/></desc>
</typedef><typedef id="//xsdoc_ref/c/tdef/XSArray_SortFunction" lang="c" type="funcPtr"><name>XSArray_SortFunction</name>
<abstract><p>A function used to sort objects in an array
</p></abstract>
<parameterlist>
<parameter><name>value1</name><desc><p>An array's value</p></desc></parameter>
<parameter><name>value2</name><desc><p>An array's value</p></desc></parameter>
<parameter><name>stop</name><desc><p>If true, stops the iteration</p></desc></parameter>
</parameterlist>
<parsedparameterlist>
<parsedparameter><type>XSObjectRef</type><name>value1</name></parsedparameter>
<parsedparameter><type>XSObjectRef</type><name>value2</name></parsedparameter>
<parsedparameter><type>bool *</type><name>stop</name></parsedparameter>
</parsedparameterlist>
<result><p>The comparison result between the two values
</p></result>
<declaration><declaration_keyword>typedef</declaration_keyword> <declaration_type>XSComparisonResult</declaration_type> ( <declaration_type>*</declaration_type><declaration_function>XSArray_SortFunction</declaration_function> )(
    <declaration_type>XSObjectRef</declaration_type> <declaration_param>value1</declaration_param>,
    <declaration_type>XSObjectRef</declaration_type> <declaration_param>value2</declaration_param>,
    <declaration_type>bool</declaration_type> <declaration_type>*</declaration_type><declaration_param>stop</declaration_param> );  </declaration>
<desc><p/></desc>
</typedef><typedef id="//xsdoc_ref/c/tdef/XSArray_SortMethod" lang="c" type="funcPtr"><name>XSArray_SortMethod</name>
<abstract><p>A method used to sort objects in an array
</p></abstract>
<parameterlist>
<parameter><name>object</name><desc><p>The receiver object</p></desc></parameter>
<parameter><name>value1</name><desc><p>An array's value</p></desc></parameter>
<parameter><name>value2</name><desc><p>An array's value</p></desc></parameter>
<parameter><name>stop</name><desc><p>If true, stops the iteration</p></desc></parameter>
</parameterlist>
<parsedparameterlist>
<parsedparameter><type>XSObjectRef</type><name>object</name></parsedparameter>
<parsedparameter><type>XSObjectRef</type><name>value1</name></parsedparameter>
<parsedparameter><type>XSObjectRef</type><name>value2</name></parsedparameter>
<parsedparameter><type>bool *</type><name>stop</name></parsedparameter>
</parsedparameterlist>
<result><p>The comparison result between the two values
</p></result>
<declaration><declaration_keyword>typedef</declaration_keyword> <declaration_type>XSComparisonResult</declaration_type> ( <declaration_type>*</declaration_type><declaration_function>XSArray_SortMethod</declaration_function> )(
    <declaration_type>XSObjectRef</declaration_type> <declaration_param>object</declaration_param>,
    <declaration_type>XSObjectRef</declaration_type> <declaration_param>value1</declaration_param>,
    <declaration_type>XSObjectRef</declaration_type> <declaration_param>value2</declaration_param>,
    <declaration_type>bool</declaration_type> <declaration_type>*</declaration_type><declaration_param>stop</declaration_param> );  </declaration>
<desc><p/></desc>
</typedef><typedef id="//xsdoc_ref/c/tdef/XSArrayRef" lang="c" type="simple"><name>XSArrayRef</name>
<abstract><p>Opaque type for XSArray
</p></abstract>
<declaration><declaration_keyword>typedef</declaration_keyword> <declaration_keyword>const</declaration_keyword> <declaration_keyword>struct</declaration_keyword> <declaration_type>__XSArray</declaration_type> <declaration_type>*</declaration_type> <declaration_var>XSArrayRef</declaration_var>;  </declaration>
<desc><p>XSArrayRef objects are thread-safe
</p></desc>
</typedef><typedef id="//xsdoc_ref/c/tdef/XSMutableArrayRef" lang="c" type="simple"><name>XSMutableArrayRef</name>
<abstract><p>Opaque type for XSMutableArray
</p></abstract>
<declaration><declaration_keyword>typedef</declaration_keyword> <declaration_keyword>struct</declaration_keyword> <declaration_type>__XSArray</declaration_type> <declaration_type>*</declaration_type> <declaration_var>XSMutableArrayRef</declaration_var>;  </declaration>
<desc><p>XSMutableArrayRef objects are thread-safe
</p></desc>
</typedef></typedefs><copyrightinfo>&#169; (c) 2010-2014 - Jean-David Gadina - www.xs-labs.com
</copyrightinfo>
<timestamp>Thursday, September 04, 2014</timestamp>
</header>