<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE header PUBLIC "-//Apple Computer//DTD HEADERDOC 1.6//EN" "/System/Library/DTDs/HeaderDoc-1.6.dtd">
<header id="//xsdoc_ref/doc/header/XSAtomic.h" lang="c" filename="XSAtomic.h" headerpath="/Users/macmade/Documents/Macmade/Development/GitHub/XSFoundation/XSFoundation/include/XS/Functions/XSAtomic.h"><name>XSAtomic.h</name>
<abstract><p>XSFoundation atomic functions
</p></abstract>
<attributes><attribute><name>Author</name><value>Jean-David Gadina - www.xs-labs.com</value></attribute>
</attributes>
<includes>
<include><hd_link logicalPath="//xsdoc_ref/doc/header/XSTypes.h">&lt;XS/XSTypes.h&gt;</hd_link></include>
</includes>
<desc><p>...
</p></desc>
<functions><function id="//xsdoc_ref/c/func/XSAtomic_Add32" lang="c"><name>XSAtomic_Add32</name>
<abstract><p>Atomically adds to a 32 bits value
</p></abstract>
<parameterlist>
<parameter><name>amount</name><desc><p>The amount to add</p></desc></parameter>
<parameter><name>value</name><desc><p>The 32 bits value to modify</p></desc></parameter>
</parameterlist>
<parsedparameterlist>
<parsedparameter><type>XSInt32</type><name>amount</name></parsedparameter>
<parsedparameter><type>volatile XSInt32 *</type><name>value</name></parsedparameter>
</parsedparameterlist>
<returntype> XSInt32</returntype>
<result><p>The new value
</p></result>
<declaration><declaration_type>XSInt32</declaration_type> <declaration_function>XSAtomic_Add32</declaration_function>(
    <declaration_type>XSInt32</declaration_type> <declaration_param>amount</declaration_param>,
    <declaration_keyword>volatile</declaration_keyword> <declaration_type>XSInt32</declaration_type> <declaration_type>*</declaration_type><declaration_param>value</declaration_param> );  </declaration>
<desc><p/></desc>
</function><function id="//xsdoc_ref/c/func/XSAtomic_Add64" lang="c"><name>XSAtomic_Add64</name>
<abstract><p>Atomically adds to a 64 bits value
</p></abstract>
<parameterlist>
<parameter><name>amount</name><desc><p>The amount to add</p></desc></parameter>
<parameter><name>value</name><desc><p>The 64 bits value to modify</p></desc></parameter>
</parameterlist>
<parsedparameterlist>
<parsedparameter><type>XSInt64</type><name>amount</name></parsedparameter>
<parsedparameter><type>volatile XSInt64 *</type><name>value</name></parsedparameter>
</parsedparameterlist>
<returntype> XSInt64</returntype>
<result><p>The new value
</p></result>
<declaration><declaration_type>XSInt64</declaration_type> <declaration_function>XSAtomic_Add64</declaration_function>(
    <declaration_type>XSInt64</declaration_type> <declaration_param>amount</declaration_param>,
    <declaration_keyword>volatile</declaration_keyword> <declaration_type>XSInt64</declaration_type> <declaration_type>*</declaration_type><declaration_param>value</declaration_param> );  </declaration>
<desc><p/></desc>
</function><function id="//xsdoc_ref/c/func/XSAtomic_AddInteger" lang="c"><name>XSAtomic_AddInteger</name>
<abstract><p>Atomically adds to an integer value
</p></abstract>
<parameterlist>
<parameter><name>amount</name><desc><p>The amount to add</p></desc></parameter>
<parameter><name>value</name><desc><p>The integer value to modify</p></desc></parameter>
</parameterlist>
<parsedparameterlist>
<parsedparameter><type>XSInteger</type><name>amount</name></parsedparameter>
<parsedparameter><type>volatile XSInteger *</type><name>value</name></parsedparameter>
</parsedparameterlist>
<returntype> XSInteger</returntype>
<result><p>The new value
</p></result>
<declaration><declaration_type>XSInteger</declaration_type> <declaration_function>XSAtomic_AddInteger</declaration_function>(
    <declaration_type>XSInteger</declaration_type> <declaration_param>amount</declaration_param>,
    <declaration_keyword>volatile</declaration_keyword> <declaration_type>XSInteger</declaration_type> <declaration_type>*</declaration_type><declaration_param>value</declaration_param> );  </declaration>
<desc><p/></desc>
</function><function id="//xsdoc_ref/c/func/XSAtomic_CompareAndSwap32" lang="c"><name>XSAtomic_CompareAndSwap32</name>
<abstract><p>Atomically compares and swaps a 32 bits value
</p></abstract>
<parameterlist>
<parameter><name>oldValue</name><desc><p>The 32 bits value to test</p></desc></parameter>
<parameter><name>newValue</name><desc><p>The 32 bits value to swap</p></desc></parameter>
<parameter><name>value</name><desc><p>The 32 bits value to compare and swap</p></desc></parameter>
</parameterlist>
<parsedparameterlist>
<parsedparameter><type>XSInt32</type><name>oldValue</name></parsedparameter>
<parsedparameter><type>XSInt32</type><name>newValue</name></parsedparameter>
<parsedparameter><type>volatile XSInt32 *</type><name>value</name></parsedparameter>
</parsedparameterlist>
<returntype> XS_EXPORT bool</returntype>
<result><p>True if the comparison was equal and the swap occured
</p></result>
<declaration><declaration_type>XS_EXPORT</declaration_type> <declaration_type>bool</declaration_type> <declaration_function>XSAtomic_CompareAndSwap32</declaration_function>(
    <declaration_type>XSInt32</declaration_type> <declaration_param>oldValue</declaration_param>,
    <declaration_type>XSInt32</declaration_type> <declaration_param>newValue</declaration_param>,
    <declaration_keyword>volatile</declaration_keyword> <declaration_type>XSInt32</declaration_type> <declaration_type>*</declaration_type><declaration_param>value</declaration_param> );  </declaration>
<desc><p/></desc>
</function><function id="//xsdoc_ref/c/func/XSAtomic_CompareAndSwap64" lang="c"><name>XSAtomic_CompareAndSwap64</name>
<abstract><p>Atomically compares and swaps a 64 bits value
</p></abstract>
<parameterlist>
<parameter><name>oldValue</name><desc><p>The 64 bits value to test</p></desc></parameter>
<parameter><name>newValue</name><desc><p>The 64 bits value to swap</p></desc></parameter>
<parameter><name>value</name><desc><p>The 64 bits value to compare and swap</p></desc></parameter>
</parameterlist>
<parsedparameterlist>
<parsedparameter><type>XSInt64</type><name>oldValue</name></parsedparameter>
<parsedparameter><type>XSInt64</type><name>newValue</name></parsedparameter>
<parsedparameter><type>volatile XSInt64 *</type><name>value</name></parsedparameter>
</parsedparameterlist>
<returntype> XS_EXPORT bool</returntype>
<result><p>True if the comparison was equal and the swap occured
</p></result>
<declaration><declaration_type>XS_EXPORT</declaration_type> <declaration_type>bool</declaration_type> <declaration_function>XSAtomic_CompareAndSwap64</declaration_function>(
    <declaration_type>XSInt64</declaration_type> <declaration_param>oldValue</declaration_param>,
    <declaration_type>XSInt64</declaration_type> <declaration_param>newValue</declaration_param>,
    <declaration_keyword>volatile</declaration_keyword> <declaration_type>XSInt64</declaration_type> <declaration_type>*</declaration_type><declaration_param>value</declaration_param> );  </declaration>
<desc><p/></desc>
</function><function id="//xsdoc_ref/c/func/XSAtomic_CompareAndSwapInteger" lang="c"><name>XSAtomic_CompareAndSwapInteger</name>
<abstract><p>Atomically compares and swaps an integer value
</p></abstract>
<parameterlist>
<parameter><name>oldValue</name><desc><p>The integer value to test</p></desc></parameter>
<parameter><name>newValue</name><desc><p>The integer value to swap</p></desc></parameter>
<parameter><name>value</name><desc><p>The integer value to compare and swap</p></desc></parameter>
</parameterlist>
<parsedparameterlist>
<parsedparameter><type>XSInteger</type><name>oldValue</name></parsedparameter>
<parsedparameter><type>XSInteger</type><name>newValue</name></parsedparameter>
<parsedparameter><type>volatile XSInteger *</type><name>value</name></parsedparameter>
</parsedparameterlist>
<returntype> XS_EXPORT bool</returntype>
<result><p>True if the comparison was equal and the swap occured
</p></result>
<declaration><declaration_type>XS_EXPORT</declaration_type> <declaration_type>bool</declaration_type> <declaration_function>XSAtomic_CompareAndSwapInteger</declaration_function>(
    <declaration_type>XSInteger</declaration_type> <declaration_param>oldValue</declaration_param>,
    <declaration_type>XSInteger</declaration_type> <declaration_param>newValue</declaration_param>,
    <declaration_keyword>volatile</declaration_keyword> <declaration_type>XSInteger</declaration_type> <declaration_type>*</declaration_type><declaration_param>value</declaration_param> );  </declaration>
<desc><p/></desc>
</function><function id="//xsdoc_ref/c/func/XSAtomic_CompareAndSwapPointer" lang="c"><name>XSAtomic_CompareAndSwapPointer</name>
<abstract><p>Atomically compares and swaps a pointer value
</p></abstract>
<parameterlist>
<parameter><name>oldValue</name><desc><p>The pointer value to test</p></desc></parameter>
<parameter><name>newValue</name><desc><p>The pointer value to swap</p></desc></parameter>
<parameter><name>value</name><desc><p>The pointer value to compare and swap</p></desc></parameter>
</parameterlist>
<parsedparameterlist>
<parsedparameter><type>void *</type><name>oldValue</name></parsedparameter>
<parsedparameter><type>void *</type><name>newValue</name></parsedparameter>
<parsedparameter><type>void * volatile *</type><name>value</name></parsedparameter>
</parsedparameterlist>
<returntype> XS_EXPORT bool</returntype>
<result><p>True if the comparison was equal and the swap occured
</p></result>
<declaration><declaration_type>XS_EXPORT</declaration_type> <declaration_type>bool</declaration_type> <declaration_function>XSAtomic_CompareAndSwapPointer</declaration_function>(
    <declaration_type>void</declaration_type> <declaration_type>*</declaration_type><declaration_param>oldValue</declaration_param>,
    <declaration_type>void</declaration_type> <declaration_type>*</declaration_type><declaration_param>newValue</declaration_param>,
    <declaration_type>void</declaration_type> <declaration_type>*</declaration_type><declaration_keyword>volatile</declaration_keyword> <declaration_type>*</declaration_type> <declaration_param>value</declaration_param> );  </declaration>
<desc><p/></desc>
</function><function id="//xsdoc_ref/c/func/XSAtomic_Decrement32" lang="c"><name>XSAtomic_Decrement32</name>
<abstract><p>Atomically decrements a 32 bits value
</p></abstract>
<parameterlist>
<parameter><name>value</name><desc><p>The 32 bits value to decrement</p></desc></parameter>
</parameterlist>
<parsedparameterlist>
<parsedparameter><type>volatile XSInt32 *</type><name>value</name></parsedparameter>
</parsedparameterlist>
<returntype> XS_EXPORT XSInt32</returntype>
<result><p>The new value
</p></result>
<declaration><declaration_type>XS_EXPORT</declaration_type> <declaration_type>XSInt32</declaration_type> <declaration_function>XSAtomic_Decrement32</declaration_function>(
    <declaration_keyword>volatile</declaration_keyword> <declaration_type>XSInt32</declaration_type> <declaration_type>*</declaration_type><declaration_param>value</declaration_param> );  </declaration>
<desc><p/></desc>
</function><function id="//xsdoc_ref/c/func/XSAtomic_Decrement64" lang="c"><name>XSAtomic_Decrement64</name>
<abstract><p>Atomically decrements a 64 bits value
</p></abstract>
<parameterlist>
<parameter><name>value</name><desc><p>The 64 bits value to decrement</p></desc></parameter>
</parameterlist>
<parsedparameterlist>
<parsedparameter><type>volatile XSInt64 *</type><name>value</name></parsedparameter>
</parsedparameterlist>
<returntype> XS_EXPORT XSInt64</returntype>
<result><p>The new value
</p></result>
<declaration><declaration_type>XS_EXPORT</declaration_type> <declaration_type>XSInt64</declaration_type> <declaration_function>XSAtomic_Decrement64</declaration_function>(
    <declaration_keyword>volatile</declaration_keyword> <declaration_type>XSInt64</declaration_type> <declaration_type>*</declaration_type><declaration_param>value</declaration_param> );  </declaration>
<desc><p/></desc>
</function><function id="//xsdoc_ref/c/func/XSAtomic_DecrementInteger" lang="c"><name>XSAtomic_DecrementInteger</name>
<abstract><p>Atomically decrements an integer value
</p></abstract>
<parameterlist>
<parameter><name>value</name><desc><p>The integer value to decrement</p></desc></parameter>
</parameterlist>
<parsedparameterlist>
<parsedparameter><type>volatile XSInteger *</type><name>value</name></parsedparameter>
</parsedparameterlist>
<returntype> XS_EXPORT XSInteger</returntype>
<result><p>The new value
</p></result>
<declaration><declaration_type>XS_EXPORT</declaration_type> <declaration_type>XSInteger</declaration_type> <declaration_function>XSAtomic_DecrementInteger</declaration_function>(
    <declaration_keyword>volatile</declaration_keyword> <declaration_type>XSInteger</declaration_type> <declaration_type>*</declaration_type><declaration_param>value</declaration_param> );  </declaration>
<desc><p/></desc>
</function><function id="//xsdoc_ref/c/func/XSAtomic_Increment32" lang="c"><name>XSAtomic_Increment32</name>
<abstract><p>Atomically increments a 32 bits value
</p></abstract>
<parameterlist>
<parameter><name>value</name><desc><p>The 32 bits value to increment</p></desc></parameter>
</parameterlist>
<parsedparameterlist>
<parsedparameter><type>volatile XSInt32 *</type><name>value</name></parsedparameter>
</parsedparameterlist>
<returntype> XS_EXPORT XSInt32</returntype>
<result><p>The new value
</p></result>
<declaration><declaration_type>XS_EXPORT</declaration_type> <declaration_type>XSInt32</declaration_type> <declaration_function>XSAtomic_Increment32</declaration_function>(
    <declaration_keyword>volatile</declaration_keyword> <declaration_type>XSInt32</declaration_type> <declaration_type>*</declaration_type><declaration_param>value</declaration_param> );  </declaration>
<desc><p/></desc>
</function><function id="//xsdoc_ref/c/func/XSAtomic_Increment64" lang="c"><name>XSAtomic_Increment64</name>
<abstract><p>Atomically increments a 64 bits value
</p></abstract>
<parameterlist>
<parameter><name>value</name><desc><p>The 64 bits value to increment</p></desc></parameter>
</parameterlist>
<parsedparameterlist>
<parsedparameter><type>volatile XSInt64 *</type><name>value</name></parsedparameter>
</parsedparameterlist>
<returntype> XS_EXPORT XSInt64</returntype>
<result><p>The new value
</p></result>
<declaration><declaration_type>XS_EXPORT</declaration_type> <declaration_type>XSInt64</declaration_type> <declaration_function>XSAtomic_Increment64</declaration_function>(
    <declaration_keyword>volatile</declaration_keyword> <declaration_type>XSInt64</declaration_type> <declaration_type>*</declaration_type><declaration_param>value</declaration_param> );  </declaration>
<desc><p/></desc>
</function><function id="//xsdoc_ref/c/func/XSAtomic_IncrementInteger" lang="c"><name>XSAtomic_IncrementInteger</name>
<abstract><p>Atomically increments an integer value
</p></abstract>
<parameterlist>
<parameter><name>value</name><desc><p>The integer value to increment</p></desc></parameter>
</parameterlist>
<parsedparameterlist>
<parsedparameter><type>volatile XSInteger *</type><name>value</name></parsedparameter>
</parsedparameterlist>
<returntype> XS_EXPORT XSInteger</returntype>
<result><p>The new value
</p></result>
<declaration><declaration_type>XS_EXPORT</declaration_type> <declaration_type>XSInteger</declaration_type> <declaration_function>XSAtomic_IncrementInteger</declaration_function>(
    <declaration_keyword>volatile</declaration_keyword> <declaration_type>XSInteger</declaration_type> <declaration_type>*</declaration_type><declaration_param>value</declaration_param> );  </declaration>
<desc><p/></desc>
</function><function id="//xsdoc_ref/c/func/XSAtomic_Read32" lang="c"><name>XSAtomic_Read32</name>
<abstract><p>Atomically reads a 32 bits value
</p></abstract>
<parameterlist>
<parameter><name>value</name><desc><p>The 32 bits value to read</p></desc></parameter>
</parameterlist>
<parsedparameterlist>
<parsedparameter><type>volatile XSInt32 *</type><name>value</name></parsedparameter>
</parsedparameterlist>
<returntype> XSInt32</returntype>
<result><p>The 32 bits value
</p></result>
<declaration><declaration_type>XSInt32</declaration_type> <declaration_function>XSAtomic_Read32</declaration_function>(
    <declaration_keyword>volatile</declaration_keyword> <declaration_type>XSInt32</declaration_type> <declaration_type>*</declaration_type><declaration_param>value</declaration_param> );  </declaration>
<desc><p/></desc>
</function><function id="//xsdoc_ref/c/func/XSAtomic_Read64" lang="c"><name>XSAtomic_Read64</name>
<abstract><p>Atomically reads a 64 bits value
</p></abstract>
<parameterlist>
<parameter><name>value</name><desc><p>The 64 bits value to read</p></desc></parameter>
</parameterlist>
<parsedparameterlist>
<parsedparameter><type>volatile XSInt64 *</type><name>value</name></parsedparameter>
</parsedparameterlist>
<returntype> XSInt64</returntype>
<result><p>The 64 bits value
</p></result>
<declaration><declaration_type>XSInt64</declaration_type> <declaration_function>XSAtomic_Read64</declaration_function>(
    <declaration_keyword>volatile</declaration_keyword> <declaration_type>XSInt64</declaration_type> <declaration_type>*</declaration_type><declaration_param>value</declaration_param> );  </declaration>
<desc><p/></desc>
</function><function id="//xsdoc_ref/c/func/XSAtomic_ReadInteger" lang="c"><name>XSAtomic_ReadInteger</name>
<abstract><p>Atomically reads an integer value
</p></abstract>
<parameterlist>
<parameter><name>value</name><desc><p>The integer value to read</p></desc></parameter>
</parameterlist>
<parsedparameterlist>
<parsedparameter><type>volatile XSInteger *</type><name>value</name></parsedparameter>
</parsedparameterlist>
<returntype> XSInteger</returntype>
<result><p>The integer value
</p></result>
<declaration><declaration_type>XSInteger</declaration_type> <declaration_function>XSAtomic_ReadInteger</declaration_function>(
    <declaration_keyword>volatile</declaration_keyword> <declaration_type>XSInteger</declaration_type> <declaration_type>*</declaration_type><declaration_param>value</declaration_param> );  </declaration>
<desc><p/></desc>
</function></functions>
<copyrightinfo>&#169; (c) 2010-2014 - Jean-David Gadina - www.xs-labs.com
</copyrightinfo>
<timestamp>Thursday, September 04, 2014</timestamp>
</header>