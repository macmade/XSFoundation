<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE header PUBLIC "-//Apple Computer//DTD HEADERDOC 1.6//EN" "/System/Library/DTDs/HeaderDoc-1.6.dtd">
<header id="//xsdoc_ref/doc/header/XSThreading.h" lang="c" filename="XSThreading.h" headerpath="/Users/macmade/Documents/Macmade/Development/GitHub/XSFoundation/XSFoundation/include/XS/Functions/XSThreading.h"><name>XSThreading.h</name>
<abstract><p>XSFoundation threading functions
</p></abstract>
<attributes><attribute><name>Author</name><value>Jean-David Gadina - www.xs-labs.com</value></attribute>
</attributes>
<includes>
<include><hd_link logicalPath="//xsdoc_ref/doc/header/XSTypes.h">&lt;XS/XSTypes.h&gt;</hd_link></include>
</includes>
<desc><p>Whenever possible, prefer using the XSFoundation class types
like XSThreadRef, XSLockRef, XSSemaphoreRef, etc. over this set
of functions.
</p></desc>
<functions><function id="//xsdoc_ref/c/func/XSThreading_GetCurrentThreadID" lang="c"><name>XSThreading_GetCurrentThreadID</name>
<abstract><p>Gets the ID of the current thread
</p></abstract>
<returntype> XSUInteger</returntype>
<result><p>The ID of the current thread
</p></result>
<declaration><declaration_type>XSUInteger</declaration_type> <declaration_function>XSThreading_GetCurrentThreadID</declaration_function>(
    <declaration_param>void</declaration_param> );  </declaration>
<desc><p/></desc>
</function><function id="//xsdoc_ref/c/func/XSThreading_MutexCreate" lang="c"><name>XSThreading_MutexCreate</name>
<abstract><p>Creates a mutex
</p></abstract>
<parameterlist>
<parameter><name>mutex</name><desc><p>A pointer to an uninitialized mutex</p></desc></parameter>
</parameterlist>
<parsedparameterlist>
<parsedparameter><type>XSMutex *</type><name>mutex</name></parsedparameter>
</parsedparameterlist>
<returntype> bool</returntype>
<result><p>True if the mutex was successfully created, otherwise false
</p></result>
<declaration><declaration_type>bool</declaration_type> <declaration_function>XSThreading_MutexCreate</declaration_function>(
    <declaration_type>XSMutex</declaration_type> <declaration_type>*</declaration_type><declaration_param>mutex</declaration_param> );  </declaration>
<desc><p>Mutexes are created recursive.
</p></desc>
</function><function id="//xsdoc_ref/c/func/XSThreading_MutexDelete" lang="c"><name>XSThreading_MutexDelete</name>
<abstract><p>Deletes a mutex
</p></abstract>
<parameterlist>
<parameter><name>mutex</name><desc><p>A pointer to the mutex to delete</p></desc></parameter>
</parameterlist>
<parsedparameterlist>
<parsedparameter><type>XSMutex *</type><name>mutex</name></parsedparameter>
</parsedparameterlist>
<returntype> void</returntype>
<declaration><declaration_type>void</declaration_type> <declaration_function>XSThreading_MutexDelete</declaration_function>(
    <declaration_type>XSMutex</declaration_type> <declaration_type>*</declaration_type><declaration_param>mutex</declaration_param> );  </declaration>
<desc><p/></desc>
</function><function id="//xsdoc_ref/c/func/XSThreading_MutexLock" lang="c"><name>XSThreading_MutexLock</name>
<abstract><p>Locks a mutex
</p></abstract>
<parameterlist>
<parameter><name>mutex</name><desc><p>The mutex to lock</p></desc></parameter>
</parameterlist>
<parsedparameterlist>
<parsedparameter><type>XSMutex *</type><name>mutex</name></parsedparameter>
</parsedparameterlist>
<returntype> void</returntype>
<declaration><declaration_type>void</declaration_type> <declaration_function>XSThreading_MutexLock</declaration_function>(
    <declaration_type>XSMutex</declaration_type> <declaration_type>*</declaration_type><declaration_param>mutex</declaration_param> );  </declaration>
<desc><p/></desc>
</function><function id="//xsdoc_ref/c/func/XSThreading_MutexTryLock" lang="c"><name>XSThreading_MutexTryLock</name>
<abstract><p>Tries to lock a mutex
</p></abstract>
<parameterlist>
<parameter><name>mutex</name><desc><p>The mutex to lock, if possible</p></desc></parameter>
</parameterlist>
<parsedparameterlist>
<parsedparameter><type>XSMutex *</type><name>mutex</name></parsedparameter>
</parsedparameterlist>
<returntype> bool</returntype>
<result><p>True if the mutex was locked, otherwise false
</p></result>
<declaration><declaration_type>bool</declaration_type> <declaration_function>XSThreading_MutexTryLock</declaration_function>(
    <declaration_type>XSMutex</declaration_type> <declaration_type>*</declaration_type><declaration_param>mutex</declaration_param> );  </declaration>
<desc><p>If the mutex can't be locked, this function will return
immediately, rather than waiting.
</p></desc>
</function><function id="//xsdoc_ref/c/func/XSThreading_MutexUnlock" lang="c"><name>XSThreading_MutexUnlock</name>
<abstract><p>Unlocks a mutex
</p></abstract>
<parameterlist>
<parameter><name>mutex</name><desc><p>The mutex to unlock</p></desc></parameter>
</parameterlist>
<parsedparameterlist>
<parsedparameter><type>XSMutex *</type><name>mutex</name></parsedparameter>
</parsedparameterlist>
<returntype> void</returntype>
<declaration><declaration_type>void</declaration_type> <declaration_function>XSThreading_MutexUnlock</declaration_function>(
    <declaration_type>XSMutex</declaration_type> <declaration_type>*</declaration_type><declaration_param>mutex</declaration_param> );  </declaration>
<desc><p/></desc>
</function><function id="//xsdoc_ref/c/func/XSThreading_SemaphoreCreate" lang="c"><name>XSThreading_SemaphoreCreate</name>
<abstract><p>Creates a semaphore
</p></abstract>
<parameterlist>
<parameter><name>sem</name><desc><p>A pointer to an uninitialized semaphore</p></desc></parameter>
<parameter><name>name</name><desc><p>Optional: the name of the semaphore. Pass NULL to create an unnamed semaphore</p></desc></parameter>
<parameter><name>count</name><desc><p>The maximum count for the semaphore</p></desc></parameter>
</parameterlist>
<parsedparameterlist>
<parsedparameter><type>XSSemaphore *</type><name>sem</name></parsedparameter>
<parsedparameter><type>const char *</type><name>name</name></parsedparameter>
<parsedparameter><type>XSUInteger</type><name>count</name></parsedparameter>
</parsedparameterlist>
<returntype> bool</returntype>
<result><p>True if the semaphore was successfully created, otherwise false
</p></result>
<declaration><declaration_type>bool</declaration_type> <declaration_function>XSThreading_SemaphoreCreate</declaration_function>(
    <declaration_type>XSSemaphore</declaration_type> <declaration_type>*</declaration_type><declaration_param>sem</declaration_param>,
    <declaration_keyword>const</declaration_keyword> <declaration_type>char</declaration_type> <declaration_type>*</declaration_type><declaration_param>name</declaration_param>,
    <declaration_type>XSUInteger</declaration_type> <declaration_param>count</declaration_param> );  </declaration>
<desc><p/></desc>
</function><function id="//xsdoc_ref/c/func/XSThreading_SemaphoreDelete" lang="c"><name>XSThreading_SemaphoreDelete</name>
<abstract><p>Deletes a semaphore
</p></abstract>
<parameterlist>
<parameter><name>sem</name><desc><p>A pointer to the semaphore to delete</p></desc></parameter>
</parameterlist>
<parsedparameterlist>
<parsedparameter><type>XSSemaphore *</type><name>sem</name></parsedparameter>
</parsedparameterlist>
<returntype> void</returntype>
<declaration><declaration_type>void</declaration_type> <declaration_function>XSThreading_SemaphoreDelete</declaration_function>(
    <declaration_type>XSSemaphore</declaration_type> <declaration_type>*</declaration_type><declaration_param>sem</declaration_param> );  </declaration>
<desc><p/></desc>
</function><function id="//xsdoc_ref/c/func/XSThreading_SemaphoreSignal" lang="c"><name>XSThreading_SemaphoreSignal</name>
<abstract><p>Unlocks a semaphore
</p></abstract>
<parameterlist>
<parameter><name>sem</name><desc><p>The semaphore to unlock</p></desc></parameter>
</parameterlist>
<parsedparameterlist>
<parsedparameter><type>XSSemaphore *</type><name>sem</name></parsedparameter>
</parsedparameterlist>
<returntype> void</returntype>
<declaration><declaration_type>void</declaration_type> <declaration_function>XSThreading_SemaphoreSignal</declaration_function>(
    <declaration_type>XSSemaphore</declaration_type> <declaration_type>*</declaration_type><declaration_param>sem</declaration_param> );  </declaration>
<desc><p/></desc>
</function><function id="//xsdoc_ref/c/func/XSThreading_SemaphoreTryWait" lang="c"><name>XSThreading_SemaphoreTryWait</name>
<abstract><p>Tries to lock a semaphore
</p></abstract>
<parameterlist>
<parameter><name>sem</name><desc><p>The semaphore to lock, if possible</p></desc></parameter>
</parameterlist>
<parsedparameterlist>
<parsedparameter><type>XSSemaphore *</type><name>sem</name></parsedparameter>
</parsedparameterlist>
<returntype> bool</returntype>
<result><p>True if the semaphore was locked, otherwise false
</p></result>
<declaration><declaration_type>bool</declaration_type> <declaration_function>XSThreading_SemaphoreTryWait</declaration_function>(
    <declaration_type>XSSemaphore</declaration_type> <declaration_type>*</declaration_type><declaration_param>sem</declaration_param> );  </declaration>
<desc><p>If the semaphore can't be locked, this function will return
immediately, rather than waiting.
</p></desc>
</function><function id="//xsdoc_ref/c/func/XSThreading_SemaphoreWait" lang="c"><name>XSThreading_SemaphoreWait</name>
<abstract><p>Locks a semaphore
</p></abstract>
<parameterlist>
<parameter><name>sem</name><desc><p>The semaphore to lock</p></desc></parameter>
</parameterlist>
<parsedparameterlist>
<parsedparameter><type>XSSemaphore *</type><name>sem</name></parsedparameter>
</parsedparameterlist>
<returntype> void</returntype>
<declaration><declaration_type>void</declaration_type> <declaration_function>XSThreading_SemaphoreWait</declaration_function>(
    <declaration_type>XSSemaphore</declaration_type> <declaration_type>*</declaration_type><declaration_param>sem</declaration_param> );  </declaration>
<desc><p/></desc>
</function><function id="//xsdoc_ref/c/func/XSThreading_SetCurrentThreadName" lang="c"><name>XSThreading_SetCurrentThreadName</name>
<abstract><p>Sets the name of the current thread
</p></abstract>
<parameterlist>
<parameter><name>name</name><desc><p>The name for the current thread</p></desc></parameter>
</parameterlist>
<parsedparameterlist>
<parsedparameter><type>const char *</type><name>name</name></parsedparameter>
</parsedparameterlist>
<returntype> void</returntype>
<declaration><declaration_type>void</declaration_type> <declaration_function>XSThreading_SetCurrentThreadName</declaration_function>(
    <declaration_keyword>const</declaration_keyword> <declaration_type>char</declaration_type> <declaration_type>*</declaration_type><declaration_param>name</declaration_param> );  </declaration>
<desc><p/></desc>
</function><function id="//xsdoc_ref/c/func/XSThreading_TLSGetObject" lang="c"><name>XSThreading_TLSGetObject</name>
<abstract><p>Gets a TLS object
</p></abstract>
<parameterlist>
<parameter><name>key</name><desc><p>The TLS key</p></desc></parameter>
</parameterlist>
<parsedparameterlist>
<parsedparameter><type>XSTLSKey *</type><name>key</name></parsedparameter>
</parsedparameterlist>
<returntype> XSObjectRef</returntype>
<result><p>The TLS object
</p></result>
<declaration><declaration_type>XSObjectRef</declaration_type> <declaration_function>XSThreading_TLSGetObject</declaration_function>(
    <declaration_type>XSTLSKey</declaration_type> <declaration_type>*</declaration_type><declaration_param>key</declaration_param> );  </declaration>
<desc><p/></desc>
</function><function id="//xsdoc_ref/c/func/XSThreading_TLSGetValue" lang="c"><name>XSThreading_TLSGetValue</name>
<abstract><p>Gets a TLS value
</p></abstract>
<parameterlist>
<parameter><name>key</name><desc><p>The TLS key</p></desc></parameter>
</parameterlist>
<parsedparameterlist>
<parsedparameter><type>XSTLSKey *</type><name>key</name></parsedparameter>
</parsedparameterlist>
<returntype> void *</returntype>
<result><p>The TLS value
</p></result>
<declaration><declaration_type>void</declaration_type> <declaration_type>*</declaration_type> <declaration_function>XSThreading_TLSGetValue</declaration_function>(
    <declaration_type>XSTLSKey</declaration_type> <declaration_type>*</declaration_type><declaration_param>key</declaration_param> );  </declaration>
<desc><p/></desc>
</function><function id="//xsdoc_ref/c/func/XSThreading_TLSKeyCreate" lang="c"><name>XSThreading_TLSKeyCreate</name>
<abstract><p>Creates a TLS key
</p></abstract>
<parameterlist>
<parameter><name>key</name><desc><p>A pointer to an uninitialized TLS key</p></desc></parameter>
</parameterlist>
<parsedparameterlist>
<parsedparameter><type>XSTLSKey *</type><name>key</name></parsedparameter>
</parsedparameterlist>
<returntype> bool</returntype>
<result><p>True if the key was successfully created, otherwise false
</p></result>
<declaration><declaration_type>bool</declaration_type> <declaration_function>XSThreading_TLSKeyCreate</declaration_function>(
    <declaration_type>XSTLSKey</declaration_type> <declaration_type>*</declaration_type><declaration_param>key</declaration_param> );  </declaration>
<desc><p/></desc>
</function><function id="//xsdoc_ref/c/func/XSThreading_TLSKeyDelete" lang="c"><name>XSThreading_TLSKeyDelete</name>
<abstract><p>Deletes a TLS key
</p></abstract>
<parameterlist>
<parameter><name>key</name><desc><p>A pointer to the TLS key to delete</p></desc></parameter>
</parameterlist>
<parsedparameterlist>
<parsedparameter><type>XSTLSKey *</type><name>key</name></parsedparameter>
</parsedparameterlist>
<returntype> void</returntype>
<declaration><declaration_type>void</declaration_type> <declaration_function>XSThreading_TLSKeyDelete</declaration_function>(
    <declaration_type>XSTLSKey</declaration_type> <declaration_type>*</declaration_type><declaration_param>key</declaration_param> );  </declaration>
<desc><p/></desc>
</function><function id="//xsdoc_ref/c/func/XSThreading_TLSSetObject" lang="c"><name>XSThreading_TLSSetObject</name>
<abstract><p>Sets a TLS object
</p></abstract>
<parameterlist>
<parameter><name>key</name><desc><p>The TLS key</p></desc></parameter>
<parameter><name>object</name><desc><p>The TLS object</p></desc></parameter>
<parameter><name>association</name><desc><p>The object association</p></desc></parameter>
</parameterlist>
<parsedparameterlist>
<parsedparameter><type>XSTLSKey *</type><name>key</name></parsedparameter>
<parsedparameter><type>XSObjectRef</type><name>object</name></parsedparameter>
<parsedparameter><type>XSObjectAssociation</type><name>association</name></parsedparameter>
</parsedparameterlist>
<attributelists><listattribute><name>See</name><list>
<item><name>XSTLSObjectAssociation</name><value><hd_link logicalPath="XSTLSObjectAssociation" isseealso="yes">XSTLSObjectAssociation</hd_link></value></item></list></listattribute>
</attributelists>
<returntype> void</returntype>
<declaration><declaration_type>void</declaration_type> <declaration_function>XSThreading_TLSSetObject</declaration_function>(
    <declaration_type>XSTLSKey</declaration_type> <declaration_type>*</declaration_type><declaration_param>key</declaration_param>,
    <declaration_type>XSObjectRef</declaration_type> <declaration_param>object</declaration_param>,
    <declaration_type>XSObjectAssociation</declaration_type> <declaration_param>association</declaration_param> );  </declaration>
<desc><p/></desc>
</function><function id="//xsdoc_ref/c/func/XSThreading_TLSSetValue" lang="c"><name>XSThreading_TLSSetValue</name>
<abstract><p>Sets a TLS value
</p></abstract>
<parameterlist>
<parameter><name>key</name><desc><p>The TLS key</p></desc></parameter>
<parameter><name>data</name><desc><p>The TLS value</p></desc></parameter>
</parameterlist>
<parsedparameterlist>
<parsedparameter><type>XSTLSKey *</type><name>key</name></parsedparameter>
<parsedparameter><type>void *</type><name>data</name></parsedparameter>
</parsedparameterlist>
<returntype> void</returntype>
<declaration><declaration_type>void</declaration_type> <declaration_function>XSThreading_TLSSetValue</declaration_function>(
    <declaration_type>XSTLSKey</declaration_type> <declaration_type>*</declaration_type><declaration_param>key</declaration_param>,
    <declaration_type>void</declaration_type> <declaration_type>*</declaration_type><declaration_param>data</declaration_param> );  </declaration>
<desc><p/></desc>
</function></functions>
<copyrightinfo>&#169; (c) 2010-2014 - Jean-David Gadina - www.xs-labs.com
</copyrightinfo>
<timestamp>Thursday, September 04, 2014</timestamp>
</header>