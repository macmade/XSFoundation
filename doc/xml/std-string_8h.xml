<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.7.4">
  <compounddef id="std-string_8h" kind="file">
    <compoundname>std-string.h</compoundname>
    <includes refid="std-keywords_8h" local="yes">std-keywords.h</includes>
    <includedby refid="std_8h" local="yes">std.h</includedby>
    <incdepgraph>
      <node id="6446">
        <label>std-keywords.h</label>
        <link refid="std-keywords_8h"/>
      </node>
      <node id="6445">
        <label>std-string.h</label>
        <link refid="std-string.h"/>
        <childnode refid="6446" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="6456">
        <label>__XSApplicationArgument.h</label>
        <link refid="____XSApplicationArgument_8h"/>
      </node>
      <node id="6461">
        <label>__XSColor.h</label>
        <link refid="____XSColor_8h"/>
      </node>
      <node id="6473">
        <label>__XSNull.h</label>
        <link refid="____XSNull_8h"/>
      </node>
      <node id="6463">
        <label>__XSDictionary.h</label>
        <link refid="____XSDictionary_8h"/>
      </node>
      <node id="6451">
        <label>XSMemory.h</label>
        <link refid="XSMemory_8h"/>
      </node>
      <node id="6479">
        <label>__XSTimer.h</label>
        <link refid="____XSTimer_8h"/>
      </node>
      <node id="6452">
        <label>XSMemoryDebug.h</label>
        <link refid="XSMemoryDebug_8h"/>
      </node>
      <node id="6468">
        <label>__XSLock.h</label>
        <link refid="____XSLock_8h"/>
      </node>
      <node id="6457">
        <label>__XSArray.h</label>
        <link refid="____XSArray_8h"/>
      </node>
      <node id="6477">
        <label>__XSString.h</label>
        <link refid="____XSString_8h"/>
      </node>
      <node id="6455">
        <label>__XSApplication.h</label>
        <link refid="____XSApplication_8h"/>
      </node>
      <node id="6458">
        <label>__XSBag.h</label>
        <link refid="____XSBag_8h"/>
      </node>
      <node id="6482">
        <label>XSRuntime.h</label>
        <link refid="XSRuntime_8h"/>
      </node>
      <node id="6467">
        <label>__XSHost.h</label>
        <link refid="____XSHost_8h"/>
      </node>
      <node id="6474">
        <label>__XSNumber.h</label>
        <link refid="____XSNumber_8h"/>
      </node>
      <node id="6478">
        <label>__XSThread.h</label>
        <link refid="____XSThread_8h"/>
      </node>
      <node id="6449">
        <label>XSTypes.h</label>
        <link refid="XSTypes_8h"/>
        <childnode refid="6450" relation="include">
        </childnode>
        <childnode refid="6451" relation="include">
        </childnode>
        <childnode refid="6452" relation="include">
        </childnode>
        <childnode refid="6453" relation="include">
        </childnode>
      </node>
      <node id="6450">
        <label>XSGeometry.h</label>
        <link refid="XSGeometry_8h"/>
      </node>
      <node id="6476">
        <label>__XSSort.h</label>
        <link refid="____XSSort_8h"/>
      </node>
      <node id="6480">
        <label>__XSURL.h</label>
        <link refid="____XSURL_8h"/>
      </node>
      <node id="6472">
        <label>__XSNotificationCenter.h</label>
        <link refid="____XSNotificationCenter_8h"/>
      </node>
      <node id="6460">
        <label>__XSBTree.h</label>
        <link refid="____XSBTree_8h"/>
      </node>
      <node id="6448">
        <label>std.h</label>
        <link refid="std_8h"/>
        <childnode refid="6449" relation="include">
        </childnode>
        <childnode refid="6454" relation="include">
        </childnode>
      </node>
      <node id="6469">
        <label>__XSMemory.h</label>
        <link refid="____XSMemory_8h"/>
        <childnode refid="6470" relation="include">
        </childnode>
      </node>
      <node id="6470">
        <label>__XSMemoryDebug.h</label>
        <link refid="____XSMemoryDebug_8h"/>
      </node>
      <node id="6453">
        <label>XSSort.h</label>
        <link refid="XSSort_8h"/>
      </node>
      <node id="6464">
        <label>__XSError.h</label>
        <link refid="____XSError_8h"/>
      </node>
      <node id="6462">
        <label>__XSData.h</label>
        <link refid="____XSData_8h"/>
      </node>
      <node id="6465">
        <label>__XSException.h</label>
        <link refid="____XSException_8h"/>
      </node>
      <node id="6471">
        <label>__XSNotification.h</label>
        <link refid="____XSNotification_8h"/>
      </node>
      <node id="6459">
        <label>__XSBool.h</label>
        <link refid="____XSBool_8h"/>
      </node>
      <node id="6454">
        <label>XS.h</label>
        <link refid="XS_8h"/>
        <childnode refid="6455" relation="include">
        </childnode>
        <childnode refid="6456" relation="include">
        </childnode>
        <childnode refid="6457" relation="include">
        </childnode>
        <childnode refid="6458" relation="include">
        </childnode>
        <childnode refid="6459" relation="include">
        </childnode>
        <childnode refid="6460" relation="include">
        </childnode>
        <childnode refid="6461" relation="include">
        </childnode>
        <childnode refid="6462" relation="include">
        </childnode>
        <childnode refid="6463" relation="include">
        </childnode>
        <childnode refid="6464" relation="include">
        </childnode>
        <childnode refid="6465" relation="include">
        </childnode>
        <childnode refid="6466" relation="include">
        </childnode>
        <childnode refid="6467" relation="include">
        </childnode>
        <childnode refid="6468" relation="include">
        </childnode>
        <childnode refid="6469" relation="include">
        </childnode>
        <childnode refid="6470" relation="include">
        </childnode>
        <childnode refid="6471" relation="include">
        </childnode>
        <childnode refid="6472" relation="include">
        </childnode>
        <childnode refid="6473" relation="include">
        </childnode>
        <childnode refid="6474" relation="include">
        </childnode>
        <childnode refid="6475" relation="include">
        </childnode>
        <childnode refid="6476" relation="include">
        </childnode>
        <childnode refid="6477" relation="include">
        </childnode>
        <childnode refid="6478" relation="include">
        </childnode>
        <childnode refid="6479" relation="include">
        </childnode>
        <childnode refid="6480" relation="include">
        </childnode>
        <childnode refid="6481" relation="include">
        </childnode>
        <childnode refid="6482" relation="include">
        </childnode>
      </node>
      <node id="6447">
        <label>std-string.h</label>
        <link refid="std-string.h"/>
        <childnode refid="6448" relation="include">
        </childnode>
      </node>
      <node id="6475">
        <label>__XSSet.h</label>
        <link refid="____XSSet_8h"/>
      </node>
      <node id="6481">
        <label>__XSURLRequest.h</label>
        <link refid="____XSURLRequest_8h"/>
      </node>
      <node id="6466">
        <label>__XSFile.h</label>
        <link refid="____XSFile_8h"/>
      </node>
    </invincdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="std-string_8h_1a9fe1c834f692e9cd6b7374018e197a0b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void itoa</definition>
        <argsstring>(int n, char s[], int radix)</argsstring>
        <name>itoa</name>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <param>
          <type>char</type>
          <declname>s</declname>
          <array>[]</array>
        </param>
        <param>
          <type>int</type>
          <declname>radix</declname>
        </param>
        <briefdescription>
<para>Converts an integer to a string. </para>        </briefdescription>
        <detaileddescription>
<para>Converts an integer value to a null-terminated string using the specified base and stores the result in the array given by str parameter. If base is 10 and value is negative, the resulting string is preceded with a minus sign (-). With any other base, value is always considered unsigned. str should be an array long enough to contain any possible value: ( sizeof( int ) * 8 + 1 ) for radix = 2, i.e. 17 bytes in 16-bits platforms and 33 in 32-bits platforms. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>Value to be converted to a string. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para>Array in memory where to store the resulting null-terminated string. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>radix</parametername>
</parameternamelist>
<parameterdescription>
<para>Numerical base used to represent the value as a string, between 2 and 16, where 10 means decimal base, 16 hexadecimal, 8 octal, and 2 binary. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>void </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/macmade/Documents/Brain/GitHub/XSFoundation/source/include/std/std-string.h" line="66"/>
      </memberdef>
      <memberdef kind="function" id="std-string_8h_1a4b8ccc37f861c0382ebba4aeed0c697f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* strrstr</definition>
        <argsstring>(char *s1, char *s2)</argsstring>
        <name>strrstr</name>
        <param>
          <type>char *</type>
          <declname>s1</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>s2</declname>
        </param>
        <briefdescription>
<para>Locate substring. </para>        </briefdescription>
        <detaileddescription>
<para>Returns a pointer to the last occurrence of str2 in str1, or a null pointer if str2 is not part of str1. The matching process does not include the terminating null-characters. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s1</parametername>
</parameternamelist>
<parameterdescription>
<para>C string to be scanned. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>s2</parametername>
</parameternamelist>
<parameterdescription>
<para>C string containing the sequence of characters to match. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A pointer to the last occurrence in str1 of any of the entire sequence of characters specified in str2, or a null pointer if the sequence is not present in str1. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/macmade/Documents/Brain/GitHub/XSFoundation/source/include/std/std-string.h" line="98"/>
      </memberdef>
      <memberdef kind="function" id="std-string_8h_1aad55cf8514198f240cd98c2313da682e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void utoa</definition>
        <argsstring>(unsigned int n, char s[], int radix)</argsstring>
        <name>utoa</name>
        <param>
          <type>unsigned int</type>
          <declname>n</declname>
        </param>
        <param>
          <type>char</type>
          <declname>s</declname>
          <array>[]</array>
        </param>
        <param>
          <type>int</type>
          <declname>radix</declname>
        </param>
        <briefdescription>
<para>Converts an unsigned integer to a string. </para>        </briefdescription>
        <detaileddescription>
<para>Converts an unsigned integer value to a null-terminated string using the specified base and stores the result in the array given by str parameter. If base is 10 and value is negative, the resulting string is preceded with a minus sign (-). With any other base, value is always considered unsigned. str should be an array long enough to contain any possible value: ( sizeof( unsigned int ) * 8 + 1 ) for radix = 2, i.e. 17 bytes in 16-bits platforms and 33 in 32-bits platforms. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>Value to be converted to a string. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para>Array in memory where to store the resulting null-terminated string. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>radix</parametername>
</parameternamelist>
<parameterdescription>
<para>Numerical base used to represent the value as a string, between 2 and 16, where 10 means decimal base, 16 hexadecimal, 8 octal, and 2 binary. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>void </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/macmade/Documents/Brain/GitHub/XSFoundation/source/include/std/std-string.h" line="86"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Definition of the non-standard string functions. </para>    </briefdescription>
    <detaileddescription>
<para><simplesect kind="author"><para>Jean-David Gadina &lt;<ulink url="mailto:macmade@eosgarden.com">macmade@eosgarden.com</ulink>&gt; </para></simplesect>
</para>    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*******************************************************************************</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2011,<sp/>Jean-David<sp/>Gadina<sp/>&lt;macmade@eosgarden.com&gt;</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>Distributed<sp/>under<sp/>the<sp/>Boost<sp/>Software<sp/>License,<sp/>Version<sp/>1.0.</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>Boost<sp/>Software<sp/>License<sp/>-<sp/>Version<sp/>1.0<sp/>-<sp/>August<sp/>17th,<sp/>2003</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>Permission<sp/>is<sp/>hereby<sp/>granted,<sp/>free<sp/>of<sp/>charge,<sp/>to<sp/>any<sp/>person<sp/>or<sp/>organization</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/>obtaining<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>software<sp/>and<sp/>accompanying<sp/>documentation<sp/>covered<sp/>by</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*<sp/>this<sp/>license<sp/>(the<sp/>&quot;Software&quot;)<sp/>to<sp/>use,<sp/>reproduce,<sp/>display,<sp/>distribute,</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/>execute,<sp/>and<sp/>transmit<sp/>the<sp/>Software,<sp/>and<sp/>to<sp/>prepare<sp/>derivative<sp/>works<sp/>of<sp/>the</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/>Software,<sp/>and<sp/>to<sp/>permit<sp/>third-parties<sp/>to<sp/>whom<sp/>the<sp/>Software<sp/>is<sp/>furnished<sp/>to</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/>do<sp/>so,<sp/>all<sp/>subject<sp/>to<sp/>the<sp/>following:</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/>The<sp/>copyright<sp/>notices<sp/>in<sp/>the<sp/>Software<sp/>and<sp/>this<sp/>entire<sp/>statement,<sp/>including</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*<sp/>the<sp/>above<sp/>license<sp/>grant,<sp/>this<sp/>restriction<sp/>and<sp/>the<sp/>following<sp/>disclaimer,</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*<sp/>must<sp/>be<sp/>included<sp/>in<sp/>all<sp/>copies<sp/>of<sp/>the<sp/>Software,<sp/>in<sp/>whole<sp/>or<sp/>in<sp/>part,<sp/>and</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/>all<sp/>derivative<sp/>works<sp/>of<sp/>the<sp/>Software,<sp/>unless<sp/>such<sp/>copies<sp/>or<sp/>derivative</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/>works<sp/>are<sp/>solely<sp/>in<sp/>the<sp/>form<sp/>of<sp/>machine-executable<sp/>object<sp/>code<sp/>generated<sp/>by</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*<sp/>a<sp/>source<sp/>language<sp/>processor.</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*<sp/>THE<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>&quot;AS<sp/>IS&quot;,<sp/>WITHOUT<sp/>WARRANTY<sp/>OF<sp/>ANY<sp/>KIND,<sp/>EXPRESS<sp/>OR</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*<sp/>IMPLIED,<sp/>INCLUDING<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO<sp/>THE<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY,</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>*<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE,<sp/>TITLE<sp/>AND<sp/>NON-INFRINGEMENT.<sp/>IN<sp/>NO<sp/>EVENT</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/>*<sp/>SHALL<sp/>THE<sp/>COPYRIGHT<sp/>HOLDERS<sp/>OR<sp/>ANYONE<sp/>DISTRIBUTING<sp/>THE<sp/>SOFTWARE<sp/>BE<sp/>LIABLE</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/>*<sp/>FOR<sp/>ANY<sp/>DAMAGES<sp/>OR<sp/>OTHER<sp/>LIABILITY,<sp/>WHETHER<sp/>IN<sp/>CONTRACT,<sp/>TORT<sp/>OR<sp/>OTHERWISE,</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/>*<sp/>ARISING<sp/>FROM,<sp/>OUT<sp/>OF<sp/>OR<sp/>IN<sp/>CONNECTION<sp/>WITH<sp/>THE<sp/>SOFTWARE<sp/>OR<sp/>THE<sp/>USE<sp/>OR<sp/>OTHER</highlight></codeline>
<codeline lineno="27"><highlight class="comment"><sp/>*<sp/>DEALINGS<sp/>IN<sp/>THE<sp/>SOFTWARE.</highlight></codeline>
<codeline lineno="28"><highlight class="comment"><sp/>******************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>$Id$<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="32"><highlight class="comment">/*!</highlight></codeline>
<codeline lineno="33"><highlight class="comment"><sp/>*<sp/>@file<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std-string.h</highlight></codeline>
<codeline lineno="34"><highlight class="comment"><sp/>*<sp/>@brief<sp/><sp/><sp/><sp/><sp/><sp/><sp/>Definition<sp/>of<sp/>the<sp/>non-standard<sp/>string<sp/>functions</highlight></codeline>
<codeline lineno="35"><highlight class="comment"><sp/>*<sp/>@author<sp/><sp/><sp/><sp/><sp/><sp/>Jean-David<sp/>Gadina<sp/>&lt;macmade@eosgarden.com&gt;</highlight></codeline>
<codeline lineno="36"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>_STDC_STD_EXTRAS_STRING_H_</highlight></codeline>
<codeline lineno="39"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>_STDC_STD_EXTRAS_STRING_H_</highlight></codeline>
<codeline lineno="40"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#pragma<sp/>once</highlight></codeline>
<codeline lineno="41"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="std-keywords_8h" kindref="compound" tooltip="Standard compiant keywords.">std-keywords.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight></codeline>
<codeline lineno="45"><highlight class="preprocessor"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="47"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(<sp/>_WIN32<sp/>)<sp/>&amp;&amp;<sp/>!defined(<sp/>_WIN64<sp/>)</highlight></codeline>
<codeline lineno="49"><highlight class="preprocessor"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="50"><highlight class="comment">/*!</highlight></codeline>
<codeline lineno="51"><highlight class="comment"><sp/>*<sp/>@brief<sp/><sp/><sp/><sp/><sp/><sp/><sp/>Converts<sp/>an<sp/>integer<sp/>to<sp/>a<sp/>string</highlight></codeline>
<codeline lineno="52"><highlight class="comment"><sp/>*<sp/>@details<sp/><sp/><sp/><sp/><sp/>Converts<sp/>an<sp/>integer<sp/>value<sp/>to<sp/>a<sp/>null-terminated<sp/>string<sp/>using<sp/>the</highlight></codeline>
<codeline lineno="53"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>specified<sp/>base<sp/>and<sp/>stores<sp/>the<sp/>result<sp/>in<sp/>the<sp/>array<sp/>given<sp/>by<sp/>str</highlight></codeline>
<codeline lineno="54"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parameter.</highlight></codeline>
<codeline lineno="55"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>If<sp/>base<sp/>is<sp/>10<sp/>and<sp/>value<sp/>is<sp/>negative,<sp/>the<sp/>resulting<sp/>string<sp/>is</highlight></codeline>
<codeline lineno="56"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>preceded<sp/>with<sp/>a<sp/>minus<sp/>sign<sp/>(-).<sp/>With<sp/>any<sp/>other<sp/>base,<sp/>value<sp/>is</highlight></codeline>
<codeline lineno="57"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>always<sp/>considered<sp/>unsigned.</highlight></codeline>
<codeline lineno="58"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>str<sp/>should<sp/>be<sp/>an<sp/>array<sp/>long<sp/>enough<sp/>to<sp/>contain<sp/>any<sp/>possible</highlight></codeline>
<codeline lineno="59"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value:<sp/>(<sp/>sizeof(<sp/>int<sp/>)<sp/>*<sp/>8<sp/>+<sp/>1<sp/>)<sp/>for<sp/>radix<sp/>=<sp/>2,<sp/>i.e.<sp/>17<sp/>bytes</highlight></codeline>
<codeline lineno="60"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>in<sp/>16-bits<sp/>platforms<sp/>and<sp/>33<sp/>in<sp/>32-bits<sp/>platforms.</highlight></codeline>
<codeline lineno="61"><highlight class="comment"><sp/>*<sp/>@param<sp/><sp/><sp/><sp/><sp/><sp/><sp/>n<sp/><sp/><sp/><sp/><sp/><sp/><sp/>Value<sp/>to<sp/>be<sp/>converted<sp/>to<sp/>a<sp/>string.</highlight></codeline>
<codeline lineno="62"><highlight class="comment"><sp/>*<sp/>@param<sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/><sp/><sp/><sp/><sp/><sp/><sp/>Array<sp/>in<sp/>memory<sp/>where<sp/>to<sp/>store<sp/>the<sp/>resulting<sp/>null-terminated<sp/>string.</highlight></codeline>
<codeline lineno="63"><highlight class="comment"><sp/>*<sp/>@param<sp/><sp/><sp/><sp/><sp/><sp/><sp/>radix<sp/><sp/><sp/>Numerical<sp/>base<sp/>used<sp/>to<sp/>represent<sp/>the<sp/>value<sp/>as<sp/>a<sp/>string,<sp/>between<sp/>2<sp/>and<sp/>16,<sp/>where<sp/>10<sp/>means<sp/>decimal<sp/>base,<sp/>16<sp/>hexadecimal,<sp/>8<sp/>octal,<sp/>and<sp/>2<sp/>binary.</highlight></codeline>
<codeline lineno="64"><highlight class="comment"><sp/>*<sp/>@result<sp/><sp/><sp/><sp/><sp/><sp/>void</highlight></codeline>
<codeline lineno="65"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="std-string_8h_1a9fe1c834f692e9cd6b7374018e197a0b" kindref="member" tooltip="Converts an integer to a string.">itoa</ref>(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>s[],<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>radix<sp/>);</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="69"><highlight class="preprocessor"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="70"><highlight class="comment">/*!</highlight></codeline>
<codeline lineno="71"><highlight class="comment"><sp/>*<sp/>@brief<sp/><sp/><sp/><sp/><sp/><sp/><sp/>Converts<sp/>an<sp/>unsigned<sp/>integer<sp/>to<sp/>a<sp/>string</highlight></codeline>
<codeline lineno="72"><highlight class="comment"><sp/>*<sp/>@details<sp/><sp/><sp/><sp/><sp/>Converts<sp/>an<sp/>unsigned<sp/>integer<sp/>value<sp/>to<sp/>a<sp/>null-terminated<sp/>string</highlight></codeline>
<codeline lineno="73"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>using<sp/>the<sp/>specified<sp/>base<sp/>and<sp/>stores<sp/>the<sp/>result<sp/>in<sp/>the<sp/>array</highlight></codeline>
<codeline lineno="74"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>given<sp/>by<sp/>str<sp/>parameter.</highlight></codeline>
<codeline lineno="75"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>If<sp/>base<sp/>is<sp/>10<sp/>and<sp/>value<sp/>is<sp/>negative,<sp/>the<sp/>resulting<sp/>string<sp/>is</highlight></codeline>
<codeline lineno="76"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>preceded<sp/>with<sp/>a<sp/>minus<sp/>sign<sp/>(-).<sp/>With<sp/>any<sp/>other<sp/>base,<sp/>value<sp/>is</highlight></codeline>
<codeline lineno="77"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>always<sp/>considered<sp/>unsigned.</highlight></codeline>
<codeline lineno="78"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>str<sp/>should<sp/>be<sp/>an<sp/>array<sp/>long<sp/>enough<sp/>to<sp/>contain<sp/>any<sp/>possible</highlight></codeline>
<codeline lineno="79"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value:<sp/>(<sp/>sizeof(<sp/>unsigned<sp/>int<sp/>)<sp/>*<sp/>8<sp/>+<sp/>1<sp/>)<sp/>for<sp/>radix<sp/>=<sp/>2,</highlight></codeline>
<codeline lineno="80"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i.e.<sp/>17<sp/>bytes<sp/>in<sp/>16-bits<sp/>platforms<sp/>and<sp/>33<sp/>in<sp/>32-bits<sp/>platforms.</highlight></codeline>
<codeline lineno="81"><highlight class="comment"><sp/>*<sp/>@param<sp/><sp/><sp/><sp/><sp/><sp/><sp/>n<sp/><sp/><sp/><sp/><sp/><sp/><sp/>Value<sp/>to<sp/>be<sp/>converted<sp/>to<sp/>a<sp/>string.</highlight></codeline>
<codeline lineno="82"><highlight class="comment"><sp/>*<sp/>@param<sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/><sp/><sp/><sp/><sp/><sp/><sp/>Array<sp/>in<sp/>memory<sp/>where<sp/>to<sp/>store<sp/>the<sp/>resulting<sp/>null-terminated<sp/>string.</highlight></codeline>
<codeline lineno="83"><highlight class="comment"><sp/>*<sp/>@param<sp/><sp/><sp/><sp/><sp/><sp/><sp/>radix<sp/><sp/><sp/>Numerical<sp/>base<sp/>used<sp/>to<sp/>represent<sp/>the<sp/>value<sp/>as<sp/>a<sp/>string,<sp/>between<sp/>2<sp/>and<sp/>16,<sp/>where<sp/>10<sp/>means<sp/>decimal<sp/>base,<sp/>16<sp/>hexadecimal,<sp/>8<sp/>octal,<sp/>and<sp/>2<sp/>binary.</highlight></codeline>
<codeline lineno="84"><highlight class="comment"><sp/>*<sp/>@result<sp/><sp/><sp/><sp/><sp/><sp/>void</highlight></codeline>
<codeline lineno="85"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="std-string_8h_1aad55cf8514198f240cd98c2313da682e" kindref="member" tooltip="Converts an unsigned integer to a string.">utoa</ref>(<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>s[],<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>radix<sp/>);</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="88"><highlight class="comment">/*!</highlight></codeline>
<codeline lineno="89"><highlight class="comment"><sp/>*<sp/>@brief<sp/><sp/><sp/><sp/><sp/><sp/><sp/>Locate<sp/>substring</highlight></codeline>
<codeline lineno="90"><highlight class="comment"><sp/>*<sp/>@details<sp/><sp/><sp/><sp/><sp/>Returns<sp/>a<sp/>pointer<sp/>to<sp/>the<sp/>last<sp/>occurrence<sp/>of<sp/>str2<sp/>in<sp/>str1,<sp/>or<sp/>a</highlight></codeline>
<codeline lineno="91"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>null<sp/>pointer<sp/>if<sp/>str2<sp/>is<sp/>not<sp/>part<sp/>of<sp/>str1.</highlight></codeline>
<codeline lineno="92"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>The<sp/>matching<sp/>process<sp/>does<sp/>not<sp/>include<sp/>the<sp/>terminating</highlight></codeline>
<codeline lineno="93"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>null-characters.</highlight></codeline>
<codeline lineno="94"><highlight class="comment"><sp/>*<sp/>@param<sp/><sp/><sp/><sp/><sp/><sp/><sp/>s1<sp/><sp/><sp/><sp/><sp/><sp/>C<sp/>string<sp/>to<sp/>be<sp/>scanned.</highlight></codeline>
<codeline lineno="95"><highlight class="comment"><sp/>*<sp/>@param<sp/><sp/><sp/><sp/><sp/><sp/><sp/>s2<sp/><sp/><sp/><sp/><sp/><sp/>C<sp/>string<sp/>containing<sp/>the<sp/>sequence<sp/>of<sp/>characters<sp/>to<sp/>match.</highlight></codeline>
<codeline lineno="96"><highlight class="comment"><sp/>*<sp/>@result<sp/><sp/><sp/><sp/><sp/><sp/>A<sp/>pointer<sp/>to<sp/>the<sp/>last<sp/>occurrence<sp/>in<sp/>str1<sp/>of<sp/>any<sp/>of<sp/>the<sp/>entire<sp/>sequence<sp/>of<sp/>characters<sp/>specified<sp/>in<sp/>str2,<sp/>or<sp/>a<sp/>null<sp/>pointer<sp/>if<sp/>the<sp/>sequence<sp/>is<sp/>not<sp/>present<sp/>in<sp/>str1.</highlight></codeline>
<codeline lineno="97"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/><ref refid="std-string_8h_1a4b8ccc37f861c0382ebba4aeed0c697f" kindref="member" tooltip="Locate substring.">strrstr</ref>(<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*s1,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>s2<sp/>);</highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight></codeline>
<codeline lineno="101"><highlight class="preprocessor"></highlight><highlight class="normal">}</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="103"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>_STDC_STD_EXTRAS_STRING_H_<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/Users/macmade/Documents/Brain/GitHub/XSFoundation/source/include/std/std-string.h"/>
  </compounddef>
</doxygen>
