<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.7.4">
  <compounddef id="win32-pthread_8h" kind="file">
    <compoundname>win32-pthread.h</compoundname>
    <includes local="no">stdint.h</includes>
    <includedby refid="win32_8h" local="yes">win32.h</includedby>
    <incdepgraph>
      <node id="6582">
        <label>stdint.h</label>
      </node>
      <node id="6581">
        <label>win32-pthread.h</label>
        <link refid="win32-pthread.h"/>
        <childnode refid="6582" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="6584">
        <label>win32.h</label>
        <link refid="win32_8h"/>
      </node>
      <node id="6583">
        <label>win32-pthread.h</label>
        <link refid="win32-pthread.h"/>
        <childnode refid="6584" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="structpthread__attr__t__struct" prot="public">pthread_attr_t_struct</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="win32-pthread_8h_1a84e55100366a6a8338a2af3b3f279686" prot="public" static="no">
        <name>PTHREAD_MUTEX_INITIALIZER</name>
        <initializer>0</initializer>
        <briefdescription>
<para>Initializes a static mutex with default attributes. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/macmade/Documents/Brain/GitHub/XSFoundation/source/include/win32/win32-pthread.h" line="87" bodyfile="/Users/macmade/Documents/Brain/GitHub/XSFoundation/source/include/win32/win32-pthread.h" bodystart="87" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="win32-pthread_8h_1a95556b5233be24db8bf5e92288294ff4" prot="public" static="no">
        <type>struct <ref refid="structpthread__attr__t__struct" kindref="compound">pthread_attr_t_struct</ref></type>
        <definition>pthread_attr_t</definition>
        <argsstring></argsstring>
        <name>pthread_attr_t</name>
        <briefdescription>
<para>Thread attribute type. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/macmade/Documents/Brain/GitHub/XSFoundation/source/include/win32/win32-pthread.h" line="81" bodyfile="/Users/macmade/Documents/Brain/GitHub/XSFoundation/source/include/win32/win32-pthread.h" bodystart="81" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="win32-pthread_8h_1a8c5c9fd284e1b0f49102db19d0482600" prot="public" static="no">
        <type>HANDLE</type>
        <definition>pthread_mutex_t</definition>
        <argsstring></argsstring>
        <name>pthread_mutex_t</name>
        <briefdescription>
<para>Used to identify a thread mutex. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/macmade/Documents/Brain/GitHub/XSFoundation/source/include/win32/win32-pthread.h" line="58" bodyfile="/Users/macmade/Documents/Brain/GitHub/XSFoundation/source/include/win32/win32-pthread.h" bodystart="58" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="win32-pthread_8h_1ae1ac31d206a66062b91fa575ad337841" prot="public" static="no">
        <type>uint64_t</type>
        <definition>pthread_mutexattr_t</definition>
        <argsstring></argsstring>
        <name>pthread_mutexattr_t</name>
        <briefdescription>
<para>Used to identify a thread mutex attribute. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/macmade/Documents/Brain/GitHub/XSFoundation/source/include/win32/win32-pthread.h" line="64" bodyfile="/Users/macmade/Documents/Brain/GitHub/XSFoundation/source/include/win32/win32-pthread.h" bodystart="64" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="win32-pthread_8h_1a2434c7c5168a3a70220cedbea003cb86" prot="public" static="no">
        <type>uint32_t</type>
        <definition>pthread_t</definition>
        <argsstring></argsstring>
        <name>pthread_t</name>
        <briefdescription>
<para>Used to identify a thread. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/macmade/Documents/Brain/GitHub/XSFoundation/source/include/win32/win32-pthread.h" line="52" bodyfile="/Users/macmade/Documents/Brain/GitHub/XSFoundation/source/include/win32/win32-pthread.h" bodystart="52" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="win32-pthread_8h_1a090bdc13141e76205fab4cb3c5fab0e4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void pthread_exit</definition>
        <argsstring>(void *value_ptr)</argsstring>
        <name>pthread_exit</name>
        <param>
          <type>void *</type>
          <declname>value_ptr</declname>
        </param>
        <briefdescription>
<para>Terminates the calling thread and makes the value value_ptr available to any successful join with the terminating thread. </para>        </briefdescription>
        <detaileddescription>
<para>Any cancellation cleanup handlers that have been pushed and not yet popped are popped in the reverse order that they were pushed and then executed. After all cancellation cleanup handlers have been executed, if the thread has any thread-specific data, appropriate destructor functions will be called in an unspecified order. Thread termination does not release any application visible process resources, including, but not limited to, mutexes and file descriptors, nor does it perform any process level cleanup actions, including, but not limited to, calling any atexit() routines that may exist. An implicit call to <ref refid="win32-pthread_8h_1a090bdc13141e76205fab4cb3c5fab0e4" kindref="member">pthread_exit()</ref> is made when a thread other than the thread in which main() was first invoked returns from the start routine that was used to create it. The function&apos;s return value serves as the thread&apos;s exit status. The behaviour of <ref refid="win32-pthread_8h_1a090bdc13141e76205fab4cb3c5fab0e4" kindref="member">pthread_exit()</ref> is undefined if called from a cancellation cleanup handler or destructor function that was invoked as a result of either an implicit or explicit call to <ref refid="win32-pthread_8h_1a090bdc13141e76205fab4cb3c5fab0e4" kindref="member">pthread_exit()</ref>. After a thread has terminated, the result of access to local (auto) variables of the thread is undefined. Thus, references to local variables of the exiting thread should not be used for the <ref refid="win32-pthread_8h_1a090bdc13141e76205fab4cb3c5fab0e4" kindref="member">pthread_exit()</ref> value_ptr parameter value. The process exits with an exit status of 0 after the last thread has been terminated. The behaviour is as if the implementation called exit() with a zero argument at thread termination time. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>value_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>The thread return value </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>void </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/macmade/Documents/Brain/GitHub/XSFoundation/source/include/win32/win32-pthread.h" line="125"/>
      </memberdef>
      <memberdef kind="function" id="win32-pthread_8h_1a3cf620ff3a40af11d79cf28901dc55e2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int pthread_mutex_destroy</definition>
        <argsstring>(pthread_mutex_t *mutex)</argsstring>
        <name>pthread_mutex_destroy</name>
        <param>
          <type><ref refid="win32-pthread_8h_1a8c5c9fd284e1b0f49102db19d0482600" kindref="member">pthread_mutex_t</ref> *</type>
          <declname>mutex</declname>
        </param>
        <briefdescription>
<para>Destroys the mutex object referenced by mutex. </para>        </briefdescription>
        <detaileddescription>
<para>The mutex object becomes, in effect, uninitialised. An implementation may cause <ref refid="win32-pthread_8h_1a3cf620ff3a40af11d79cf28901dc55e2" kindref="member">pthread_mutex_destroy()</ref> to set the object referenced by mutex to an invalid value. A destroyed mutex object can be re-initialised using <ref refid="win32-pthread_8h_1a7454d249ed94ad5d5e57ba1529d7a7f2" kindref="member">pthread_mutex_init()</ref>; the results of otherwise referencing the object after it has been destroyed are undefined. It is safe to destroy an initialised mutex that is unlocked. Attempting to destroy a locked mutex results in undefined behaviour. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mutex</parametername>
</parameternamelist>
<parameterdescription>
<para>The mutex </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Zero on success, otherwise an error number </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/macmade/Documents/Brain/GitHub/XSFoundation/source/include/win32/win32-pthread.h" line="161"/>
      </memberdef>
      <memberdef kind="function" id="win32-pthread_8h_1a7454d249ed94ad5d5e57ba1529d7a7f2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int pthread_mutex_init</definition>
        <argsstring>(pthread_mutex_t *mutex, const pthread_mutexattr_t *attr)</argsstring>
        <name>pthread_mutex_init</name>
        <param>
          <type><ref refid="win32-pthread_8h_1a8c5c9fd284e1b0f49102db19d0482600" kindref="member">pthread_mutex_t</ref> *</type>
          <declname>mutex</declname>
        </param>
        <param>
          <type>const <ref refid="win32-pthread_8h_1ae1ac31d206a66062b91fa575ad337841" kindref="member">pthread_mutexattr_t</ref> *</type>
          <declname>attr</declname>
        </param>
        <briefdescription>
<para>Initialises the mutex referenced by mutex with attributes specified by attr. </para>        </briefdescription>
        <detaileddescription>
<para>If attr is NULL, the default mutex attributes are used; the effect is the same as passing the address of a default mutex attributes object. Upon successful initialisation, the state of the mutex becomes initialised and unlocked. Attempting to initialise an already initialised mutex results in undefined behaviour. In cases where default mutex attributes are appropriate, the macro PTHREAD_MUTEX_INITIALIZER can be used to initialise mutexes that are statically allocated. The effect is equivalent to dynamic initialisation by a call to <ref refid="win32-pthread_8h_1a7454d249ed94ad5d5e57ba1529d7a7f2" kindref="member">pthread_mutex_init()</ref> with parameter attr specified as NULL, except that no error checks are performed. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mutex</parametername>
</parameternamelist>
<parameterdescription>
<para>The mutex </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>attr</parametername>
</parameternamelist>
<parameterdescription>
<para>The mutex attributes </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Zero on success, otherwise an error number </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/macmade/Documents/Brain/GitHub/XSFoundation/source/include/win32/win32-pthread.h" line="145"/>
      </memberdef>
      <memberdef kind="function" id="win32-pthread_8h_1a12809c44718c21544ceb280dc1a53573" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int pthread_mutex_lock</definition>
        <argsstring>(pthread_mutex_t *mutex)</argsstring>
        <name>pthread_mutex_lock</name>
        <param>
          <type><ref refid="win32-pthread_8h_1a8c5c9fd284e1b0f49102db19d0482600" kindref="member">pthread_mutex_t</ref> *</type>
          <declname>mutex</declname>
        </param>
        <briefdescription>
<para>Locks a mutex. </para>        </briefdescription>
        <detaileddescription>
<para>If the mutex is already locked, the calling thread blocks until the mutex becomes available. This operation returns with the mutex object referenced by mutex in the locked state with the calling thread as its owner. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mutex</parametername>
</parameternamelist>
<parameterdescription>
<para>The mutex </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Zero on success, otherwise an error number </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/macmade/Documents/Brain/GitHub/XSFoundation/source/include/win32/win32-pthread.h" line="172"/>
      </memberdef>
      <memberdef kind="function" id="win32-pthread_8h_1a27da386211db1a7e9a3b2a0db4d22144" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int pthread_mutex_trylock</definition>
        <argsstring>(pthread_mutex_t *mutex)</argsstring>
        <name>pthread_mutex_trylock</name>
        <param>
          <type><ref refid="win32-pthread_8h_1a8c5c9fd284e1b0f49102db19d0482600" kindref="member">pthread_mutex_t</ref> *</type>
          <declname>mutex</declname>
        </param>
        <briefdescription>
<para>Tries to lock a mutex. </para>        </briefdescription>
        <detaileddescription>
<para>Identical to <ref refid="win32-pthread_8h_1a12809c44718c21544ceb280dc1a53573" kindref="member">pthread_mutex_lock()</ref> except that if the mutex object referenced by mutex is currently locked (by any thread, including the current thread), the call returns immediately. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mutex</parametername>
</parameternamelist>
<parameterdescription>
<para>The mutex </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Zero on success, otherwise an error number </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/macmade/Documents/Brain/GitHub/XSFoundation/source/include/win32/win32-pthread.h" line="195"/>
      </memberdef>
      <memberdef kind="function" id="win32-pthread_8h_1a96184290ffb60e04c53a52869cf960a2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int pthread_mutex_unlock</definition>
        <argsstring>(pthread_mutex_t *mutex)</argsstring>
        <name>pthread_mutex_unlock</name>
        <param>
          <type><ref refid="win32-pthread_8h_1a8c5c9fd284e1b0f49102db19d0482600" kindref="member">pthread_mutex_t</ref> *</type>
          <declname>mutex</declname>
        </param>
        <briefdescription>
<para>Releases the mutex object referenced by mutex. </para>        </briefdescription>
        <detaileddescription>
<para>The manner in which a mutex is released is dependent upon the mutex&apos;s type attribute. If there are threads blocked on the mutex object referenced by mutex when <ref refid="win32-pthread_8h_1a96184290ffb60e04c53a52869cf960a2" kindref="member">pthread_mutex_unlock()</ref> is called, resulting in the mutex becoming available, the scheduling policy is used to determine which thread shall acquire the mutex. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mutex</parametername>
</parameternamelist>
<parameterdescription>
<para>The mutex </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Zero on success, otherwise an error number </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/macmade/Documents/Brain/GitHub/XSFoundation/source/include/win32/win32-pthread.h" line="185"/>
      </memberdef>
      <memberdef kind="function" id="win32-pthread_8h_1a4c4f5f3b4f8f45d9d897847d53b11aaa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="win32-pthread_8h_1a2434c7c5168a3a70220cedbea003cb86" kindref="member">pthread_t</ref></type>
        <definition>pthread_t pthread_self</definition>
        <argsstring>(void)</argsstring>
        <name>pthread_self</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Returns the thread ID of the calling thread. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The thread ID </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/macmade/Documents/Brain/GitHub/XSFoundation/source/include/win32/win32-pthread.h" line="93"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>POSIX thread functions for Windows. </para>    </briefdescription>
    <detaileddescription>
<para><simplesect kind="author"><para>Jean-David Gadina &lt;<ulink url="mailto:macmade@eosgarden.com">macmade@eosgarden.com</ulink>&gt; </para></simplesect>
</para>    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*******************************************************************************</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2011,<sp/>Jean-David<sp/>Gadina<sp/>&lt;macmade@eosgarden.com&gt;</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>Distributed<sp/>under<sp/>the<sp/>Boost<sp/>Software<sp/>License,<sp/>Version<sp/>1.0.</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>Boost<sp/>Software<sp/>License<sp/>-<sp/>Version<sp/>1.0<sp/>-<sp/>August<sp/>17th,<sp/>2003</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>Permission<sp/>is<sp/>hereby<sp/>granted,<sp/>free<sp/>of<sp/>charge,<sp/>to<sp/>any<sp/>person<sp/>or<sp/>organization</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/>obtaining<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>software<sp/>and<sp/>accompanying<sp/>documentation<sp/>covered<sp/>by</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*<sp/>this<sp/>license<sp/>(the<sp/>&quot;Software&quot;)<sp/>to<sp/>use,<sp/>reproduce,<sp/>display,<sp/>distribute,</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/>execute,<sp/>and<sp/>transmit<sp/>the<sp/>Software,<sp/>and<sp/>to<sp/>prepare<sp/>derivative<sp/>works<sp/>of<sp/>the</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/>Software,<sp/>and<sp/>to<sp/>permit<sp/>third-parties<sp/>to<sp/>whom<sp/>the<sp/>Software<sp/>is<sp/>furnished<sp/>to</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/>do<sp/>so,<sp/>all<sp/>subject<sp/>to<sp/>the<sp/>following:</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/>The<sp/>copyright<sp/>notices<sp/>in<sp/>the<sp/>Software<sp/>and<sp/>this<sp/>entire<sp/>statement,<sp/>including</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*<sp/>the<sp/>above<sp/>license<sp/>grant,<sp/>this<sp/>restriction<sp/>and<sp/>the<sp/>following<sp/>disclaimer,</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*<sp/>must<sp/>be<sp/>included<sp/>in<sp/>all<sp/>copies<sp/>of<sp/>the<sp/>Software,<sp/>in<sp/>whole<sp/>or<sp/>in<sp/>part,<sp/>and</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/>all<sp/>derivative<sp/>works<sp/>of<sp/>the<sp/>Software,<sp/>unless<sp/>such<sp/>copies<sp/>or<sp/>derivative</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/>works<sp/>are<sp/>solely<sp/>in<sp/>the<sp/>form<sp/>of<sp/>machine-executable<sp/>object<sp/>code<sp/>generated<sp/>by</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*<sp/>a<sp/>source<sp/>language<sp/>processor.</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*<sp/>THE<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>&quot;AS<sp/>IS&quot;,<sp/>WITHOUT<sp/>WARRANTY<sp/>OF<sp/>ANY<sp/>KIND,<sp/>EXPRESS<sp/>OR</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*<sp/>IMPLIED,<sp/>INCLUDING<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO<sp/>THE<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY,</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>*<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE,<sp/>TITLE<sp/>AND<sp/>NON-INFRINGEMENT.<sp/>IN<sp/>NO<sp/>EVENT</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/>*<sp/>SHALL<sp/>THE<sp/>COPYRIGHT<sp/>HOLDERS<sp/>OR<sp/>ANYONE<sp/>DISTRIBUTING<sp/>THE<sp/>SOFTWARE<sp/>BE<sp/>LIABLE</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/>*<sp/>FOR<sp/>ANY<sp/>DAMAGES<sp/>OR<sp/>OTHER<sp/>LIABILITY,<sp/>WHETHER<sp/>IN<sp/>CONTRACT,<sp/>TORT<sp/>OR<sp/>OTHERWISE,</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/>*<sp/>ARISING<sp/>FROM,<sp/>OUT<sp/>OF<sp/>OR<sp/>IN<sp/>CONNECTION<sp/>WITH<sp/>THE<sp/>SOFTWARE<sp/>OR<sp/>THE<sp/>USE<sp/>OR<sp/>OTHER</highlight></codeline>
<codeline lineno="27"><highlight class="comment"><sp/>*<sp/>DEALINGS<sp/>IN<sp/>THE<sp/>SOFTWARE.</highlight></codeline>
<codeline lineno="28"><highlight class="comment"><sp/>******************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>$Id$<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="32"><highlight class="comment">/*!</highlight></codeline>
<codeline lineno="33"><highlight class="comment"><sp/>*<sp/>@file<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>win32-pthread.h</highlight></codeline>
<codeline lineno="34"><highlight class="comment"><sp/>*<sp/>@brief<sp/><sp/><sp/><sp/><sp/><sp/><sp/>POSIX<sp/>thread<sp/>functions<sp/>for<sp/>Windows</highlight></codeline>
<codeline lineno="35"><highlight class="comment"><sp/>*<sp/>@author<sp/><sp/><sp/><sp/><sp/><sp/>Jean-David<sp/>Gadina<sp/>&lt;macmade@eosgarden.com&gt;</highlight></codeline>
<codeline lineno="36"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>_XS_WIN32_PTHREADS_H_</highlight></codeline>
<codeline lineno="39"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>_XS_WIN32_PTHREADS_H_</highlight></codeline>
<codeline lineno="40"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#pragma<sp/>once</highlight></codeline>
<codeline lineno="41"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight></codeline>
<codeline lineno="43"><highlight class="preprocessor"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="45"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdint.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="48"><highlight class="comment">/*!</highlight></codeline>
<codeline lineno="49"><highlight class="comment"><sp/>*<sp/>@typedef<sp/><sp/><sp/><sp/><sp/>pthread_t</highlight></codeline>
<codeline lineno="50"><highlight class="comment"><sp/>*<sp/>@brief<sp/><sp/><sp/><sp/><sp/><sp/><sp/>Used<sp/>to<sp/>identify<sp/>a<sp/>thread</highlight></codeline>
<codeline lineno="51"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52" refid="win32-pthread_8h_1a2434c7c5168a3a70220cedbea003cb86" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>uint32_t<sp/><ref refid="win32-pthread_8h_1a2434c7c5168a3a70220cedbea003cb86" kindref="member" tooltip="Used to identify a thread.">pthread_t</ref>;</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="54"><highlight class="comment">/*!</highlight></codeline>
<codeline lineno="55"><highlight class="comment"><sp/>*<sp/>@typedef<sp/><sp/><sp/><sp/><sp/>pthread_mutex_t</highlight></codeline>
<codeline lineno="56"><highlight class="comment"><sp/>*<sp/>@brief<sp/><sp/><sp/><sp/><sp/><sp/><sp/>Used<sp/>to<sp/>identify<sp/>a<sp/>thread<sp/>mutex</highlight></codeline>
<codeline lineno="57"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58" refid="win32-pthread_8h_1a8c5c9fd284e1b0f49102db19d0482600" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>HANDLE<sp/><sp/><sp/><ref refid="win32-pthread_8h_1a8c5c9fd284e1b0f49102db19d0482600" kindref="member" tooltip="Used to identify a thread mutex.">pthread_mutex_t</ref>;</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="60"><highlight class="comment">/*!</highlight></codeline>
<codeline lineno="61"><highlight class="comment"><sp/>*<sp/>@typedef<sp/><sp/><sp/><sp/><sp/>pthread_mutexattr_t</highlight></codeline>
<codeline lineno="62"><highlight class="comment"><sp/>*<sp/>@brief<sp/><sp/><sp/><sp/><sp/><sp/><sp/>Used<sp/>to<sp/>identify<sp/>a<sp/>thread<sp/>mutex<sp/>attribute</highlight></codeline>
<codeline lineno="63"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64" refid="win32-pthread_8h_1ae1ac31d206a66062b91fa575ad337841" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>uint64_t<sp/><ref refid="win32-pthread_8h_1ae1ac31d206a66062b91fa575ad337841" kindref="member" tooltip="Used to identify a thread mutex attribute.">pthread_mutexattr_t</ref>;</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="66"><highlight class="comment">/*!</highlight></codeline>
<codeline lineno="67"><highlight class="comment"><sp/>*<sp/>@struct<sp/><sp/><sp/><sp/><sp/><sp/>pthread_attr_t_struct</highlight></codeline>
<codeline lineno="68"><highlight class="comment"><sp/>*<sp/>@brief<sp/><sp/><sp/><sp/><sp/><sp/><sp/>Thread<sp/>attribute<sp/>structure</highlight></codeline>
<codeline lineno="69"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70" refid="structpthread__attr__t__struct" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpthread__attr__t__struct" kindref="compound" tooltip="Thread attribute structure.">pthread_attr_t_struct</ref></highlight></codeline>
<codeline lineno="71"><highlight class="normal">{</highlight></codeline>
<codeline lineno="72" refid="structpthread__attr__t__struct_1aa8f39b093393058d7a41b31e2dc5e190" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structpthread__attr__t__struct_1aa8f39b093393058d7a41b31e2dc5e190" kindref="member">detachstate</ref>;<sp/><sp/><sp/></highlight><highlight class="comment">/*!<sp/>Detached<sp/>state<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73" refid="structpthread__attr__t__struct_1ac21047bc5aeafe4e493e937200bc86ff" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/>*<sp/><ref refid="structpthread__attr__t__struct_1ac21047bc5aeafe4e493e937200bc86ff" kindref="member">stackaddr</ref>;<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*!<sp/>Stack<sp/>address<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74" refid="structpthread__attr__t__struct_1a3e01b1799a5f46cf7453320354d5cccf" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><sp/><sp/><ref refid="structpthread__attr__t__struct_1a3e01b1799a5f46cf7453320354d5cccf" kindref="member">stacksize</ref>;<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*!<sp/>Stack<sp/>size<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal">};</highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="77"><highlight class="comment">/*!</highlight></codeline>
<codeline lineno="78"><highlight class="comment"><sp/>*<sp/>@typedef<sp/><sp/><sp/><sp/><sp/>pthread_attr_t</highlight></codeline>
<codeline lineno="79"><highlight class="comment"><sp/>*<sp/>@brief<sp/><sp/><sp/><sp/><sp/><sp/><sp/>Thread<sp/>attribute<sp/>type</highlight></codeline>
<codeline lineno="80"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81" refid="win32-pthread_8h_1a95556b5233be24db8bf5e92288294ff4" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpthread__attr__t__struct" kindref="compound" tooltip="Thread attribute structure.">pthread_attr_t_struct</ref><sp/><ref refid="structpthread__attr__t__struct" kindref="compound" tooltip="Thread attribute structure.">pthread_attr_t</ref>;</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="83"><highlight class="comment">/*!</highlight></codeline>
<codeline lineno="84"><highlight class="comment"><sp/>*<sp/>@def<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PTHREAD_MUTEX_INITIALIZER</highlight></codeline>
<codeline lineno="85"><highlight class="comment"><sp/>*<sp/>@brief<sp/><sp/><sp/><sp/><sp/><sp/><sp/>Initializes<sp/>a<sp/>static<sp/>mutex<sp/>with<sp/>default<sp/>attributes</highlight></codeline>
<codeline lineno="86"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87" refid="win32-pthread_8h_1a84e55100366a6a8338a2af3b3f279686" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PTHREAD_MUTEX_INITIALIZER<sp/><sp/><sp/>0</highlight></codeline>
<codeline lineno="88"><highlight class="preprocessor"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="89"><highlight class="comment">/*!</highlight></codeline>
<codeline lineno="90"><highlight class="comment"><sp/>*<sp/>@brief<sp/><sp/><sp/><sp/><sp/><sp/><sp/>Returns<sp/>the<sp/>thread<sp/>ID<sp/>of<sp/>the<sp/>calling<sp/>thread</highlight></codeline>
<codeline lineno="91"><highlight class="comment"><sp/>*<sp/>@result<sp/><sp/><sp/><sp/><sp/><sp/>The<sp/>thread<sp/>ID</highlight></codeline>
<codeline lineno="92"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal">pthread_t<sp/><ref refid="win32-pthread_8h_1a4c4f5f3b4f8f45d9d897847d53b11aaa" kindref="member" tooltip="Returns the thread ID of the calling thread.">pthread_self</ref>(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="95"><highlight class="comment">/*!</highlight></codeline>
<codeline lineno="96"><highlight class="comment"><sp/>*<sp/>@brief<sp/><sp/><sp/><sp/><sp/><sp/><sp/>Terminates<sp/>the<sp/>calling<sp/>thread<sp/>and<sp/>makes<sp/>the<sp/>value<sp/>value_ptr<sp/>available<sp/>to<sp/>any<sp/>successful<sp/>join<sp/>with<sp/>the<sp/>terminating<sp/>thread</highlight></codeline>
<codeline lineno="97"><highlight class="comment"><sp/>*<sp/>@details<sp/><sp/><sp/><sp/><sp/>Any<sp/>cancellation<sp/>cleanup<sp/>handlers<sp/>that<sp/>have<sp/>been<sp/>pushed<sp/>and<sp/>not</highlight></codeline>
<codeline lineno="98"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>yet<sp/>popped<sp/>are<sp/>popped<sp/>in<sp/>the<sp/>reverse<sp/>order<sp/>that<sp/>they<sp/>were<sp/>pushed</highlight></codeline>
<codeline lineno="99"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>and<sp/>then<sp/>executed.<sp/>After<sp/>all<sp/>cancellation<sp/>cleanup<sp/>handlers<sp/>have</highlight></codeline>
<codeline lineno="100"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>been<sp/>executed,<sp/>if<sp/>the<sp/>thread<sp/>has<sp/>any<sp/>thread-specific<sp/>data,</highlight></codeline>
<codeline lineno="101"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>appropriate<sp/>destructor<sp/>functions<sp/>will<sp/>be<sp/>called<sp/>in<sp/>an</highlight></codeline>
<codeline lineno="102"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>unspecified<sp/>order.<sp/>Thread<sp/>termination<sp/>does<sp/>not<sp/>release<sp/>any</highlight></codeline>
<codeline lineno="103"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>application<sp/>visible<sp/>process<sp/>resources,<sp/>including,<sp/>but<sp/>not</highlight></codeline>
<codeline lineno="104"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>limited<sp/>to,<sp/>mutexes<sp/>and<sp/>file<sp/>descriptors,<sp/>nor<sp/>does<sp/>it<sp/>perform</highlight></codeline>
<codeline lineno="105"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>any<sp/>process<sp/>level<sp/>cleanup<sp/>actions,<sp/>including,<sp/>but<sp/>not<sp/>limited</highlight></codeline>
<codeline lineno="106"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>to,<sp/>calling<sp/>any<sp/>atexit()<sp/>routines<sp/>that<sp/>may<sp/>exist.</highlight></codeline>
<codeline lineno="107"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>An<sp/>implicit<sp/>call<sp/>to<sp/>pthread_exit()<sp/>is<sp/>made<sp/>when<sp/>a<sp/>thread<sp/>other</highlight></codeline>
<codeline lineno="108"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>than<sp/>the<sp/>thread<sp/>in<sp/>which<sp/>main()<sp/>was<sp/>first<sp/>invoked<sp/>returns<sp/>from</highlight></codeline>
<codeline lineno="109"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>the<sp/>start<sp/>routine<sp/>that<sp/>was<sp/>used<sp/>to<sp/>create<sp/>it.<sp/>The<sp/>function&apos;s</highlight></codeline>
<codeline lineno="110"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>value<sp/>serves<sp/>as<sp/>the<sp/>thread&apos;s<sp/>exit<sp/>status.</highlight></codeline>
<codeline lineno="111"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>The<sp/>behaviour<sp/>of<sp/>pthread_exit()<sp/>is<sp/>undefined<sp/>if<sp/>called<sp/>from<sp/>a</highlight></codeline>
<codeline lineno="112"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cancellation<sp/>cleanup<sp/>handler<sp/>or<sp/>destructor<sp/>function<sp/>that<sp/>was</highlight></codeline>
<codeline lineno="113"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>invoked<sp/>as<sp/>a<sp/>result<sp/>of<sp/>either<sp/>an<sp/>implicit<sp/>or<sp/>explicit<sp/>call<sp/>to</highlight></codeline>
<codeline lineno="114"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pthread_exit().</highlight></codeline>
<codeline lineno="115"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>After<sp/>a<sp/>thread<sp/>has<sp/>terminated,<sp/>the<sp/>result<sp/>of<sp/>access<sp/>to<sp/>local</highlight></codeline>
<codeline lineno="116"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(auto)<sp/>variables<sp/>of<sp/>the<sp/>thread<sp/>is<sp/>undefined.<sp/>Thus,<sp/>references<sp/>to</highlight></codeline>
<codeline lineno="117"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>local<sp/>variables<sp/>of<sp/>the<sp/>exiting<sp/>thread<sp/>should<sp/>not<sp/>be<sp/>used<sp/>for<sp/>the</highlight></codeline>
<codeline lineno="118"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pthread_exit()<sp/>value_ptr<sp/>parameter<sp/>value.</highlight></codeline>
<codeline lineno="119"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>The<sp/>process<sp/>exits<sp/>with<sp/>an<sp/>exit<sp/>status<sp/>of<sp/>0<sp/>after<sp/>the<sp/>last<sp/>thread</highlight></codeline>
<codeline lineno="120"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>has<sp/>been<sp/>terminated.<sp/>The<sp/>behaviour<sp/>is<sp/>as<sp/>if<sp/>the<sp/>implementation</highlight></codeline>
<codeline lineno="121"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>called<sp/>exit()<sp/>with<sp/>a<sp/>zero<sp/>argument<sp/>at<sp/>thread<sp/>termination<sp/>time.</highlight></codeline>
<codeline lineno="122"><highlight class="comment"><sp/>*<sp/>@param<sp/><sp/><sp/><sp/><sp/><sp/><sp/>value_ptr<sp/><sp/><sp/>The<sp/>thread<sp/>return<sp/>value</highlight></codeline>
<codeline lineno="123"><highlight class="comment"><sp/>*<sp/>@result<sp/><sp/><sp/><sp/><sp/><sp/>void</highlight></codeline>
<codeline lineno="124"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="win32-pthread_8h_1a090bdc13141e76205fab4cb3c5fab0e4" kindref="member" tooltip="Terminates the calling thread and makes the value value_ptr available to any successful join with the...">pthread_exit</ref>(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/>value_ptr<sp/>);</highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="127"><highlight class="comment">/*!</highlight></codeline>
<codeline lineno="128"><highlight class="comment"><sp/>*<sp/>@brief<sp/><sp/><sp/><sp/><sp/><sp/><sp/>Initialises<sp/>the<sp/>mutex<sp/>referenced<sp/>by<sp/>mutex<sp/>with<sp/>attributes<sp/>specified<sp/>by<sp/>attr</highlight></codeline>
<codeline lineno="129"><highlight class="comment"><sp/>*<sp/>@details<sp/><sp/><sp/><sp/><sp/>If<sp/>attr<sp/>is<sp/>NULL,<sp/>the<sp/>default<sp/>mutex<sp/>attributes<sp/>are<sp/>used;</highlight></codeline>
<codeline lineno="130"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>the<sp/>effect<sp/>is<sp/>the<sp/>same<sp/>as<sp/>passing<sp/>the<sp/>address<sp/>of<sp/>a<sp/>default<sp/>mutex</highlight></codeline>
<codeline lineno="131"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>attributes<sp/>object.<sp/>Upon<sp/>successful<sp/>initialisation,<sp/>the<sp/>state<sp/>of</highlight></codeline>
<codeline lineno="132"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>the<sp/>mutex<sp/>becomes<sp/>initialised<sp/>and<sp/>unlocked.</highlight></codeline>
<codeline lineno="133"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Attempting<sp/>to<sp/>initialise<sp/>an<sp/>already<sp/>initialised<sp/>mutex<sp/>results<sp/>in</highlight></codeline>
<codeline lineno="134"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>undefined<sp/>behaviour.</highlight></codeline>
<codeline lineno="135"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>In<sp/>cases<sp/>where<sp/>default<sp/>mutex<sp/>attributes<sp/>are<sp/>appropriate,<sp/>the</highlight></codeline>
<codeline lineno="136"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>macro<sp/>PTHREAD_MUTEX_INITIALIZER<sp/>can<sp/>be<sp/>used<sp/>to<sp/>initialise</highlight></codeline>
<codeline lineno="137"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mutexes<sp/>that<sp/>are<sp/>statically<sp/>allocated.<sp/>The<sp/>effect<sp/>is<sp/>equivalent</highlight></codeline>
<codeline lineno="138"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>to<sp/>dynamic<sp/>initialisation<sp/>by<sp/>a<sp/>call<sp/>to<sp/>pthread_mutex_init()<sp/>with</highlight></codeline>
<codeline lineno="139"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parameter<sp/>attr<sp/>specified<sp/>as<sp/>NULL,<sp/>except<sp/>that<sp/>no<sp/>error<sp/>checks</highlight></codeline>
<codeline lineno="140"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>are<sp/>performed.</highlight></codeline>
<codeline lineno="141"><highlight class="comment"><sp/>*<sp/>@param<sp/><sp/><sp/><sp/><sp/><sp/><sp/>mutex<sp/><sp/><sp/>The<sp/>mutex</highlight></codeline>
<codeline lineno="142"><highlight class="comment"><sp/>*<sp/>@param<sp/><sp/><sp/><sp/><sp/><sp/><sp/>attr<sp/><sp/><sp/><sp/>The<sp/>mutex<sp/>attributes</highlight></codeline>
<codeline lineno="143"><highlight class="comment"><sp/>*<sp/>@result<sp/><sp/><sp/><sp/><sp/><sp/>Zero<sp/>on<sp/>success,<sp/>otherwise<sp/>an<sp/>error<sp/>number</highlight></codeline>
<codeline lineno="144"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="win32-pthread_8h_1a7454d249ed94ad5d5e57ba1529d7a7f2" kindref="member" tooltip="Initialises the mutex referenced by mutex with attributes specified by attr.">pthread_mutex_init</ref>(<sp/>pthread_mutex_t<sp/>*<sp/>mutex,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>pthread_mutexattr_t<sp/>*<sp/>attr<sp/>);</highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="147"><highlight class="comment">/*!</highlight></codeline>
<codeline lineno="148"><highlight class="comment"><sp/>*<sp/>@brief<sp/><sp/><sp/><sp/><sp/><sp/><sp/>Destroys<sp/>the<sp/>mutex<sp/>object<sp/>referenced<sp/>by<sp/>mutex</highlight></codeline>
<codeline lineno="149"><highlight class="comment"><sp/>*<sp/>@details<sp/><sp/><sp/><sp/><sp/>The<sp/>mutex<sp/>object<sp/>becomes,<sp/>in<sp/>effect,<sp/>uninitialised.<sp/>An</highlight></codeline>
<codeline lineno="150"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>implementation<sp/>may<sp/>cause<sp/>pthread_mutex_destroy()<sp/>to<sp/>set<sp/>the</highlight></codeline>
<codeline lineno="151"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>object<sp/>referenced<sp/>by<sp/>mutex<sp/>to<sp/>an<sp/>invalid<sp/>value.</highlight></codeline>
<codeline lineno="152"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>A<sp/>destroyed<sp/>mutex<sp/>object<sp/>can<sp/>be<sp/>re-initialised<sp/>using</highlight></codeline>
<codeline lineno="153"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pthread_mutex_init();<sp/>the<sp/>results<sp/>of<sp/>otherwise<sp/>referencing</highlight></codeline>
<codeline lineno="154"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>the<sp/>object<sp/>after<sp/>it<sp/>has<sp/>been<sp/>destroyed<sp/>are<sp/>undefined.</highlight></codeline>
<codeline lineno="155"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>It<sp/>is<sp/>safe<sp/>to<sp/>destroy<sp/>an<sp/>initialised<sp/>mutex<sp/>that<sp/>is<sp/>unlocked.</highlight></codeline>
<codeline lineno="156"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Attempting<sp/>to<sp/>destroy<sp/>a<sp/>locked<sp/>mutex<sp/>results<sp/>in<sp/>undefined</highlight></codeline>
<codeline lineno="157"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>behaviour.</highlight></codeline>
<codeline lineno="158"><highlight class="comment"><sp/>*<sp/>@param<sp/><sp/><sp/><sp/><sp/><sp/><sp/>mutex<sp/><sp/><sp/>The<sp/>mutex</highlight></codeline>
<codeline lineno="159"><highlight class="comment"><sp/>*<sp/>@result<sp/><sp/><sp/><sp/><sp/><sp/>Zero<sp/>on<sp/>success,<sp/>otherwise<sp/>an<sp/>error<sp/>number</highlight></codeline>
<codeline lineno="160"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="win32-pthread_8h_1a3cf620ff3a40af11d79cf28901dc55e2" kindref="member" tooltip="Destroys the mutex object referenced by mutex.">pthread_mutex_destroy</ref>(<sp/>pthread_mutex_t<sp/>*<sp/>mutex<sp/>);</highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="163"><highlight class="comment">/*!</highlight></codeline>
<codeline lineno="164"><highlight class="comment"><sp/>*<sp/>@brief<sp/><sp/><sp/><sp/><sp/><sp/><sp/>Locks<sp/>a<sp/>mutex</highlight></codeline>
<codeline lineno="165"><highlight class="comment"><sp/>*<sp/>@details<sp/><sp/><sp/><sp/><sp/>If<sp/>the<sp/>mutex<sp/>is<sp/>already<sp/>locked,<sp/>the<sp/>calling<sp/>thread<sp/>blocks<sp/>until</highlight></codeline>
<codeline lineno="166"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>the<sp/>mutex<sp/>becomes<sp/>available.<sp/>This<sp/>operation<sp/>returns<sp/>with<sp/>the</highlight></codeline>
<codeline lineno="167"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mutex<sp/>object<sp/>referenced<sp/>by<sp/>mutex<sp/>in<sp/>the<sp/>locked<sp/>state<sp/>with<sp/>the</highlight></codeline>
<codeline lineno="168"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>calling<sp/>thread<sp/>as<sp/>its<sp/>owner.</highlight></codeline>
<codeline lineno="169"><highlight class="comment"><sp/>*<sp/>@param<sp/><sp/><sp/><sp/><sp/><sp/><sp/>mutex<sp/><sp/><sp/>The<sp/>mutex</highlight></codeline>
<codeline lineno="170"><highlight class="comment"><sp/>*<sp/>@result<sp/><sp/><sp/><sp/><sp/><sp/>Zero<sp/>on<sp/>success,<sp/>otherwise<sp/>an<sp/>error<sp/>number</highlight></codeline>
<codeline lineno="171"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="win32-pthread_8h_1a12809c44718c21544ceb280dc1a53573" kindref="member" tooltip="Locks a mutex.">pthread_mutex_lock</ref>(<sp/>pthread_mutex_t<sp/>*<sp/>mutex<sp/>);</highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="174"><highlight class="comment">/*!</highlight></codeline>
<codeline lineno="175"><highlight class="comment"><sp/>*<sp/>@brief<sp/><sp/><sp/><sp/><sp/><sp/><sp/>Releases<sp/>the<sp/>mutex<sp/>object<sp/>referenced<sp/>by<sp/>mutex</highlight></codeline>
<codeline lineno="176"><highlight class="comment"><sp/>*<sp/>@details<sp/><sp/><sp/><sp/><sp/>The<sp/>manner<sp/>in<sp/>which<sp/>a<sp/>mutex<sp/>is<sp/>released<sp/>is<sp/>dependent<sp/>upon<sp/>the</highlight></codeline>
<codeline lineno="177"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mutex&apos;s<sp/>type<sp/>attribute.<sp/>If<sp/>there<sp/>are<sp/>threads<sp/>blocked<sp/>on<sp/>the</highlight></codeline>
<codeline lineno="178"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mutex<sp/>object<sp/>referenced<sp/>by<sp/>mutex<sp/>when<sp/>pthread_mutex_unlock()<sp/>is</highlight></codeline>
<codeline lineno="179"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>called,<sp/>resulting<sp/>in<sp/>the<sp/>mutex<sp/>becoming<sp/>available,<sp/>the</highlight></codeline>
<codeline lineno="180"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>scheduling<sp/>policy<sp/>is<sp/>used<sp/>to<sp/>determine<sp/>which<sp/>thread<sp/>shall</highlight></codeline>
<codeline lineno="181"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>acquire<sp/>the<sp/>mutex.</highlight></codeline>
<codeline lineno="182"><highlight class="comment"><sp/>*<sp/>@param<sp/><sp/><sp/><sp/><sp/><sp/><sp/>mutex<sp/><sp/><sp/>The<sp/>mutex</highlight></codeline>
<codeline lineno="183"><highlight class="comment"><sp/>*<sp/>@result<sp/><sp/><sp/><sp/><sp/><sp/>Zero<sp/>on<sp/>success,<sp/>otherwise<sp/>an<sp/>error<sp/>number</highlight></codeline>
<codeline lineno="184"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="win32-pthread_8h_1a96184290ffb60e04c53a52869cf960a2" kindref="member" tooltip="Releases the mutex object referenced by mutex.">pthread_mutex_unlock</ref>(<sp/>pthread_mutex_t<sp/>*<sp/>mutex<sp/>);</highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="187"><highlight class="comment">/*!</highlight></codeline>
<codeline lineno="188"><highlight class="comment"><sp/>*<sp/>@brief<sp/><sp/><sp/><sp/><sp/><sp/><sp/>Tries<sp/>to<sp/>lock<sp/>a<sp/>mutex</highlight></codeline>
<codeline lineno="189"><highlight class="comment"><sp/>*<sp/>@details<sp/><sp/><sp/><sp/><sp/>Identical<sp/>to<sp/>pthread_mutex_lock()<sp/>except<sp/>that<sp/>if<sp/>the<sp/>mutex</highlight></codeline>
<codeline lineno="190"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>object<sp/>referenced<sp/>by<sp/>mutex<sp/>is<sp/>currently<sp/>locked<sp/>(by<sp/>any<sp/>thread,</highlight></codeline>
<codeline lineno="191"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>including<sp/>the<sp/>current<sp/>thread),<sp/>the<sp/>call<sp/>returns<sp/>immediately.</highlight></codeline>
<codeline lineno="192"><highlight class="comment"><sp/>*<sp/>@param<sp/><sp/><sp/><sp/><sp/><sp/><sp/>mutex<sp/><sp/><sp/>The<sp/>mutex</highlight></codeline>
<codeline lineno="193"><highlight class="comment"><sp/>*<sp/>@result<sp/><sp/><sp/><sp/><sp/><sp/>Zero<sp/>on<sp/>success,<sp/>otherwise<sp/>an<sp/>error<sp/>number</highlight></codeline>
<codeline lineno="194"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="win32-pthread_8h_1a27da386211db1a7e9a3b2a0db4d22144" kindref="member" tooltip="Tries to lock a mutex.">pthread_mutex_trylock</ref>(<sp/>pthread_mutex_t<sp/>*<sp/>mutex<sp/>);</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight></codeline>
<codeline lineno="198"><highlight class="preprocessor"></highlight><highlight class="normal">}</highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="200"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>_XS_WIN32_PTHREADS_H_<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/Users/macmade/Documents/Brain/GitHub/XSFoundation/source/include/win32/win32-pthread.h"/>
  </compounddef>
</doxygen>
