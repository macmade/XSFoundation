.TH "XSMemory.h" 3 "Sun Apr 24 2011" "Version 1.2.2-0" "XSFoundation" \" -*- nroff -*-
.ad l
.nh
.SH NAME
XSMemory.h \- 
.PP
Memory management functions and XSAutoreleasePool class functions.  

.SH SYNOPSIS
.br
.PP
\fC#include 'XSMacros.h'\fP
.br
\fC#include 'XSTypes.h'\fP
.br

.SS "Defines"

.in +1c
.ti -1c
.RI "#define \fBXSAlloc\fP(...)   XSAllocWithInfos( __FILE__, __LINE__, __func__, __VA_ARGS__ )"
.br
.RI "\fIAllocates memory descriton Returned pointer will have to be passed to the XSRelease function in order to be free. \fP"
.ti -1c
.RI "#define \fBXSAutoAlloc\fP(size)   XSAutoAllocWithInfos( __FILE__, __LINE__, __func__, size )"
.br
.RI "\fIAllocates auto-releasable memory. \fP"
.ti -1c
.RI "#define \fBXSCopy\fP(ptr)   XSCopyWithInfos( __FILE__, __LINE__, __func__, ptr )"
.br
.RI "\fICopies a pointer. \fP"
.ti -1c
.RI "#define \fBXSRealloc\fP(ptr, size)   XSReallocWithInfos( __FILE__, __LINE__, __func__, ptr, size )"
.br
.RI "\fIReallocates memory. \fP"
.ti -1c
.RI "#define \fBXSRelease\fP(ptr)   XSReleaseWithInfos( __FILE__, __LINE__, __func__, ptr )"
.br
.RI "\fIReleases a memory pointer. \fP"
.in -1c
.SS "Typedefs"

.in +1c
.ti -1c
.RI "typedef struct \fB__XSAutoreleasePool_Struct\fP * \fBXSAutoreleasePool\fP"
.br
.RI "\fIOpaque type for the XSAutoreleasePool objects. \fP"
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "void * \fBXSAllocWithInfos\fP (const char *file, int line, const char *func, size_t size,...)"
.br
.RI "\fIAllocates memory description This function is used for internal memory debugging. Do not call it directly. Use XSAlloc instead. \fP"
.ti -1c
.RI "void * \fBXSAutoAllocWithInfos\fP (const char *file, int line, const char *func, size_t size)"
.br
.RI "\fIAllocates auto-releasable memory description This function is used for internal memory debugging. Do not call it directly. Use XSAutoAlloc instead. \fP"
.ti -1c
.RI "void * \fBXSAutorelease\fP (void *ptr)"
.br
.RI "\fIMarks a memory pointer as auto-releasable. \fP"
.ti -1c
.RI "\fBXSObject\fP \fBXSAutoreleasePool_Alloc\fP (void)"
.br
.RI "\fIObject allocator. \fP"
.ti -1c
.RI "void \fBXSAutoreleasePool_Drain\fP (void)"
.br
.RI "\fIRemoves objects from the current auto-release pool, sending the a release message. \fP"
.ti -1c
.RI "\fBXSObject\fP \fBXSAutoreleasePool_Init\fP (\fBXSObject\fP xsThis)"
.br
.RI "\fIInitializes a new auto-release pool. \fP"
.ti -1c
.RI "void * \fBXSCopyWithInfos\fP (const char *file, int line, const char *func, void *ptr)"
.br
.RI "\fICopies a pointer description This function is used for internal memory debugging. Do not call it directly. Use XSCopy instead. \fP"
.ti -1c
.RI "\fBBOOL\fP \fBXSEquals\fP (void *ptr1, void *ptr2)"
.br
.RI "\fICompares two pointers/objects. \fP"
.ti -1c
.RI "size_t \fBXSGetAllocationCount\fP (void)"
.br
.RI "\fIGets the number of memory allocations. \fP"
.ti -1c
.RI "\fBXSUInteger\fP \fBXSGetRetainCount\fP (void *ptr)"
.br
.RI "\fIGets the retain count for a pointer. \fP"
.ti -1c
.RI "const char * \fBXSHash\fP (void *ptr)"
.br
.RI "\fIHashes a pointer/object. \fP"
.ti -1c
.RI "void * \fBXSReallocWithInfos\fP (const char *file, int line, const char *func, void *ptr, size_t size)"
.br
.RI "\fIReallocates memory description This function is used for internal memory debugging. Do not call it directly. Use XSRealloc instead. \fP"
.ti -1c
.RI "void * \fBXSReleaseWithInfos\fP (const char *file, int line, const char *func, void *ptr)"
.br
.RI "\fIReleases a memory pointer description This function is used for internal memory debugging. Do not call it directly. Use XSRelease instead. \fP"
.ti -1c
.RI "void * \fBXSRetain\fP (void *ptr)"
.br
.RI "\fIRetains a memory pointer, preventing it to be freed. \fP"
.in -1c
.SH "Detailed Description"
.PP 
Memory management functions and XSAutoreleasePool class functions. 

\fBAuthor:\fP
.RS 4
Jean-David Gadina <macmade@eosgarden.com> 
.RE
.PP

.PP
Definition in file \fBXSMemory.h\fP.
.SH "Define Documentation"
.PP 
.SS "#define XSAlloc(...)   XSAllocWithInfos( __FILE__, __LINE__, __func__, __VA_ARGS__ )"
.PP
Allocates memory descriton Returned pointer will have to be passed to the XSRelease function in order to be free. \fBParameters:\fP
.RS 4
\fI...\fP Reserved for internal runtime use 
.RE
.PP
\fBReturns:\fP
.RS 4
A pointer to the allocated memory 
.RE
.PP

.PP
Definition at line 83 of file XSMemory.h.
.SS "#define XSAutoAlloc(size)   XSAutoAllocWithInfos( __FILE__, __LINE__, __func__, size )"
.PP
Allocates auto-releasable memory. When using this function, the object will automatically receive a release message the next time the current auto-release pool is drained. It means you don't own it, and that you are not responsible to release it explicitely. 
.PP
\fBParameters:\fP
.RS 4
\fIsize\fP The size to allocate in bytes 
.RE
.PP
\fBReturns:\fP
.RS 4
A pointer to the allocated memory, 
.RE
.PP

.PP
Definition at line 173 of file XSMemory.h.
.SS "#define XSCopy(ptr)   XSCopyWithInfos( __FILE__, __LINE__, __func__, ptr )"
.PP
Copies a pointer. This function executes a soft-copy. When using a structure with pointers, only the first level is copied. Note that you are responsible to release the copied pointer by using the XSRelease function. 
.PP
\fBParameters:\fP
.RS 4
\fIptr\fP The pointer to copy 
.RE
.PP
\fBReturns:\fP
.RS 4
The copy of the new pointer 
.RE
.PP

.PP
Definition at line 197 of file XSMemory.h.
.SS "#define XSRealloc(ptr, size)   XSReallocWithInfos( __FILE__, __LINE__, __func__, ptr, size )"
.PP
Reallocates memory. \fBParameters:\fP
.RS 4
\fIptr\fP The pointer to reallocate 
.br
\fIsize\fP The new size in bytes 
.RE
.PP
\fBReturns:\fP
.RS 4
The new pointer to the reallocated memory 
.RE
.PP

.PP
Definition at line 105 of file XSMemory.h.
.SS "#define XSRelease(ptr)   XSReleaseWithInfos( __FILE__, __LINE__, __func__, ptr )"
.PP
Releases a memory pointer. When releasing an object, the internal retain count is decremented. When it reaches 0, the pointer will be automatically freed. 
.PP
\fBParameters:\fP
.RS 4
\fIptr\fP The pointer to release 
.RE
.PP
\fBReturns:\fP
.RS 4
The pointer passed, to allow function chaining 
.RE
.PP

.PP
Definition at line 139 of file XSMemory.h.
.SH "Typedef Documentation"
.PP 
.SS "\fBXSAutoreleasePool\fP"
.PP
Opaque type for the XSAutoreleasePool objects. 
.PP
Definition at line 52 of file XSMemory.h.
.SH "Function Documentation"
.PP 
.SS "void* XSAllocWithInfos (const char *file, intline, const char *func, size_tsize, ...)"
.PP
Allocates memory description This function is used for internal memory debugging. Do not call it directly. Use XSAlloc instead. \fBParameters:\fP
.RS 4
\fIfile\fP The file name 
.br
\fIline\fP The line number 
.br
\fIfunc\fP The function name 
.br
\fIsize\fP The number of bytes to allocate 
.br
\fI...\fP Reserved for internal runtime use 
.RE
.PP
\fBReturns:\fP
.RS 4
A pointer to the allocated memory 
.RE
.PP

.SS "void* XSAutoAllocWithInfos (const char *file, intline, const char *func, size_tsize)"
.PP
Allocates auto-releasable memory description This function is used for internal memory debugging. Do not call it directly. Use XSAutoAlloc instead. \fBParameters:\fP
.RS 4
\fIfile\fP The file name 
.br
\fIline\fP The line number 
.br
\fIfunc\fP The function name 
.br
\fIsize\fP The size to allocate in bytes 
.RE
.PP
\fBReturns:\fP
.RS 4
A pointer to the allocated memory, 
.RE
.PP

.SS "void* XSAutorelease (void *ptr)"
.PP
Marks a memory pointer as auto-releasable. The pointer will be placed in the instance of the current auto-release pool, and will receive a release message the next the auto-release pool is drained. 
.PP
\fBParameters:\fP
.RS 4
\fIptr\fP The memory pointer to mark as auto-releasable 
.RE
.PP
\fBReturns:\fP
.RS 4
The pointer passed, to allow function chaining 
.RE
.PP

.SS "\fBXSObject\fP XSAutoreleasePool_Alloc (void)"
.PP
Object allocator. \fBReturns:\fP
.RS 4
The allocated object 
.RE
.PP

.SS "void XSAutoreleasePool_Drain (void)"
.PP
Removes objects from the current auto-release pool, sending the a release message. \fBReturns:\fP
.RS 4
void 
.RE
.PP

.SS "\fBXSObject\fP XSAutoreleasePool_Init (\fBXSObject\fPxsThis)"
.PP
Initializes a new auto-release pool. The newly created pool will be set as the active one, meaning objects auto-released after the pool creation will be placed inside it. 
.PP
\fBReturns:\fP
.RS 4
The new auto-release pool object 
.RE
.PP

.SS "void* XSCopyWithInfos (const char *file, intline, const char *func, void *ptr)"
.PP
Copies a pointer description This function is used for internal memory debugging. Do not call it directly. Use XSCopy instead. \fBParameters:\fP
.RS 4
\fIfile\fP The file name 
.br
\fIline\fP The line number 
.br
\fIfunc\fP The function name 
.br
\fIptr\fP The pointer to copy 
.RE
.PP
\fBReturns:\fP
.RS 4
The copy of the new pointer 
.RE
.PP

.SS "\fBBOOL\fP XSEquals (void *ptr1, void *ptr2)"
.PP
Compares two pointers/objects. \fBParameters:\fP
.RS 4
\fIptr1\fP The first pointer/object 
.br
\fIptr2\fP The second pointer/object 
.RE
.PP
\fBReturns:\fP
.RS 4
True if the two pointers/objects are equals, otherwise false 
.RE
.PP

.SS "size_t XSGetAllocationCount (void)"
.PP
Gets the number of memory allocations. \fBReturns:\fP
.RS 4
The number of memory allocations 
.RE
.PP

.SS "\fBXSUInteger\fP XSGetRetainCount (void *ptr)"
.PP
Gets the retain count for a pointer. \fBParameters:\fP
.RS 4
\fIptr\fP The pointer 
.RE
.PP
\fBReturns:\fP
.RS 4
The retain count 
.RE
.PP

.SS "const char* XSHash (void *ptr)"
.PP
Hashes a pointer/object. \fBParameters:\fP
.RS 4
\fIptr\fP The pointer/object to hash 
.RE
.PP
\fBReturns:\fP
.RS 4
The hash of the pointer/object 
.RE
.PP

.SS "void* XSReallocWithInfos (const char *file, intline, const char *func, void *ptr, size_tsize)"
.PP
Reallocates memory description This function is used for internal memory debugging. Do not call it directly. Use XSRealloc instead. \fBParameters:\fP
.RS 4
\fIfile\fP The file name 
.br
\fIline\fP The line number 
.br
\fIfunc\fP The function name 
.br
\fIptr\fP The pointer to reallocate 
.br
\fIsize\fP The new size in bytes 
.RE
.PP
\fBReturns:\fP
.RS 4
The new pointer to the reallocated memory 
.RE
.PP

.SS "void* XSReleaseWithInfos (const char *file, intline, const char *func, void *ptr)"
.PP
Releases a memory pointer description This function is used for internal memory debugging. Do not call it directly. Use XSRelease instead. \fBParameters:\fP
.RS 4
\fIfile\fP The file name 
.br
\fIline\fP The line number 
.br
\fIfunc\fP The function name 
.br
\fIptr\fP The pointer to release 
.RE
.PP
\fBReturns:\fP
.RS 4
The pointer passed, to allow function chaining 
.RE
.PP

.SS "void* XSRetain (void *ptr)"
.PP
Retains a memory pointer, preventing it to be freed. When retaining an object, the internal retain count is incremented. It means you own an object that you retain, and that you are responsible to release it using XSRelease. 
.PP
\fBParameters:\fP
.RS 4
\fIptr\fP The pointer to retain 
.RE
.PP
\fBReturns:\fP
.RS 4
The pointer passed, to allow function chaining 
.RE
.PP

.SH "Author"
.PP 
Generated automatically by Doxygen for XSFoundation from the source code.
