.TH "XSLock.h" 3 "Sun Apr 24 2011" "Version 1.2.2-0" "XSFoundation" \" -*- nroff -*-
.ad l
.nh
.SH NAME
XSLock.h \- 
.PP
XSLock class functions.  

.SH SYNOPSIS
.br
.PP
\fC#include 'XSMacros.h'\fP
.br

.SS "Typedefs"

.in +1c
.ti -1c
.RI "typedef struct \fB__XSLock_Struct\fP * \fBXSLock\fP"
.br
.RI "\fIOpaque type for the XSLock objects. \fP"
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "XSStatic \fBXSObject\fP \fBXSLock_Alloc\fP (void)"
.br
.RI "\fIObject allocator. \fP"
.ti -1c
.RI "\fBXSObject\fP \fBXSLock_Init\fP (\fBXSObject\fP xsThis)"
.br
.RI "\fIInitializes a lock. \fP"
.ti -1c
.RI "\fBBOOL\fP \fBXSLock_IsLocked\fP (\fBXSLock\fP xsThis)"
.br
.RI "\fIChecks if a lock is locked. \fP"
.ti -1c
.RI "\fBBOOL\fP \fBXSLock_Lock\fP (\fBXSLock\fP xsThis)"
.br
.RI "\fILocks the lock object. \fP"
.ti -1c
.RI "\fBBOOL\fP \fBXSLock_TryLock\fP (\fBXSLock\fP xsThis)"
.br
.RI "\fITries to acquire a lock. \fP"
.ti -1c
.RI "void \fBXSLock_Unlock\fP (\fBXSLock\fP xsThis)"
.br
.RI "\fIUnlocks a lock. \fP"
.ti -1c
.RI "void \fBXSLock_WaitForLock\fP (\fBXSLock\fP xsThis)"
.br
.RI "\fIPause the programs execution until the lock is acquired. \fP"
.in -1c
.SH "Detailed Description"
.PP 
XSLock class functions. 

\fBAuthor:\fP
.RS 4
Jean-David Gadina <macmade@eosgarden.com> 
.RE
.PP

.PP
Definition in file \fBXSLock.h\fP.
.SH "Typedef Documentation"
.PP 
.SS "\fBXSLock\fP"
.PP
Opaque type for the XSLock objects. 
.PP
Definition at line 50 of file XSLock.h.
.SH "Function Documentation"
.PP 
.SS "XSStatic \fBXSObject\fP XSLock_Alloc (void)"
.PP
Object allocator. \fBReturns:\fP
.RS 4
The allocated object 
.RE
.PP

.SS "\fBXSObject\fP XSLock_Init (\fBXSObject\fPxsThis)"
.PP
Initializes a lock. \fBParameters:\fP
.RS 4
\fIxsThis\fP The lock object 
.RE
.PP
\fBReturns:\fP
.RS 4
The lock object 
.RE
.PP

.SS "\fBBOOL\fP XSLock_IsLocked (\fBXSLock\fPxsThis)"
.PP
Checks if a lock is locked. \fBParameters:\fP
.RS 4
\fIxsThis\fP The lock object 
.RE
.PP
\fBReturns:\fP
.RS 4
True if the lock is locked, otherwise false 
.RE
.PP

.SS "\fBBOOL\fP XSLock_Lock (\fBXSLock\fPxsThis)"
.PP
Locks the lock object. \fBParameters:\fP
.RS 4
\fIxsThis\fP The lock object 
.RE
.PP
\fBReturns:\fP
.RS 4
True if the lock was successfully locked, otherwise false 
.RE
.PP

.SS "\fBBOOL\fP XSLock_TryLock (\fBXSLock\fPxsThis)"
.PP
Tries to acquire a lock. \fBParameters:\fP
.RS 4
\fIxsThis\fP The lock object 
.RE
.PP
\fBReturns:\fP
.RS 4
True if the lock was successfully locked, otherwise false 
.RE
.PP

.SS "void XSLock_Unlock (\fBXSLock\fPxsThis)"
.PP
Unlocks a lock. \fBParameters:\fP
.RS 4
\fIxsThis\fP The lock object 
.RE
.PP
\fBReturns:\fP
.RS 4
void 
.RE
.PP

.SS "void XSLock_WaitForLock (\fBXSLock\fPxsThis)"
.PP
Pause the programs execution until the lock is acquired. \fBParameters:\fP
.RS 4
\fIxsThis\fP The lock object 
.RE
.PP
\fBReturns:\fP
.RS 4
void 
.RE
.PP

.SH "Author"
.PP 
Generated automatically by Doxygen for XSFoundation from the source code.
