.TH "std-string.h" 3 "Sun Apr 24 2011" "Version 1.2.2-0" "XSFoundation" \" -*- nroff -*-
.ad l
.nh
.SH NAME
std-string.h \- 
.PP
Definition of the non-standard string functions.  

.SH SYNOPSIS
.br
.PP
\fC#include 'std-keywords.h'\fP
.br

.SS "Functions"

.in +1c
.ti -1c
.RI "void \fBitoa\fP (int n, char s[], int radix)"
.br
.RI "\fIConverts an integer to a string. \fP"
.ti -1c
.RI "char * \fBstrrstr\fP (char *s1, char *s2)"
.br
.RI "\fILocate substring. \fP"
.ti -1c
.RI "void \fButoa\fP (unsigned int n, char s[], int radix)"
.br
.RI "\fIConverts an unsigned integer to a string. \fP"
.in -1c
.SH "Detailed Description"
.PP 
Definition of the non-standard string functions. 

\fBAuthor:\fP
.RS 4
Jean-David Gadina <macmade@eosgarden.com> 
.RE
.PP

.PP
Definition in file \fBstd-string.h\fP.
.SH "Function Documentation"
.PP 
.SS "void itoa (intn, chars[], intradix)"
.PP
Converts an integer to a string. Converts an integer value to a null-terminated string using the specified base and stores the result in the array given by str parameter. If base is 10 and value is negative, the resulting string is preceded with a minus sign (-). With any other base, value is always considered unsigned. str should be an array long enough to contain any possible value: ( sizeof( int ) * 8 + 1 ) for radix = 2, i.e. 17 bytes in 16-bits platforms and 33 in 32-bits platforms. 
.PP
\fBParameters:\fP
.RS 4
\fIn\fP Value to be converted to a string. 
.br
\fIs\fP Array in memory where to store the resulting null-terminated string. 
.br
\fIradix\fP Numerical base used to represent the value as a string, between 2 and 16, where 10 means decimal base, 16 hexadecimal, 8 octal, and 2 binary. 
.RE
.PP
\fBReturns:\fP
.RS 4
void 
.RE
.PP

.SS "char* strrstr (char *s1, char *s2)"
.PP
Locate substring. Returns a pointer to the last occurrence of str2 in str1, or a null pointer if str2 is not part of str1. The matching process does not include the terminating null-characters. 
.PP
\fBParameters:\fP
.RS 4
\fIs1\fP C string to be scanned. 
.br
\fIs2\fP C string containing the sequence of characters to match. 
.RE
.PP
\fBReturns:\fP
.RS 4
A pointer to the last occurrence in str1 of any of the entire sequence of characters specified in str2, or a null pointer if the sequence is not present in str1. 
.RE
.PP

.SS "void utoa (unsigned intn, chars[], intradix)"
.PP
Converts an unsigned integer to a string. Converts an unsigned integer value to a null-terminated string using the specified base and stores the result in the array given by str parameter. If base is 10 and value is negative, the resulting string is preceded with a minus sign (-). With any other base, value is always considered unsigned. str should be an array long enough to contain any possible value: ( sizeof( unsigned int ) * 8 + 1 ) for radix = 2, i.e. 17 bytes in 16-bits platforms and 33 in 32-bits platforms. 
.PP
\fBParameters:\fP
.RS 4
\fIn\fP Value to be converted to a string. 
.br
\fIs\fP Array in memory where to store the resulting null-terminated string. 
.br
\fIradix\fP Numerical base used to represent the value as a string, between 2 and 16, where 10 means decimal base, 16 hexadecimal, 8 octal, and 2 binary. 
.RE
.PP
\fBReturns:\fP
.RS 4
void 
.RE
.PP

.SH "Author"
.PP 
Generated automatically by Doxygen for XSFoundation from the source code.
