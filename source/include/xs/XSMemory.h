/*******************************************************************************
 * Copyright (c) 2011, Jean-David Gadina <macmade@eosgarden.com>
 * Distributed under the Boost Software License, Version 1.0.
 * 
 * Boost Software License - Version 1.0 - August 17th, 2003
 * 
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 * 
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 ******************************************************************************/

/* $Id$ */

/*!
 * @header      XSMemory.h
 * @copyright   eosgarden 2011 - Jean-David Gadina <macmade@eosgarden.com>
 * @abstract    Memory functions and XSAutoreleasePool class functions
 */

#ifndef _XS_MEMORY_H_
#define _XS_MEMORY_H_
#pragma once

#include "XSMacros.h"

XS_EXTERN_C_BEGIN

#include "XSTypes.h"

/*!
 * @typedef     XSAutoreleasePool
 * @abstract    Opaque type for the XSAutoreleasePool objects
 */
typedef struct XSAutoreleasePool * XSAutoreleasePool;

/*!
 * @function    XSAutoreleasePool_Alloc
 * @abstract    Object allocator
 * @result      The allocated object
 */
XSStatic XSAutoreleasePool XSAutoreleasePool_Alloc( void );

/*!
 * @function    XSAutoreleasePool_Init
 * @abstract    Creates a new auto-release pool
 * @description The newly created pool will be set as the active one, meaning
 *              objects auto-released after the pool creation will be placed
 *              inside it.
 * @result      The new auto-release pool object
 */
XSObject XSAutoreleasePool_Init( XSObject xsThis );

/*!
 * @function    XSAutoreleasePool_Drain
 * @abstract    Removes objects from the current auto-release pool, sending the a release message.
 * @result      void
 */
XSStatic void XSAutoreleasePool_Drain( void );

/*!
 * @define      XSAlloc
 * @abstract    Allocates memory
 * descriton    Returned pointer will have to be passed to the XSRelease
 *              function in order to be free.
 * @param       size    The number of bytes to allocate
 * @param       ...     Reserved for internal runtime use
 * @result      A pointer to the allocated memory
 */
#define XSAlloc( ... ) XSAllocWithInfos( __FILE__, __LINE__, __func__, __VA_ARGS__ )

/*!
 * @function    XSAllocWithInfos
 * @abstract    Allocates memory
 * description  This function is used for internal memory debugging. Do not
 *              call it directly. Use XSAlloc instead.
 * @param       file    The file name
 * @param       line    The line number
 * @param       func    The function name
 * @param       size    The number of bytes to allocate
 * @param       ...     Reserved for internal runtime use
 * @result      A pointer to the allocated memory
 */
void * XSAllocWithInfos( const char * file, int line, const char * func, size_t size, ... );

/*!
 * @define      XSRealloc
 * @abstract    Reallocates memory
 * @param       ptr     The pointer to reallocate
 * @param       size    The new size in bytes
 * @result      The new pointer to the reallocated memory
 */
#define XSRealloc( ptr, size ) XSReallocWithInfos( __FILE__, __LINE__, __func__, ptr, size )

/*!
 * @function    XSReallocWithInfos
 * @abstract    Reallocates memory
 * description  This function is used for internal memory debugging. Do not
 *              call it directly. Use XSRealloc instead.
 * @param       file    The file name
 * @param       line    The line number
 * @param       func    The function name
 * @param       ptr     The pointer to reallocate
 * @param       size    The new size in bytes
 * @result      The new pointer to the reallocated memory
 */
void * XSReallocWithInfos( const char * file, int line, const char * func, void * ptr, size_t size );

/*!
 * @function    XSRetain
 * @abstract    Retains a memory pointer, preventing it to be freed
 * @description When retaining an object, the internal retain count is
 *              incremented. It means you own an object that you retain, and
 *              that you are responsible to release it using XSRelease.
 * @param       ptr     The pointer to retain
 * @result      The pointer passed, to allow function chaining
 */
void * XSRetain( void * ptr );

/*!
 * @define      XSRelease
 * @abstract    Releases a memory pointer
 * @description When releasing an object, the internal retain count is
 *              decremented. When it reaches 0, the pointer will be
 *              automatically freed.
 * @param       ptr     The pointer to release
 * @result      The pointer passed, to allow function chaining
 */
#define XSRelease( ptr ) XSReleaseWithInfos( __FILE__, __LINE__, __func__, ptr )

/*!
 * @function    XSRelease
 * @abstract    Releases a memory pointer
 * description  This function is used for internal memory debugging. Do not
 *              call it directly. Use XSRelease instead.
 * @param       file    The file name
 * @param       line    The line number
 * @param       func    The function name
 * @param       ptr     The pointer to release
 * @result      The pointer passed, to allow function chaining
 */
void * XSReleaseWithInfos( const char * file, int line, const char * func, void * ptr );

/*!
 * @function    XSAutorelease
 * @abstract    Marks a memory pointer as auto-releasable
 * @description The pointer will be placed in the instance of the current
 *              auto-release pool, and will receive a release message the next
 *              the auto-release pool is drained.
 * @param       The memory pointer to mark as auto-releasable
 * @result      The pointer passed, to allow function chaining
 */
void * XSAutorelease( void * ptr );

/*!
 * @function    XSAutoAlloc
 * @abstract    Allocates auto-releasable memory
 * @description When using this function, the object will automatically receive
 *              a release message the next time the current auto-release pool
 *              is drained. It means you don't own it, and that you are not
 *              responsible to release it explicitely.
 * @param       size    The size to allocate in bytes
 * @result      A pointer to the allocated memory,
 */
#define XSAutoAlloc( size ) XSAutoAllocWithInfos( __FILE__, __LINE__, __func__, size )

/*!
 * @function    XSAutoAlloc
 * @abstract    Allocates auto-releasable memory
 * description  This function is used for internal memory debugging. Do not
 *              call it directly. Use XSAutoAlloc instead.
 * @param       file    The file name
 * @param       line    The line number
 * @param       func    The function name
 * @param       size    The size to allocate in bytes
 * @result      A pointer to the allocated memory,
 */
void * XSAutoAllocWithInfos( const char * file, int line, const char * func, size_t size );

/*!
 * @function    XSCopy
 * @abstract    Copies a pointer
 * @description This function executes a soft-copy. When using a structure with
 *              pointers, only the first level is copied.
 *              Note that you are responsible to release the copied pointer
 *              by using the XSRelease function.
 * @param       ptr     The pointer to copy
 * @result      The copy of the new pointer
 */
#define XSCopy( ptr ) XSCopyWithInfos( __FILE__, __LINE__, __func__, ptr )

/*!
 * @function    XSCopy
 * @abstract    Copies a pointer
 * description  This function is used for internal memory debugging. Do not
 *              call it directly. Use XSCopy instead.
 * @param       file    The file name
 * @param       line    The line number
 * @param       func    The function name
 * @param       ptr     The pointer to copy
 * @result      The copy of the new pointer
 */
void * XSCopyWithInfos( const char * file, int line, const char * func, void * ptr );

/*!
 * @function    XSEquals
 * @abstract    Compares two pointers/objects
 * @param       ptr1    The first pointer/object
 * @param       ptr2    The second pointer/object
 * @result      True if the two pointers/objects are equals, otherwise false
 */
BOOL XSEquals( void * ptr1, void * ptr2 );

/*!
 * @function    XSHash
 * @abstract    Hashes a pointer/object
 * @param       ptr     The pointer/object to hash
 * @result      The hash of the pointer/object
 */
const char * XSHash( void * ptr );

/*!
 * @function    XSGetRetainCount
 * @abstract    Gets the retain count for a pointer
 * @param       ptr     The pointer
 * @result      The retain count
 */
XSUInteger XSGetRetainCount( void * ptr );

/*!
 * @function    XSGetAllocationNumber
 * @abstract    Gets the number of memory allocations
 * @result      The number of memory allocations
 */
size_t XSGetAllocationCount( void );

XS_EXTERN_C_END

#endif /* _XS_MEMORY_H_ */
