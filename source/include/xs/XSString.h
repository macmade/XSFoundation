/*******************************************************************************
 * Copyright (c) 2011, Jean-David Gadina <macmade@eosgarden.com>
 * Distributed under the Boost Software License, Version 1.0.
 * 
 * Boost Software License - Version 1.0 - August 17th, 2003
 * 
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 * 
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 ******************************************************************************/

/* $Id$ */

/*!
 * @file        XSString.h
 * @brief       XSString class functions
 * @author      Jean-David Gadina <macmade@eosgarden.com>
 */

#ifndef _XS_STRING_H_
#define _XS_STRING_H_
#pragma once

#include "XSMacros.h"

XS_EXTERN_C_BEGIN

#include "XSArray.h"

/*!
 * @typedef     XSString
 * @brief       Opaque type for the XSString objects
 */
typedef struct __XSString_Struct * XSString;

/*!
 * @brief       Object allocator
 * @result      The allocated object
 */
XSStatic XSObject XSString_Alloc( void );

/*!
 * @brief       Initializes an empty string
 * @param       xsThis      The string object
 * @result      A new string object
 */
XSObject XSString_Init( XSObject xsThis );

/*!
 * @brief       Initializes an empty string with an initial capacity
 * @param       xsThis      The string object
 * @param       capacity    The initial string capacity
 * @result      A new string object
 */
XSString XSString_InitWithCapacity( XSString xsThis, XSUInteger capacity );

/*!
 * @brief       Initializes a string from a C string
 * @param       xsThis  The string object
 * @param       str     The C string
 * @result      A new string object
 */
XSString XSString_InitWithCString( XSString xsThis, char * str );

/*!
 * @brief       Gets a substring to a specific index
 * @param       xsThis  The string object
 * @param       i       The index
 * @result      A new string object
 */
XSAutoreleased XSString XSString_SubstringFromIndex( XSString xsThis, size_t i );

/*!
 * @brief       Gets a substring to a specific index
 * @param       xsThis  The string object
 * @param       i       The index
 * @result      A new string object
 */
XSAutoreleased XSString XSString_SubstringToIndex( XSString xsThis, size_t i );

/*!
 * @brief       Gets a substring within a specific range
 * @param       xsThis  The string object
 * @param       range   The range
 * @result      A new string object
 */
XSAutoreleased XSString XSString_SubstringWithRange( XSString xsThis, XSRange range );

/*!
 * @brief       Gets a lower-case string
 * @param       xsThis  The string object
 * @result      A new string object
 */
XSAutoreleased XSString XSString_LowercaseString( XSString xsThis );

/*!
 * @brief       Gets a upper-case string
 * @param       xsThis  The string object
 * @result      A new string object
 */
XSAutoreleased XSString XSString_UppercaseString( XSString xsThis );

/*!
 * @brief       Initializes a new string by appending an other string
 * @param       xsThis  The string object
 * @param       str     The string to append
 * @result      A new string object
 */
XSAutoreleased XSString XSString_StringByAppendingString( XSString xsThis, XSString str );

/*!
 * @brief       Initializes a new string by appending an C string
 * @param       xsThis  The string object
 * @param       str     The C string to append
 * @result      A new string object
 */
XSAutoreleased XSString XSString_StringByAppendingCString( XSString xsThis, char * str );

/*!
 * @brief       
 * @param       xsThis  The string object
 * @param       format  ...
 * @param       ...     ...
 * @result      void
 */
void XSString_AppendFormat( XSString xsThis, char * format, ... ) FORMAT_ATTRIBUTE( printf, 2, 0 );

/*!
 * @brief       Appends a string to the string object
 * @param       xsThis  The string object
 * @param       str     The string to append
 * @result      void
 */
void XSString_AppendString( XSString xsThis, XSString str );

/*!
 * @brief       Appends a C string to the string object
 * @param       xsThis  The string object
 * @param       str     The C string to append
 * @result      void
 */
void XSString_AppendCString( XSString xsThis, char * str );

/*!
 * @brief       Gets the string length
 * @param       xsThis  The string object
 * @result      The string length
 */
size_t XSString_Length( XSString xsThis );

/*!
 * @brief       Gets a character at a specific index
 * @param       xsThis  The string object
 * @param       i       The index
 * @result      The character
 */
char XSString_CharacterAtIndex( XSString xsThis, size_t i );

/*!
 * @brief       Gets the C string
 * @param       xsThis  The string object
 * @result      The C String
 */
const char * XSString_CString( XSString xsThis );

/*!
 * @brief       Gets the range of a string in the string
 * @details     If the C string is not found, the location field of the range
 *              will equals XSNotFound.
 * @param       xsThis  The string object
 * @param       str     ...
 * @result      The range of the string
 */
XSRange XSString_RangeOfString( XSString xsThis, XSString str );

/*!
 * @brief       Gets the range of a C string in the string
 * @details     If the C string is not found, the location field of the range
 *              will equals XSNotFound.
 * @param       xsThis  The string object
 * @param       str     ...
 * @result      The range of the C string
 */
XSRange XSString_RangeOfCString( XSString xsThis, char * str );

/*!
 * @brief       Compares the string with another string
 * @param       xsThis  The string object
 * @param       str     ...
 * @result      YES if both strings are equals, otherwise NO
 */
BOOL XSString_IsEqualToString( XSString xsThis, XSString str );

/*!
 * @brief       Gets a MD5 hash of a string
 * @param       xsThis  The string object
 * @result      The MD5 hash
 */
XSAutoreleased XSString XSString_MD5Hash( XSString xsThis );

/*!
 * @brief       Splits a string by a C string
 * @param       xsThis  The string object
 * @param       s       The split string
 * @result      An array with the string parts
 */
XSAutoreleased XSArray XSString_SplitWithCString( XSString xsThis, char * s );

XS_EXTERN_C_END

#endif /* _XS_STRING_H_ */
