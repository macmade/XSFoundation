/*******************************************************************************
 * Copyright (c) 2011, Jean-David Gadina <macmade@eosgarden.com>
 * Distributed under the Boost Software License, Version 1.0.
 * 
 * Boost Software License - Version 1.0 - August 17th, 2003
 * 
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 * 
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 ******************************************************************************/

/* $Id$ */

/*!
 * @file        XSTypes.h
 * @brief       XSFoundation data-types
 * @author      Jean-David Gadina <macmade@eosgarden.com>
 */

#ifndef _XS_TYPES_H_
#define _XS_TYPES_H_
#pragma once

#include "XSMacros.h"

XS_EXTERN_C_BEGIN

#include "XSConstants.h"
#include "../std/std.h"

/*******************************************************************************
 * Boolean data-type
 ******************************************************************************/

#ifndef OBJC_BOOL_DEFINED
    
    #ifndef _WIN32
        
        typedef signed char BOOL;
    
    #endif
    
    #define YES ( BOOL )1
    #define NO  ( BOOL )0
    #define OBJC_BOOL_DEFINED
    
#endif

/*******************************************************************************
 * Standard types
 ******************************************************************************/

typedef unsigned char           Boolean;
typedef unsigned char           UInt8;
typedef signed char             SInt8;
typedef unsigned short          UInt16;
typedef signed short            SInt16;
typedef unsigned int            UInt32;
typedef signed int              SInt32;
typedef uint64_t                UInt64;
typedef int64_t                 SInt64;
typedef float                   Float32;
typedef double                  Float64;
typedef UInt8                   Byte;
typedef SInt8                   SignedByte;
typedef unsigned short          UniChar;
typedef unsigned long           UniCharCount;
typedef unsigned char         * StringPtr;
typedef const unsigned char   * ConstStringPtr;
typedef unsigned char           Str255[ 256 ];
typedef const unsigned char   * ConstStr255Param;
typedef UInt32                  FourCharCode;
typedef FourCharCode            OSType;
typedef SInt32                  OSStatus;
typedef SInt16                  OSErr;
typedef UInt8                   UTF8Char;
typedef UInt16                  UTF16Char;
typedef UInt32                  UTF32Char;

/*******************************************************************************
 * XSFoundation types
 ******************************************************************************/

#if __LP64__
    
    /*!
     * @def     XSInteger
     * @brief   ...
     */
    typedef long          XSInteger;
    
    /*!
     * @def     XSUInteger
     * @brief   ...
     */
    typedef unsigned long XSUInteger;
    
    /*!
     * @def     XSFloat
     * @brief   ...
     */
    typedef double        XSFloat;
    
#else
    
    /*!
     * @def     XSInteger
     * @brief   ...
     */
    typedef int          XSInteger;
    
    /*!
     * @def     XSUInteger
     * @brief   ...
     */
    typedef unsigned int XSUInteger;
    
    /*!
     * @def     XSFloat
     * @brief   ...
     */
    typedef float        XSFloat;
    
#endif

/*!
 * @struct      XSPoint_Struct
 * @brief       Point data-type structure
 */
struct XSPoint_Struct
{
    XSFloat x;      /*! The X coordinate of the point */
    XSFloat y;      /*! The Y coordinate of the point */
};

/*!
 * @typedef     XSPoint
 * @brief       Point data-type
 */
typedef struct XSPoint_Struct XSPoint;

/*!
 * @struct      XSSize_Struct
 * @brief       Size data-type structure
 */
struct XSSize_Struct
{
    XSFloat width;      /*! The width of the size */
    XSFloat height;     /*! The height of the size */
};

/*!
 * @typedef     XSSize
 * @brief       Size data-type
 */
typedef struct XSSize_Struct XSSize;

/*!
 * @struct      XSRect_Struct
 * @brief       Rectangle data-type structure
 */
struct XSRect_Struct
{
    XSPoint origin;     /*! The origin point of the rectangle */
    XSSize  size;       /*! The size of the rectangle */
};

/*!
 * @typedef     XSRect
 * @brief       Rectangle data-type
 */
typedef struct XSRect_Struct XSRect;

/*!
 * @struct      XSRange_Struct 
 * @brief       Range data-type structure
 */
struct XSRange_Struct
{
    XSUInteger location;    /*! The start of the range */
    XSUInteger length;      /*! The length of the range */
};

/*!
 * @typedef     XSRange 
 * @brief       Range data-type   
 */
typedef struct XSRange_Struct XSRange;

/*!
 * @def         XSUIntegerMax
 * @brief       Not found value for the XSRange.location field
 */
#define XSNotFound XSUIntegerMax

/*!
 * @struct      XSEdgeInsets_Struct 
 * @brief       Inset distances structure
 */
struct XSEdgeInsets_Struct
{
    XSFloat left;       /*! The left coordinate */
    XSFloat top;        /*! The top coordiante */
    XSFloat right;      /*! The right coordinate */
    XSFloat bottom;     /*! The bottom coordinate */
};

/*!
 * @typedef     XSEdgeInsets 
 * @brief       Inset distances
 */
typedef struct XSEdgeInsets_Struct XSEdgeInsets;

/*!
 * @enum        XSByteOrder_Enum
 * @brief       Byte-order data-type enumeration
 */
enum XSByteOrder_Enum
{
   XS_UnknownByteOrder = 0,     /*! Unknown byte order */
   XS_LittleEndian     = 1,     /*! Little endian byte order */
   XS_BigEndian        = 2      /*! Big endian byte order */
};

/*!
 * @typedef     XSByteOdrer
 * @brief       Byte order data type
 */
typedef XSInteger XSByteOdrer;

/*!
 * @enum        XSOrdered_Enum
 * @brief       Enumeration for the XSComparisonResult data-type 
 */
enum XSOrdered_Enum
{
   XSOrderedAscending  = -1,    /*! Order is ascending */
   XSOrderedSame       = 0,     /*! Order is same */
   XSOrderedDescending = 1      /*! Order is descending */
};

/*!
 * @typedef     XSComparisonResult
 * @brief       Comaprison result data-type
 */
typedef XSInteger XSComparisonResult;

/*!
 * @enum        XSDataType
 * @brief       Intrisec data types    
 */
typedef enum
{
    XSDataTypeChar      = 0x00,     /*! char */
    XSDataTypeUChar     = 0x01,     /*! unsigned char */
    XSDataTypeShort     = 0x02,     /*! short */
    XSDataTypeUShort    = 0x03,     /*! unsigned short */
    XSDataTypeInt       = 0x04,     /*! int */
    XSDataTypeUInt      = 0x05,     /*! unsigned int */
    XSDataTypeLong      = 0x06,     /*! long */
    XSDataTypeULong     = 0x07,     /*! unsigned long */
    XSDataTypeLongLong  = 0x08,     /*! long long */
    XSDataTypeULongLong = 0x09,     /*! unsigned long long */
    XSDataTypeFloat     = 0x0A,     /*! float */
    XSDataTypeDouble    = 0x0B,     /*! double */
    XSDataTypeInteger   = 0x0C,     /*! XSInteger */
    XSDataTypeUInteger  = 0x0D      /*! XSUInteger */
}
XSDataType;

/*!
 * @def         XSStatic
 * @brief       Marker for static class methods
 */
#define XSStatic        

/*!
 * @def         XSAutoreleased
 * @brief       Marker for methods that return auto-released objects
 */
#define XSAutoreleased  

/*!
 * @typedef     XSClassID
 * @brief       Type ID foe the registered runtime classes
 */
typedef unsigned long XSClassID;

/*!
 * @typedef     XSObject
 * @brief       Polymorphism support - Generic type for all XSFoundation objects
 */
typedef void * XSObject;

/* XSString is required here as the objects description callbacks use that type */
#include "XSString.h"

/*!
 * @struct      XSClassInfos_Struct
 * @brief       XSFoundation runtime class structure
 */
struct XSClassInfos_Struct
{
    const char * className;                                                     /*! The name of the class */
    size_t       instanceSize;                                                  /*! The size of the class instances */
    void         ( * construct )( XSObject object );                            /*! The class constructor */
    void         ( * destruct  )( XSObject object );                            /*! The class destructor */
    XSObject     ( * init      )( XSObject object );                            /*! The default object initializer */
    void         ( * copy      )( XSObject source, XSObject destination );      /*! The object's copy callback */
    XSString     ( * toString  )( XSObject object );                            /*! The object's description callback (used in XSLog) */
    BOOL         ( * equals    )( XSObject object1, XSObject object2 );         /*! The object's comparison callback */
};

/*!
 * @struct      XSClassInfos
 * @brief       XSFoundation runtime class type
 */
typedef struct XSClassInfos_Struct XSClassInfos;

/*!
 * @struct      ...
 * @brief       ...
 */
struct XSMethod_Struct
{
    void   ( * func )( void );  /*! ... */
    char     * name;            /*! ... */
    XSUInteger modifiers;       /*! ... */
    
};

/*!
 * @typedef     XSMethod
 * @brief       ...
 * @details     ...
 */
typedef struct XSMethod_Struct XSMethod;

/*!
 * @struct      XSRuntimeClass_Struct
 * @brief       Base structure for the runtime classes
 */
struct XSRuntimeClass_Struct
{
    XSClassInfos * classInfos;      /*! ... */
    XSMethod     * methods;         /*! ... */
    XSUInteger     methodCount;     /*! ... */
    XSUInteger     methodSize;      /*! ... */
};

/*!
 * @typedef     XSRuntimeClass
 * @brief       Base type for the runtime classes
 * @details     This type MUST be the first member of all XSFoundation
 *              classes.
 */
typedef struct XSRuntimeClass_Struct XSRuntimeClass;

/*!
 * @typedef     XSClass
 * @brief       Polymorphism support - Generic type for all XSFoundation classes
 */
typedef XSRuntimeClass * XSClass;

/*!
 * @struct      ...
 * @brief       ...
 */
struct XSInstance_Struct
{
    XSRuntimeClass * __class;
};

/*!
 * @typedef     XSMethod
 * @brief       ...
 */
typedef struct XSInstance_Struct * XSInstance;

/*!
 * @def         nil
 * @brief       NULL pointer for the 'XSObject' type
 */
#define nil	( XSObject )0

/*!
 * @def         Nil
 * @brief       NULL pointer for the 'XSClass' type
 */
#define Nil	( XSClass )0

XS_EXTERN_C_END

#endif /* _XS_TYPES_H_ */
