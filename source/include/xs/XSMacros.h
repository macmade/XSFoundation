/*******************************************************************************
 * Copyright (c) 2011, Jean-David Gadina <macmade@eosgarden.com>
 * Distributed under the Boost Software License, Version 1.0.
 * 
 * Boost Software License - Version 1.0 - August 17th, 2003
 * 
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 * 
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 ******************************************************************************/
 
/* $Id$ */

/*!
 * @file        XSMacros.h
 * @brief       General macros
 * @author      Jean-David Gadina <macmade@eosgarden.com>
 */

#ifndef _XS_MACROS_H_
#define _XS_MACROS_H_
#pragma once

#if !defined( XS_EXTERN_C_BEGIN )
    #if defined( __cplusplus )
        
        /*!
         * @def         XS_EXTERN_C_BEGIN
         * @brief       Substitution for 'extern "C" {' start
         */
        #define XS_EXTERN_C_BEGIN extern "C" {
        
        /*!
         * @def         XS_EXTERN_C_END
         * @brief       Substitution for 'extern "C" {' end
         */
        #define XS_EXTERN_C_END              }
        
    #else
        
        /*!
         * @def         XS_EXTERN_C_END
         * @brief       Substitution for 'extern "C" {' end
         */
        #define XS_EXTERN_C_BEGIN
        
        /*!
         * @def         XS_EXTERN_C_BEGIN
         * @brief       Substitution for 'extern "C" {' start
         */
        #define XS_EXTERN_C_END
        
    #endif
#endif

XS_EXTERN_C_BEGIN

/*!
 * @def             __XS_VERS_STR__
 * @brief           XSFoundation version number string
 */
#define __XS_VERS_STR__    "1.2.2-0"

/*!
 * @def             __XS_VERS_MAJ__
 * @brief           XSFoundation major version number
 */
#define __XS_VERS_MAJ__    1

/*!
 * @def             __XS_VERS_MIN__
 * @brief           XSFoundation minor version number
 */
#define __XS_VERS_MIN__    2

/*!
 * @def             __XS_VERS_BUG__
 * @brief           XSFoundation bugfix version number
 */
#define __XS_VERS_BUG__    2

/*!
 * @def             __XS_VERS_PATCH__
 * @brief           XSFoundation patch level version number
 */
#define __XS_VERS_PATCH__  0

/*!
 * @def             __XS_VERS__
 * @brief           XSFoundation version number
 */
#define __XS_VERS__ ( __XS_VERS_MAJ__ * 1000000 \
                    + __XS_VERS_MIN__ * 10000   \
                    + __XS_VERS_BUG__ * 100     \
                    + __XS_VERS_PATCH__ )


#include "XSMacrosTarget.h"
#include "XSMacrosException.h"

/*!
 * @def         XSSTR
 * @brief       Initializes an XSString instance from a C string
 * @param       s   A C string (char *)
 */
#define XSSTR( s ) XSAutorelease( XSString_InitWithCString( XSString_Alloc(), s ) )

/*!
 * @def         __XSFatalError
 * @brief       Issues a fatal error message and aborts the program
 * @details     Never call this macro directly. Use XSFatalError instead.
 * @param       FILE    The file name in which the error occured
 * @param       LINE    The line number in which the error occured
 * @param       ...     Message and format arguments
 */
#define __XSFatalError( FILE, LINE, ... )                                       \
    fprintf( stderr, "Fatal error: %s:%i\n", strrchr( FILE, '/' ) + 1, LINE );  \
    fprintf( stderr, __VA_ARGS__ );                                             \
    fprintf( stderr, "\n" );                                                    \
    pthread_exit( NULL );                                               \
    exit( EXIT_FAILURE );

/*!
 * @def         XSFatalError
 * @brief       Issues a fatal error message and aborts the program
 * @param       ...     Message and format arguments
 */
#define XSFatalError( ... ) __XSFatalError( __FILE__, __LINE__, __VA_ARGS__ )

/*!
 * @def         XSEndian16_Swap
 * @brief       Swap endiannes of a 16 bits value
 * @param       value   The value to swap
 */
#define XSEndian16_Swap( value )                        \
    (                                                   \
        ( ( ( UInt16 )( ( value ) & 0x00FF ) ) << 8 ) | \
        ( ( ( UInt16 )( ( value ) & 0xFF00 ) ) >> 8 )   \
    )

/*!
 * @def         XSEndian32_Swap
 * @brief       Swap endiannes of a 32 bits value
 * @param       value   The value to swap
 */
#define XSEndian32_Swap( value )                                \
    (                                                           \
        ( ( ( UInt32 )( ( value ) & 0x000000FF ) ) << 24 ) |    \
        ( ( ( UInt32 )( ( value ) & 0x0000FF00 ) ) <<  8 ) |    \
        ( ( ( UInt32 )( ( value ) & 0x00FF0000 ) ) >>  8 ) |    \
        ( ( ( UInt32 )( ( value ) & 0xFF000000 ) ) >> 24 )      \
    )

/*!
 * @def         XSEndian64_Swap
 * @brief       Swap endiannes of a 64 bits value
 * @param       value   The value to swap
 */
#define XSEndian64_Swap(value)                                          \
    (                                                                   \
        ( ( ( ( UInt64 )value ) << 56 ) & 0xFF00000000000000ULL )  |    \
        ( ( ( ( UInt64 )value ) << 40 ) & 0x00FF000000000000ULL )  |    \
        ( ( ( ( UInt64 )value ) << 24 ) & 0x0000FF0000000000ULL )  |    \
        ( ( ( ( UInt64 )value ) <<  8 ) & 0x000000FF00000000ULL )  |    \
        ( ( ( ( UInt64 )value ) >>  8 ) & 0x00000000FF000000ULL )  |    \
        ( ( ( ( UInt64 )value ) >> 24 ) & 0x0000000000FF0000ULL )  |    \
        ( ( ( ( UInt64 )value ) >> 40 ) & 0x000000000000FF00ULL )  |    \
        ( ( ( ( UInt64 )value ) >> 56 ) & 0x00000000000000FFULL )       \
    )

/*!
 * @def         WEAK_ATTRIBUTE
 * @brief       Standardization of the weak compiler attribute
 * @details     Not all compiler support this attribute, so it may be defined
 *              to nothing.
 */
#if defined( __GNUC__ ) && ( ( __GNUC__ >= 4 ) || ( ( __GNUC__ == 3 ) && ( __GNUC_MINOR__ >= 1 ) ) )
    #define WEAK_ATTRIBUTE __attribute__( ( weak ) )
#else
    #define WEAK_ATTRIBUTE
#endif

/*!
 * @def         WEAK_IMPORT_ATTRIBUTE
 * @brief       Standardization of the weak import compiler attribute
 * @details     Not all compiler support this attribute, so it may be defined
 *              to nothing.
 */
#if defined( __GNUC__ ) && ( ( __GNUC__ >= 4 ) || ( ( __GNUC__ == 3 ) && ( __GNUC_MINOR__ >= 1 ) ) )
    #define WEAK_IMPORT_ATTRIBUTE __attribute__( ( weak_import ) )
#elif defined(__MWERKS__) && ( __MWERKS__ >= 0x3205 )
    #define WEAK_IMPORT_ATTRIBUTE __attribute__( ( weak_import ) )
#else
    #define WEAK_IMPORT_ATTRIBUTE
#endif

/*!
 * @def         DEPRECATED_ATTRIBUTE
 * @brief       Standardization of the deprecated compiler attribute
 * @details     Not all compiler support this attribute, so it may be defined
 *              to nothing.
 */
#if defined( __GNUC__ ) && ( ( __GNUC__ >= 4 ) || ( ( __GNUC__ == 3 ) && ( __GNUC_MINOR__ >= 1 ) ) )
    #define DEPRECATED_ATTRIBUTE __attribute__( ( deprecated ) )
#else
    #define DEPRECATED_ATTRIBUTE
#endif

/*!
 * @def         UNAVAILABLE_ATTRIBUTE
 * @brief       Standardization of the unavailable compiler attribute
 * @details     Not all compiler support this attribute, so it may be defined
 *              to nothing.
 */
#if defined( __GNUC__ ) && ( ( __GNUC__ >= 4 ) || ( ( __GNUC__ == 3 ) && ( __GNUC_MINOR__ >= 1 ) ) )
    #define UNAVAILABLE_ATTRIBUTE __attribute__( ( unavailable ) )
#else
    #define UNAVAILABLE_ATTRIBUTE
#endif

/*!
 * @def         FORMAT_ATTRIBUTE
 * @brief       Standardization of the format compiler attribute
 * @details     Not all compiler support this attribute, so it may be defined
 *              to nothing.
 */
#if defined( __GNUC__ ) && ( ( __GNUC__ >= 4 ) || ( ( __GNUC__ == 3 ) && ( __GNUC_MINOR__ >= 1 ) ) )
    #define FORMAT_ATTRIBUTE( f, s, v ) __attribute__( ( format( f, s, v ) ) )
#else
    #define FORMAT_ATTRIBUTE( f, s, v )
#endif

/*!
 * @def         CONST_ATTRIBUTE
 * @brief       Standardization of the const compiler attribute
 * @details     Not all compiler support this attribute, so it may be defined
 *              to nothing.
 */
#if defined( __GNUC__ ) && ( ( __GNUC__ >= 4 ) || ( ( __GNUC__ == 3 ) && ( __GNUC_MINOR__ >= 1 ) ) )
    #define CONST_ATTRIBUTE __attribute__( ( const ) )
#else
    #define CONST_ATTRIBUTE
#endif

/*!
 * @def         NORETURN_ATTRIBUTE
 * @brief       Standardization of the noreturn compiler attribute
 * @details     Not all compiler support this attribute, so it may be defined
 *              to nothing.
 */
#if defined( __GNUC__ ) && ( ( __GNUC__ >= 4 ) || ( ( __GNUC__ == 3 ) && ( __GNUC_MINOR__ >= 1 ) ) )
    #define NORETURN_ATTRIBUTE __attribute__( ( noreturn ) )
#else
    #define NORETURN_ATTRIBUTE
#endif

/*!
 * @def         XS_INLINE
 * @brief       Standardization of the inline compiler keyword
 */
#if !defined( XS_INLINE )
    #if defined( __GNUC__ ) && ( __GNUC__ == 4 ) && !defined( DEBUG )
        #define XS_INLINE static __inline__ __attribute__( ( always_inline ) )
    #elif defined( __GNUC__ )
        #define XS_INLINE static __inline__
    #elif defined( __MWERKS__ ) || defined( __cplusplus )
        #define XS_INLINE static inline
    #elif defined(_MSC_VER)
        #define XS_INLINE static __inline
    #endif
#endif

/*!
 * @def         NULL
 * @brief       NULL value
 */
#if !defined( NULL )
    #if defined( __GNUG__ )
        #define NULL __null
    #elif defined( __cplusplus )
        #define NULL 0
    #else
        #define NULL ( ( void * )0 )
    #endif
#endif

/*!
 * @def         TRUE
 * @brief       TRUE value
 */
#if !defined( TRUE )
    #define TRUE    1
#endif

/*!
 * @def         FALSE
 * @brief       FALSE value
 */
#if !defined( FALSE )
    #define FALSE	0
#endif

/*!
 * @def         __func__
 * @brief       Function name
 */
#ifndef __func__
    #ifdef _WIN32
        #if defined( __FUNCTION__ )
            #define __func__ __FUNCTION__
        #elif defined( __FUNCSIG__ )
            #define __func__ __FUNCSIG__
        #elif defined( __FUNCDNAME__ )
            #define __func__ __FUNCDNAME__
        #endif
    #elif __STDC_VERSION__ < 199901L
        #ifdef __GNUC__
            #if __GNUC__ >= 2
                #define __func__ __FUNCTION__
            #else
                #define __func__ "<unknown function>"
            #endif
        #else
            #define __func__ "<unknown function>"
        #endif
    #endif
#endif

XS_EXTERN_C_END

#endif /* _XS_MACROS_H_ */
