/*******************************************************************************
 * Copyright (c) 2011, Jean-David Gadina <macmade@eosgarden.com>
 * Distributed under the Boost Software License, Version 1.0.
 * 
 * Boost Software License - Version 1.0 - August 17th, 2003
 * 
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 * 
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 ******************************************************************************/
 
/* $Id$ */

/*******************************************************************************
 * Copyright notice:
 * 
 * Some macros parts of this code (XSTry, XSCatch, ...) are borrowed from the
 * CExcept project (http://www.nicemice.net/cexcept/), by Adam M. Costello.
 ******************************************************************************/

/*!
 * @file        XSMacrosException.h
 * @brief       OOP macros
 * @author      St√©phane Cherpit <stef@eosgarden.com>
 * @author      Jean-David Gadina <macmade@eosgarden.com>
 */

#ifndef _XS_MACROS_OOP_H_
#define _XS_MACROS_OOP_H_
#pragma once

#include "XSMacros.h"

XS_EXTERN_C_BEGIN

/*!
 * @def     __XSConcatName2
 * @brief   ...
 * @param   a   ...
 * @param   b   ...
 */
#define __XSConcatName2( a, b )       a ## b

/*!
 * @def     __XSConcatName3
 * @brief   ...
 * @param   a   ...
 * @param   b   ...
 * @param   c   ...
 */
#define __XSConcatName3( a, b, c )    a ## b ## c

/*!
 * @def     __XSConcatName4
 * @brief   ...
 * @param   a   ...
 * @param   b   ...
 * @param   c   ...
 * @param   d   ...
 */
#define __XSConcatName4( a, b, c, d ) a ## b ## c ## d

#define __XSClassStructName( name )                     __XSConcatName3( __, name, _Struct )
#define __XSClassTypeName( name )                       __XSConcatName2( __, name )
#define __XSClassInfosName( name )                      __XSConcatName3( __, name, Class )
#define __XSClassPropertyName( class )                  __XSConcatName3( __, class, _Properties )
#define __XSClassPropertyStructName( class )            __XSConcatName3( __, class, _Properties_Struct )
#define __XSMethodName( class, name )                   __XSConcatName3( class, _, name )
#define __XSMethodContextName( class, name )            __XSConcatName4( class, _, name, _Context )
#define __XSMethodContextStructName( class, name )      __XSConcatName4( class, _, name, _Context_Struct )
#define __XSMethodArgumentsName( class, name )          __XSConcatName4( class, _, name, _Arguments )
#define __XSMethodArgumentsStructName( class, name )    __XSConcatName4( class, _, name, _Arguments_Struct )
#define __XSMethodMakeArgsName( class, name )           __XSConcatName4( class, _, name, _MakeArgs )
#define __XSMethodMakeArgsLinkName( name )              __XSConcatName2( name, _MakeArgs )
#define __XSMethodLinkerName( class )                   __XSConcatName2( class, _RT_Init )
#define __XSClassAlloc( class )                         __XSConcatName2( class, _Alloc )
#define __XSClassInitialize( class )                    __XSConcatName3( __, class, _Initialize )
#define __XSClassConstructor( class )                   __XSConcatName2( class, _Construct )
#define __XSClassDestructor( class )                    __XSConcatName2( class, _Destruct )
#define __XSClassInit( class )                          __XSConcatName2( class, _Init )
#define __XSClassCopy( class )                          __XSConcatName2( class, _Copy )
#define __XSClassToString( class )                      __XSConcatName2( class, _ToString )
#define __XSClassEquals( class )                        __XSConcatName2( class, _Equals )

#define __XSStringify( x )                              #x
#define __XSExpendStringify( x )                        __XSStringify( x )

#define XSClassDeclare                                                      \
    typedef struct __XSClassStructName( XSCurrentClass ) * XSCurrentClass;

#define XSClassDefine                                                               \
    static XSClassID __classID;                                                     \
                                                                                    \
    void __XSClassConstructor( XSCurrentClass )( XSObject object );                 \
    void __XSClassDestructor( XSCurrentClass )( XSObject object );                  \
    void __XSClassInit( XSCurrentClass )( XSObject object );                        \
    void __XSClassCopy( XSCurrentClass )( XSObject source, XSObject destination );  \
    XSString __XSClassToString( XSCurrentClass )( XSObject object );                \
    BOOL __XSClassEquals( XSCurrentClass )( XSObject object1, XSObject object2 );   \
                                                                                    \
    XSObject __XSClassAlloc( XSCurrentClass )( void );                              \
    XSObject __XSClassAlloc( XSCurrentClass )( void )                               \
    {                                                                               \
        return XSRuntime_CreateInstance( __classID );                               \
    }

#define XSClassDefinitions( construct, destruct, init, copy, toString, equals )   \
    }                                                                           \
    const XSClassInfos __XSClassInfosName( XSCurrentClass ) =                   \
    {                                                                           \
        __XSExpendStringify( XSCurrentClass ),                                  \
        sizeof( __XSClassTypeName( XSCurrentClass ) ),                          \
        construct,                                                              \
        destruct,                                                               \
        init,                                                                   \
        copy,                                                                   \
        toString,                                                               \
        equals                                                                  \
    }

#define XSPropertiesStart                                   \
    struct __XSClassStructName( XSCurrentClass )            \
    {                                                       \
        XSRuntimeClass  * __class;

#define XSPropertiesEnd                                                                         \
    };                                                                                          \
    typedef struct __XSClassStructName( XSCurrentClass ) __XSClassTypeName( XSCurrentClass );   \
    extern const XSClassInfos __XSClassInfosName( XSCurrentClass );                             \
    void __XSClassInitialize( XSCurrentClass )( void );                                         \
    void __XSClassInitialize( XSCurrentClass )( void )                                          \
    {                                                                                           \
        __classID = XSRuntime_RegisterClass( &__XSClassInfosName( XSCurrentClass ) );

#define XSBinding( ret, name ) XSRuntime_BindMethodToClassID( __classID, ( void ( * )( void ) )__XSMethodName( XSCurrentClass, name ), #name )

#define XSMethodImplementationStart

#define XSMethodDefine( ret, mName )                                                                                                \
    ret __XSMethodName( XSCurrentClass, mName )( void * __context )                                                                 \
    {                                                                                                                               \
        __XSMethodContextName( XSCurrentClass, mName ) * context   = ( __XSMethodContextName( XSCurrentClass, mName ) * )__context; \
        __XSClassTypeName( XSCurrentClass ) * self                 = context->self;                                                 \
        __XSMethodArgumentsName( XSCurrentClass, mName ) arguments = context->arguments;                                            \
        __context                                                  = NULL;                                                          \
        ( void )self;                                                                                                               \
        ( void )arguments;                                                                                                          \
        {

#define XSMethodImplementationEnd }}

#define XSClassConstructor  __XSClassConstructor( XSCurrentClass )
#define XSClassDestructor   __XSClassDestructor( XSCurrentClass )
#define XSClassInit         __XSClassInit( XSCurrentClass )
#define XSClassCopy         __XSClassCopy( XSCurrentClass )
#define XSClassToString     __XSClassToString( XSCurrentClass )
#define XSClassEquals       __XSClassEquals( XSCurrentClass )

#define XSConstructorStart \
    void __XSClassConstructor( XSCurrentClass )( XSObject __self )                                      \
    {                                                                                                   \
        __XSClassTypeName( XSCurrentClass ) * self = ( __XSClassTypeName( XSCurrentClass ) * )__self;   \
        __self                                     = NULL;                                              \
        ( void )self;

#define XSConstructorEnd }

#define XSToStringStart \
    XSString __XSClassToString( XSCurrentClass )( XSObject __self )                                      \
    {                                                                                                   \
        __XSClassTypeName( XSCurrentClass ) * self = ( __XSClassTypeName( XSCurrentClass ) * )__self;   \
        __self                                     = NULL;                                              \
        ( void )self;

#define XSToStringEnd }

#define XSNew( class ) __XSClassAlloc( class )()

#define RegisterClass( class ) __XSClassInitialize( class )()

#define XSMethodPrototype( ret, mName, mArgs, argNames, ... )                                           \
    typedef struct __XSMethodArgumentsStructName( XSCurrentClass, mName )                               \
    mArgs                                                                                               \
    __XSMethodArgumentsName( XSCurrentClass, mName );                                                   \
    typedef struct __XSMethodContextStructName( XSCurrentClass, mName )                                 \
    {                                                                                                   \
        XSCurrentClass    self;                                                                         \
        __XSMethodArgumentsName( XSCurrentClass, mName ) arguments;                                     \
    }                                                                                                   \
    __XSMethodContextName( XSCurrentClass, mName );                                                     \
    void * __XSMethodMakeArgsName( XSCurrentClass, mName )( XSCurrentClass self, __VA_ARGS__ );         \
    void * __XSMethodMakeArgsName( XSCurrentClass, mName )( XSCurrentClass self, __VA_ARGS__ )          \
    {                                                                                                   \
        __XSMethodArgumentsName( XSCurrentClass, mName ) args = argNames;                               \
        __XSMethodContextName( XSCurrentClass, mName ) * s =                                            \
        ( __XSMethodContextName( XSCurrentClass, mName ) * )                                            \
        XSAlloc( sizeof( __XSMethodContextName( XSCurrentClass, mName ) ) );                            \
        s->self = self;                                                                         \
        memcpy( &( s->arguments ), &args, sizeof( __XSMethodArgumentsName( XSCurrentClass, mName ) ) ); \
        return ( void * )s;                                                                             \
    }                                                                                                   \
    ret __XSMethodName( XSCurrentClass, mName )( void * _context )

XS_EXTERN_C_END

#endif /* _XS_MACROS_OOP_H_ */
