/*******************************************************************************
 * Copyright (c) 2011, Jean-David Gadina <macmade@eosgarden.com>
 * Distributed under the Boost Software License, Version 1.0.
 * 
 * Boost Software License - Version 1.0 - August 17th, 2003
 * 
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 * 
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 ******************************************************************************/

/* $Id$ */

/*!
 * @header      
 * @copyright   eosgarden 2011 - Jean-David Gadina <macmade@eosgarden.com>
 * @abstract    
 */

#ifndef ___XS_MEMORY_H_
#define ___XS_MEMORY_H_
#pragma once

#include "../XSMacros.h"

XS_EXTERN_C_BEGIN

#include "XS.h"

/* Maximum number of auto-release pools */
#define XS_MEMORY_MAX_AR_POOLS  256

/* Initial capacity of the auto-release pools */
#define XS_MEMORY_NUM_OBJECTS   256

/*!
 * @typdef      XSAutoreleasePool
 * @abastract   XSAutoreleasePool class
 * @field       _xsbase     Runtime class
 */
typedef struct _XSAutoreleasePool
{
    XSRuntimeBase _xsbase;
    size_t        size;
    size_t        num_objects;
    void       ** objects;
}
XSAutoreleasePool;

/*!
 * @typdef      __XSMemoryObject
 * @abastract   Allocated memeory object
 * @field       retain_count    The object's retain count
 * @field       size            The allocated data size
 * @field       typeID          The typeID (only for allocated objects)
 * @field       f1              Memory fence to prevent overflows
 * @field       data            A pointer to the allocated data
 * @field       f2              Memory fence to prevent overflows
 */
typedef struct ___XSMemoryObject
{
    XSUInteger    retain_count;
    size_t        size;
    XSTypeID      typeID;
    unsigned char f1[ 256 ];
    void        * data;
    unsigned char f2[ 256 ];
}
__XSMemoryObject;

/*!
 * @function    __XSAutoreleasePool_Initialize
 * @abstract    Runtime initialization
 * @result      void
 */
void __XSAutoreleasePool_Initialize( void );

/*!
 * @function    __XSAutoreleasePool_Alloc
 * @abstract    Object allocator
 * @result      A pointer to the allocated object
 */
XSAutoreleasePool * __XSAutoreleasePool_Alloc( void );

/*!
 * @function    __XSAutoreleasePool_Dealloc
 * @abstract    Destructor
 * @abstract    A pointer to the object to be destructed
 * @param       object  The object that will be destructed
 * @result      void
 */
void __XSAutoreleasePool_Dealloc( void * object );

/*!
 * @function    __XSMemory_GetCurrentAutoreleasePool
 * @abstract    Gets a pointer to a memory records object from a pointer returned by the XS allocation functions.
 * @result      The auto-release pool object or NULL if no aut-release pool were created
 */
XSAutoreleasePool * __XSMemory_GetCurrentAutoreleasePool( void );

/*!
 * @function    __XSMemory_AutoreleasePoolDrain
 * @abstract    Releases all objects placed in the auto-release pool.
 * @result      void
 */
void __XSMemory_AutoreleasePoolDrain( XSAutoreleasePool * ap );

/*!
 * @function    __XSMemory_GetMemoryObject
 * @abstract    Gets the current (top-level) auto-release pool
 * @result      A pointer to the memory record object
 */
__XSMemoryObject * __XSMemory_GetMemoryObject( void * ptr );

/* Storage for the auto-release pools */
extern XSAutoreleasePool * __xsmemory_ar_pools[];

/* NUmber of active auto-release pools */
extern XSUInteger __xsmemory_ar_pools_num;

XS_EXTERN_C_END

#endif /* ___XS_MEMORY_H_ */
