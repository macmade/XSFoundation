/*******************************************************************************
 * Copyright (c) 2011, Jean-David Gadina <macmade@eosgarden.com>
 * Distributed under the Boost Software License, Version 1.0.
 * 
 * Boost Software License - Version 1.0 - August 17th, 2003
 * 
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 * 
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 ******************************************************************************/
 
/* $Id$ */

/*******************************************************************************
 * Copyright notice:
 * 
 * Macros parts of this code (XSTry, XSCatch, ...) are borrowed from the CExcept
 * project (http://www.nicemice.net/cexcept/), by Adam M. Costello.
 ******************************************************************************/

/*!
 * @header      XSMacrosException.h
 * @copyright   eosgarden 2011 - Jean-David Gadina <macmade@eosgarden.com>
 * @abstract    Exception macros
 */

#ifndef _XS_MACROS_EXCEPTION_H_
#define _XS_MACROS_EXCEPTION_H_
#pragma once

#include "XSMacros.h"

XS_EXTERN_C_BEGIN

#ifdef _WIN32
    
#define XSMain( argc, argv )    int _tmain( int argc, _TCHAR * argv[] )
    
#else
    
#define XSMain( argc, argv )    int main( int argc, char * argv[] )
    
#endif

#define XSMainStart( argc, argv )                                               \
    XSMain( argc, argv )                                                        \
    {                                                                           \
        XSApplication_Start( argc, ( const char ** )argv );                     \
        XSFunctionStart()

#ifdef _WIN32

#define XSMainEnd( returnValue )                                                \
        XSMainFunctionEnd( returnValue )                                        \
    }
    
#else

#define XSMainEnd( returnValue )                                                \
        XSFunctionEnd( returnValue )                                            \
    }

#endif

#define XSFunctionStart()                                                       \
    {                                                                           \
        {                                                                       \
            XSUInteger  e;                                                      \
            XSException __xs_exception;                                         \
                                                                                \
            XSTry                                                               \
            {

#define XSMainFunctionEnd( returnValue )                                        \
            }                                                                   \
            XSMainCatch( e, returnValue )                                       \
            {                                                                   \
                    __xs_exception = XSExceptionCenter_GetException             \
                    (                                                           \
                        XSExceptionCenter_DefaultCenter(),                      \
                        e                                                       \
                    );                                                          \
                                                                                \
                    XSMemoryDebug_Disable();                                    \
                                                                                \
                    XSLog                                                       \
                    (                                                           \
                        "FATAL ERROR: uncaught exception: $@\n",                \
                        __xs_exception                                          \
                    );                                                          \
                    ExitProcess( EXIT_FAILURE );                                \
            }                                                                   \
        }                                                                       \
        return returnValue;                                                     \
    }

#define XSFunctionEnd( returnValue )                                            \
            }                                                                   \
            XSCatch( e )                                                        \
            {                                                                   \
                    __xs_exception = XSExceptionCenter_GetException             \
                    (                                                           \
                        XSExceptionCenter_DefaultCenter(),                      \
                        e                                                       \
                    );                                                          \
                                                                                \
                    XSMemoryDebug_Disable();                                    \
                                                                                \
                    XSLog                                                       \
                    (                                                           \
                        "FATAL ERROR: uncaught exception: $@\n",                \
                        __xs_exception                                          \
                    );                                                          \
                    exit( EXIT_FAILURE );                                       \
            }                                                                   \
        }                                                                       \
        return returnValue;                                                     \
    }

#define XSThrow   for( ; ; longjmp( *( XSExceptionContext->e_env ), 1 ) ) XSExceptionContext->e = 

#define XSTry                                                   \
    {                                                           \
        jmp_buf * e_prev;                                       \
        jmp_buf   e_cur;                                        \
                                                                \
        e_prev                    = XSExceptionContext->e_env;  \
        XSExceptionContext->e_env = &e_cur;                     \
                                                                \
        if( setjmp( e_cur ) == 0 )                              \
        {                                                       \
            do

#define __XSCatch( action )                                                         \
            while( XSExceptionContext->caught = 0, XSExceptionContext->caught );    \
        }                                                                           \
        else                                                                        \
        {                                                                           \
            XSExceptionContext->caught = 1;                                         \
        }                                                                           \
                                                                                    \
        XSExceptionContext->e_env = e_prev;                                         \
    }                                                                               \
    if( !XSExceptionContext->caught || action )                                     \
    {}                                                                              \
    else

#define __XSMainCatch( action, returnValue )                                                         \
            while( XSExceptionContext->caught = 0, XSExceptionContext->caught );    \
        }                                                                           \
        else                                                                        \
        {                                                                           \
            XSExceptionContext->caught = 1;                                         \
        }                                                                           \
                                                                                    \
        XSExceptionContext->e_env = e_prev;                                         \
    }                                                                               \
    if( !XSExceptionContext->caught || action )                                     \
    {                                                                               \
        ExitProcess( returnValue );                                                 \
    }                                                                               \
    else

#define XSCatch( ex ) __XSCatch( ( ( ex ) = XSExceptionContext->e, 0 ) )
#define XSMainCatch( ex, returnValue ) __XSMainCatch( ( ( ex ) = XSExceptionContext->e, 0 ), returnValue )

XS_EXTERN_C_END

#endif /* _XS_MACROS_EXCEPTION_H_ */
