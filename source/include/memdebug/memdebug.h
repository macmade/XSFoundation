/*******************************************************************************
 * Copyright (c) 2011, Jean-David Gadina <macmade@eosgarden.com>
 * Distributed under the Boost Software License, Version 1.0.
 * 
 * Boost Software License - Version 1.0 - August 17th, 2003
 * 
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 * 
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 ******************************************************************************/
 
/* $Id$ */

#ifndef _XS_MEMDEBUG_H_
#define _XS_MEMDEBUG_H_
#pragma once

/* System includes */
#include <stddef.h>

/* Checks if the function name constant is defined */
#ifndef __func__

/* Checks the C standard version */
#if __STDC_VERSION__ < 199901L

/* Checks if we are using GNU C */
#ifdef __GNUC__

/* Checks the GNU C version */
#if __GNUC__ >= 2

/* Uses the old constant name */
#define __func__ __FUNCTION__

#else

/* Function name cannot be used */
#define __func__ "<unknown>"

#endif
#else

/* Function name cannot be used */
#define __func__ "<unknown>"

#endif
#endif
#endif

/* Checks if MEMDebug must be activated */
#if defined( MEMDEBUG ) && MEMDEBUG
    
/* Redefines the memory functions */
#define malloc( size )          memdebug_malloc( size, __FILE__, __LINE__, __func__ )
#define valloc( size )          memdebug_valloc( size, __FILE__, __LINE__, __func__ )
#define calloc( size1, size2 )  memdebug_calloc( size1, size2, __FILE__, __LINE__, __func__ )
#define realloc( ptr, size )    memdebug_realloc( ptr, size, __FILE__, __LINE__, __func__ )
#define free( ptr )             memdebug_free( ptr, __FILE__, __LINE__, __func__ )

/* Checks if the alloca function is available */
#ifdef _ALLOCA_H_

/* Checks if we are using GCC 3 or greater */
#if defined( __GNUC__ ) && __GNUC__ >= 3

/* Redefines the built-in alloca function  */
#undef alloca
#define alloca( size )  memdebug_builtin_alloca( size, __FILE__, __LINE__, __func__ )

#else 

/* Redefine the alloca function */
#define alloca( size )  memdebug_alloca( size, __FILE__, __LINE__, __func__ )

#endif
#endif

/* Checks if the Objective-C garbage collector is present */
#if defined( OBJC_WITH_GC ) && OBJC_WITH_GC

/* Redefines the Objective-C garbage collector memory functions */
#define GC_malloc( size )           memdebug_gc_malloc( size, __FILE__, __LINE__, __func__ )
#define GC_malloc_atomic( size )    memdebug_gc_malloc_atomic( size, __FILE__, __LINE__, __func__ )
#define GC_calloc( size1, size2 )   memdebug_gc_calloc( size1, size2, __FILE__, __LINE__, __func__ )
#define GC_realloc( ptr, size )     memdebug_gc_realloc( ptr, size, __FILE__, __LINE__, __func__ )

#endif

#ifdef _MALLOC_MALLOC_H_

#define malloc_zone_malloc( zone, size )            memdebug_malloc_zone_malloc( zone, size, __FILE__, __LINE__, __func__ )
#define malloc_zone_calloc( zone, size1, size2 )    memdebug_malloc_zone_calloc( zone, size1, size2, __FILE__, __LINE__, __func__ )
#define malloc_zone_valloc( zone, size )            memdebug_malloc_zone_valloc( zone, size, __FILE__, __LINE__, __func__ )
#define malloc_zone_free( zone, ptr )               memdebug_malloc_zone_free( zone, ptr, __FILE__, __LINE__, __func__ )
#define malloc_zone_realloc( zone, ptr, size )      memdebug_malloc_zone_realloc( zone, ptr, size, __FILE__, __LINE__, __func__ )

#endif
#endif

/* Defines the original pool size if it's not already defined */
#ifndef MEMDEBUG_POOL_SIZE
#define MEMDEBUG_POOL_SIZE 100    
#endif

/* Defines the bactrace size if it's not already defined */
#ifndef MEMDEBUG_BACKTRACE_SIZE
#define MEMDEBUG_BACKTRACE_SIZE 100    
#endif

/* Prototypes for the standard memory functions */
void * memdebug_malloc( size_t size, const char * file, const int line, const char * func );
void * memdebug_valloc( size_t size, const char * file, const int line, const char * func );
void * memdebug_calloc( size_t size1, size_t size2, const char * file, const int line, const char * func );
void * memdebug_realloc( void * ptr, size_t size, const char * file, const int line, const char * func );
void   memdebug_free( void * ptr, const char * file, int line, const char * func );

/* Checks if the alloca function is available */
#ifdef _ALLOCA_H_

/* Checks if we are using GCC 3 or greater */
#if defined( __GNUC__ ) && __GNUC__ >= 3

/* Prototype for the alloca function */
void * memdebug_builtin_alloca( size_t size, const char * file, const int line, const char * func );

#else 

/* Prototype for the alloca function */
void * memdebug_alloca( size_t size, const char * file, const int line, const char * func );

#endif
#endif

/* Checks if the Objective-C garbage collector is present */
#if defined( OBJC_WITH_GC ) && OBJC_WITH_GC

/* Prototypes for the Objective-C garbage collector memory functions */
void * memdebug_gc_malloc( size_t size, const char * file, const int line, const char * func );
void * memdebug_gc_malloc_atomic( size_t size, const char * file, const int line, const char * func );
void * memdebug_gc_calloc( size_t size1, size_t size2, const char * file, const int line, const char * func );
void * memdebug_gc_realloc( void * ptr, size_t size, const char * file, const int line, const char * func );

#endif

#ifdef _MALLOC_MALLOC_H_

void * memdebug_malloc_zone_malloc( malloc_zone_t * zone, size_t size, const char * file, const int line, const char * func );
void * memdebug_malloc_zone_calloc( malloc_zone_t * zone, size_t size1, size_t size2, const char * file, const int line, const char * func );
void * memdebug_malloc_zone_valloc( malloc_zone_t * zone, size_t size, const char * file, const int line, const char * func );
void   memdebug_malloc_zone_free( malloc_zone_t * zone, void * ptr, const char * file, const int line, const char * func );
void * memdebug_malloc_zone_realloc( malloc_zone_t * zone, void * ptr, size_t size, const char * file, const int line, const char * func );

#endif

/* Debug output functions */
void memdebug_print_status( void );
void memdebug_print_objects( void );
void memdebug_print_free( void );
void memdebug_print_active( void );

/* Informational functions */
unsigned long int memdebug_num_objects( void );
unsigned long int memdebug_num_free( void );
unsigned long int memdebug_num_active( void );

#endif /* _XS_MEMDEBUG_H_ */
