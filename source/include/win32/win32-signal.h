/*******************************************************************************
 * Copyright (c) 2011, Jean-David Gadina <macmade@eosgarden.com>
 * Distributed under the Boost Software License, Version 1.0.
 * 
 * Boost Software License - Version 1.0 - August 17th, 2003
 * 
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 * 
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 ******************************************************************************/
 
/* $Id$ */

/*!
 * @file        win32-signal.h
 * @brief       Signal functions for Windows
 * @author      Jean-David Gadina <macmade@eosgarden.com>
 */

#ifndef _XS_WIN32_SIGNAL_H_
#define _XS_WIN32_SIGNAL_H_
#pragma once

#ifdef __cplusplus
extern "C" {
#endif

#include <stdint.h>
#include "win32-types.h"

#ifndef SIGABRT
/*!
 * @def         SIGABRT
 * @brief       Abort
 */
#define SIGABRT     0x01
#endif

#ifndef SIGALRM
/*!
 * @def         SIGALRM
 * @brief       Alarm
 */
#define SIGALRM     0x02
#endif

#ifndef SIGFPE
/*!
 * @def         SIGFPE
 * @brief       Floating point exception
 */
#define SIGFPE      0x03
#endif

#ifndef SIGHUP
/*!
 * @def         SIGHUP
 * @brief       Hang-up
 */
#define SIGHUP      0x04
#endif

#ifndef SIGILL
/*!
 * @def         SIGILL
 * @brief       Illegal instruction
 */
#define SIGILL      0x05
#endif

#ifndef SIGINT
/*!
 * @def         SIGINT
 * @brief       Interrupt request
 */
#define SIGINT      0x06
#endif

#ifndef SIGKILL
/*!
 * @def         SIGKILL
 * @brief       Kill process
 */
#define SIGKILL     0x07
#endif

#ifndef SIGPIPE
/*!
 * @def         SIGPIPE
 * @brief       Pipe exception
 */
#define SIGPIPE     0x08
#endif

#ifndef SIGQUIT
/*!
 * @def         SIGQUIT
 * @brief       Core dump
 */
#define SIGQUIT     0x09
#endif

#ifndef SIGSEGV
/*!
 * @def         SIGSEGV
 * @brief       Segmentation fault
 */
#define SIGSEGV     0x0A
#endif

#ifndef SIGTERM
/*!
 * @def         SIGTERM
 * @brief       Process termination request
 */
#define SIGTERM     0x0B
#endif

#ifndef SIGUSR1
/*!
 * @def         SIGUSR1
 * @brief       User defined condition
 */
#define SIGUSR1     0x0C
#endif

#ifndef SIGUSR2
/*!
 * @def         SIGUSR2
 * @brief       User defined consition
 */
#define SIGUSR2     0x0D
#endif

#ifndef SIGCHLD
/*!
 * @def         SIGCHLD
 * @brief       Child process termination
 */
#define SIGCHLD     0x0E
#endif

#ifndef SIGCONT
/*!
 * @def         SIGCONT
 * @brief       Process restart
 */
#define SIGCONT     0x0F
#endif

#ifndef SIGSTOP
/*!
 * @def         SIGSTOP
 * @brief       Process stop
 */
#define SIGSTOP     0x10
#endif

#ifndef SIGTSTP
/*!
 * @def         SIGTSTP
 * @brief       Process pause
 */
#define SIGTSTP     0x11
#endif

#ifndef SIGTTIN
/*!
 * @def         SIGTTIN
 * @brief       TTY read
 */
#define SIGTTIN     0x12
#endif

#ifndef SIGTTOU
/*!
 * @def         SIGTTOU
 * @brief       TTY write
 */
#define SIGTTOU     0x13
#endif

#ifndef SIGBUS
/*!
 * @def         SIGBUS
 * @brief       Bus error
 */
#define SIGBUS      0x14
#endif

#ifndef SIGPOLL
/*!
 * @def         SIGPOLL
 * @brief       Asynchronous I/O event
 */
#define SIGPOLL     0x15
#endif

#ifndef SIGPROF
/*!
 * @def         SIGPROF
 * @brief       Profiling timer expiration
 */
#define SIGPROF     0x16
#endif

#ifndef SIGSYS
/*!
 * @def         SIGSYS
 * @brief       Bad system call argument
 */
#define SIGSYS      0x17
#endif

#ifndef SIGTRAP
/*!
 * @def         SIGTRAP
 * @brief       Debugger condition
 */
#define SIGTRAP     0x18
#endif

#ifndef SIGURG
/*!
 * @def         SIGURG
 * @brief        Urgent data in socket
 */
#define SIGURG      0x19
#endif

#ifndef SIGVTALRM
/*!
 * @def         SIGVTALRM
 * @brief       Time limit elapsed
 */
#define SIGVTALRM   0x1A
#endif

#ifndef SIGXCPU
/*!
 * @def         SIGXCPU
 * @brief       Exceeded CPU time
 */
#define SIGXCPU     0x1B
#endif

#ifndef SIGXFSZ
/*!
 * @def         SIGXFSZ
 * @brief       Allowed file size exceeded
 */
#define SIGXFSZ     0x1C
#endif

/*!
 * @typedef     sigset_t
 * @brief       ...
 */
typedef uint64_t sigset_t;

/*!
 * @union       sigval
 * @brief       ...
 */
union sigval
{
    int    sival_int;   /*! ... */
    void * sival_ptr;   /*! ... */
};

/*!
 * @struct      siginfo_t
 * @brief       ...
 */
struct siginfo_t_struct
{
	int          si_signo;  /*! ... */
	int          si_code;   /*! ... */
	union sigval si_value;  /*! ... */
	int          si_errno;  /*! ... */
	pid_t        si_pid;    /*! ... */
	uid_t        si_uid;    /*! ... */
	void       * si_addr;   /*! ... */
	int          si_status; /*! ... */
	int          si_band;   /*! ... */
};

/*!
 * @typedef     siginfo_t
 * @brief       ...
 */
typedef struct siginfo_t_struct siginfo_t;

/*!
 * @struct      siginfo_t
 * @brief       ...
 */
struct sigaction
{
    void ( * sa_handler )( int );                           /*! ... */
    sigset_t sa_mask;                                       /*! ... */
    int      sa_flags;                                      /*! ... */
    void ( * sa_sigaction )( int, siginfo_t *, void * );    /*! ... */
};

/*!
 * @brief       ...
 * @param       set     ...
 * @result      ...
 */
int sigemptyset( sigset_t * set );

/*!
 * @brief       ...
 * @param       sig     ...
 * @param       act     ...
 * @param       oact    ...
 * @result      ...
 */
int sigaction( int sig, const struct sigaction * act, struct sigaction * oact );
    
    
#ifdef __cplusplus
}
#endif

#endif /* _XS_WIN32_SIGNAL_H_ */
